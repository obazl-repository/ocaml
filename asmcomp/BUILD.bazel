
load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:CONFIG.bzl", "ROOT_MODULE_OPTS", "ROOT_SIG_OPTS")

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS = ROOT_SIG_OPTS

STDLIB = ["//boot:stdlib"]

## dev/test target, builds everything
bootstrap_archive(
    name = "asmcomp",
    manifest  = [
        ":Afl_instrument",
        ":Asmgen",
        ":Asmlibrarian",
        ":Asmlink",
        ":Asmpackager",
        ":Branch_relaxation",
        # ":Branch_relaxation_intf_cmi",
        ":Cmm",
        ":Cmm_helpers",
        ":Cmm_invariants",
        ":Cmmgen",
        ":Cmmgen_state",
        ":Coloring",
        ":Comballoc",
        ":CSEgen",
        ":Dataflow",
        ":Deadcode",
        ":Emitaux",
        ":Interf",
        ":Interval",
        ":Linear",
        ":Linearize",
        ":Linscan",
        ":Liveness",
        ":Mach",
        ":Polling",
        ":Printcmm",
        ":Printlinear",
        ":Printmach",
        ":Reg",
        ":Reloadgen",
        ":Schedgen",
        ":Selectgen",
        ":Spill",
        ":Split",
        ":Strmatch",

        ## arch-dependent configured deps:
        "CSE", "Arch", "Emit", "Proc", "Reload", "Scheduling", "Selection"

    ] + select(
        {
        # "//config/arch:x86_64":
        "@platforms//os:x86_64":
        [":X86_dsl", ":X86_gas", ":X86_masm", ":X86_proc"],
        # "//config/arch:amd64":
        # [":X86_dsl", ":X86_gas", ":X86_masm", ":X86_proc"],
        # "//config/arch:i386":
        "@platforms//os:i386":
        ["X86_dsl", ":X86_gas", ":X86_masm", ":X86_proc"],
    }, no_match_error = "Unsupported arch"),

    # signatures  = [
    #     ":Emitenv_cmi",
    #     ":X86_ast_cmi",
    # ],
    visibility = ["//testsuite:__pkg__"],
)

# bootstrap_archive(
bootstrap_library(
    name = "ocamloptcomp",
    visibility = [
        "//compilerlibs:__pkg__",
        "//testsuite:__pkg__",
    ],
    manifest  = [
        ":Afl_instrument",
        ":Asmgen",
        ":Asmlibrarian",
        ":Asmlink",
        ":Asmpackager",
        ":Branch_relaxation",
        # ":Branch_relaxation_intf_cmi",
        ":Cmm",
        ":Cmm_helpers",
        ":Cmm_invariants",
        ":Cmmgen",
        ":Cmmgen_state",
        ":Coloring",
        ":Comballoc",
        ":CSEgen",
        ":Dataflow",
        ":Deadcode",
        ":Emitaux",
        ":Interf",
        ":Interval",
        ":Linear",
        ":Linearize",
        ":Linscan",
        ":Liveness",
        ":Mach",
        ":Polling",
        ":Printcmm",
        ":Printlinear",
        ":Printmach",
        ":Reg",
        ":Reloadgen",
        ":Schedgen",
        ":Selectgen",
        ":Spill",
        ":Split",
        ":Strmatch",

        "//file_formats:Linear_format",
        "//driver:Opterrors",
        "//driver:Optcompile",
        "//driver:Optmaindriver",

        ## arch-dependent configured deps:
        ":Arch",
        ":CSE",
        ":Emit",
        ":Proc",
        ":Reload",
        ":Scheduling",
        ":Selection"
    ] + select(
        # $(ARCH_SPECIFIC_ASMCOMP) = INTEL_ASM = x86_[proc,dsl,gas,masm]
        {
        "//config/arch:x86_64":
        [":X86_dsl", ":X86_gas", ":X86_masm", ":X86_proc"],
        "//config/arch:i386":
        ["X86_dsl", ":X86_gas", ":X86_masm", ":X86_proc"],
    }, no_match_error = "Unsupported arch"),
)

## compilerlibs/Makefile.compilerlibs:
# INTEL_ASM = \
#   asmcomp/x86_proc.cmo \
#   asmcomp/x86_dsl.cmo \
#   asmcomp/x86_gas.cmo \
#   asmcomp/x86_masm.cmo
# INTEL_ASM_CMI = \
#   asmcomp/x86_ast.cmi
# ARCH_SPECIFIC_ASMCOMP =
# ARCH_SPECIFIC_ASMCOMP_CMI =
# ifeq ($(ARCH),i386)
# ARCH_SPECIFIC_ASMCOMP = $(INTEL_ASM)
# ARCH_SPECIFIC_ASMCOMP_CMI = $(INTEL_ASM_CMI)
# endif
# ifeq ($(ARCH),amd64)
# ARCH_SPECIFIC_ASMCOMP = $(INTEL_ASM)
# ARCH_SPECIFIC_ASMCOMP_CMI = $(INTEL_ASM_CMI)
# endif
# ASMCOMP = \
#   $(ARCH_SPECIFIC_ASMCOMP) \
#   asmcomp/arch.cmo \
#   ...
# ASMCOMP_CMI = $(ARCH_SPECIFIC_ASMCOMP_CMI)


################################################################
bootstrap_module(
    name   = "CSE",
    struct = select({
        ## FIXME: select on xtarget or target host
        # "//platform/target:x86_64": "//asmcomp/amd64:CSE.ml",
        # "//platform/xtarget:x86_64": "//asmcomp/amd64:CSE.ml",
        # "//config/arch:x86_64": "//asmcomp/amd64:CSE.ml",

        "@platforms//cpu:x86_64": "//asmcomp/amd64:CSE.ml",
        "//config/arch:arm"   : "//asmcomp/arm:CSE.ml",
        "//config/arch:arm64"   : "//asmcomp/arm64:CSE.ml",
        "//config/arch:i386"   : "//asmcomp/i386:CSE.ml",
        "//config/arch:ppc"   : "//asmcomp/power:CSE.ml",
        "//config/arch:riscv64"   : "//asmcomp/riscv:CSE.ml",
        "//config/arch:s390x"   : "//asmcomp/s390x:CSE.ml",
    }, no_match_error = "unknown arch"),
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        ":CSEgen",
        ":Mach",
    ],
    data = ["//runtime:primitives"],
)

bootstrap_module(
    name   = "CSEgen",
    struct = "CSEgen.ml",
    sig    = "CSEgen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        ":Mach",
        ":Proc",
        ":Reg",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "CSEgen_cmi",
    src  = "CSEgen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Afl_instrument",
    struct = "afl_instrument.ml",
    sig    = "Afl_instrument_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Lambda",
        # "//middle_end:Backend_var",
        #FIXME: bug in deps mgmt, import archive containing Backend_var
        "//middle_end:ocamlmiddleend",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Random",
        "//utils:Clflags",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Afl_instrument_cmi",
    src  = "afl_instrument.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//lambda:Debuginfo",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Arch",
    struct = select({
        "//config/arch:x86_64": "//asmcomp/amd64:arch.ml",
        "//config/arch:arm"   : "//asmcomp/arm:arch.ml",
        "//config/arch:arm64"   : "//asmcomp/arm64:arch.ml",
        "//config/arch:i386"   : "//asmcomp/i386:arch.ml",
        "//config/arch:ppc"   : "//asmcomp/power:arch.ml",
        "//config/arch:riscv64"   : "//asmcomp/riscv:arch.ml",
        "//config/arch:s390x"   : "//asmcomp/s390x:arch.ml",
    }, no_match_error = "unknown arch"),
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//utils:Clflags"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Asmgen",
    struct = "asmgen.ml",
    sig    = "Asmgen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Split",
        ":Spill",
        ":Reg",
        ":Printmach",
        ":Printlinear",
        ":Printcmm",
        ":Polling",
        ":Mach",
        ":Liveness",
        ":Linscan",
        ":Linearize",
        ":Linear",
        ":Interval",
        ":Interf",
        ":Emitaux",
        ":Deadcode",
        ":Comballoc",
        ":Coloring",
        ":Cmmgen",
        ":Cmm_invariants",
        ":Cmm_helpers",
        ":Cmm",
        "//lambda:Translmod",
        "//utils:Profile",
        "//typing:Primitive",
        "//utils:Misc",
        "//parsing:Location",
        "//file_formats:Linear_format",
        "//typing:Ident",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//utils:Config",
        ## (Compiler_pass)
        "//middle_end:Compilenv",
        "//utils:Clflags",
        "//middle_end:Clambda",
        "//middle_end:Backend_intf_cmi",

        # arch-dependent targets
        ":CSE", ":Emit", ":Reload", ":Scheduling", ":Selection"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//driver:__pkg__"]
)

bootstrap_signature(
    name = "Asmgen_cmi",
    src  = "asmgen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Emitaux",
        ":Cmm",
        "//stdlib:Stdlib.Format",
        "//middle_end:Clambda",
        "//middle_end:Backend_intf_cmi"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Asmlibrarian",
    struct = "asmlibrarian.ml",
    sig    = "Asmlibrarian_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Asmlink",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//middle_end/flambda:Export_info",
        "//utils:Config",
        "//middle_end:Compilenv",
        "//file_formats:Cmx_format_cmi",
        "//utils:Clflags",
        "//middle_end:Clambda",
        ## (Ccomp)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//driver:__pkg__"]
)

bootstrap_signature(
    name = "Asmlibrarian_cmi",
    src  = "asmlibrarian.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Asmlink",
    struct = "asmlink.ml",
    sig    = "Asmlink_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Emitaux",
        ":Emit",
        ":Cmm_helpers",
        ":Cmm",
        ":Asmgen",
        "//stdlib:Stdlib.Sys",
        "//lambda:Runtimedef",
        "//utils:Profile",
        "//stdlib:Stdlib.Printf",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Digest",
        ## (Consistbl)
        "//utils:Config",
        "//middle_end:Compilenv",
        "//file_formats:Cmx_format_cmi",
        "//utils:Clflags",
        "//middle_end:Clambda",
        ## (Ccomp)
        "//middle_end:Backend_intf_cmi",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Asmlink_cmi",
    src  = "asmlink.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//utils:Misc_cmi",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Digest",
        "//file_formats:Cmx_format_cmi"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Asmpackager",
    struct = "asmpackager.ml",
    sig    = "Asmpackager_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Asmlink",
        ":Asmgen",
        "//typing:Typemod",
        "//lambda:Translmod",
        "//stdlib:Stdlib.String",
        "//lambda:Simplif",
        "//utils:Profile",
        "//stdlib:Stdlib.Printf",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//middle_end/flambda:Flambda_middle_end",
        "//stdlib:Stdlib.Filename",
        "//middle_end/flambda:Export_info_for_pack",
        "//middle_end/flambda:Export_info",
        "//typing:Env",
        "//utils:Config",
        "//middle_end:Compilenv",
        "//middle_end:Compilation_unit",
        "//file_formats:Cmx_format_cmi",
        "//middle_end/closure:Closure_middle_end",
        "//utils:Clflags",
        "//middle_end:Clambda",
        ## (Ccomp)
        "//middle_end:Backend_intf_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__pkg__",
        "//driver:__pkg__"
    ]
)

bootstrap_signature(
    name = "Asmpackager_cmi",
    src  = "asmpackager.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//middle_end:Backend_intf_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Branch_relaxation",
    struct = "branch_relaxation.ml",
    sig    = "Branch_relaxation_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Linear",
        ":Cmm",
        ":Branch_relaxation_intf_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "Branch_relaxation_cmi",
    src  = "branch_relaxation.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linear",
        ":Branch_relaxation_intf_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Branch_relaxation_intf_cmi",
    src  = "branch_relaxation_intf.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linear",
        ":Cmm",
    ],
    # data = ["//runtime:primitives"]
)

# bootstrap_module(
#     name   = "Branch_relaxation_intf",
#     struct = "branch_relaxation_intf.ml",
#     opts = MODULE_OPTS,
#     deps   = STDLIB + [
#         ":Linear",
#         ":Cmm",
#         "//lambda:Debuginfo",
#         ## (Arch)
#     ],
#     data = ["//runtime:primitives"]
# )

bootstrap_module(
    name   = "Cmm",
    struct = "cmm.ml",
    sig    = "Cmm_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Lambda",
        ":Arch",
        "//utils:Targetint",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//lambda:Debuginfo",
        "//middle_end:Backend_var",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__subpackages__",
        "//file_formats:__pkg__"
    ]
)

bootstrap_signature(
    name = "Cmm_cmi",
    src  = "cmm.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//lambda:Lambda_cmi",
        "//utils:Targetint_cmi",
        "//lambda:Debuginfo",
        "//middle_end:Backend_var_cmi",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Cmm_helpers",
    struct = "cmm_helpers.ml",
    sig    = "Cmm_helpers_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Strmatch",
        ":Proc",
        ":Cmmgen_state",
        ":Cmm",
        ## (Targetint)
        ## (Switch)
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//typing:Primitive",
        "//stdlib:Stdlib.Obj",
        "//utils:Numbers",
        "//stdlib:Stdlib.Nativeint",
        "//utils:Misc",
        "//stdlib:Stdlib.Marshal",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int",
        "//lambda:Debuginfo",
        "//utils:Config",
        "//middle_end:Compilenv",
        "//file_formats:Cmxs_format_cmi",
        "//file_formats:Cmx_format_cmi",
        "//utils:Clflags",
        ## (Clambda_primitives)
        "//middle_end:Clambda",
        "//middle_end:Backend_var",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
        ## (Arch)
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Cmm_helpers_cmi",
    src  = "cmm_helpers.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmmgen_state",
        ":Cmm",
        ## (Targetint)
        "//typing:Primitive",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Digest",
        "//lambda:Debuginfo",
        "//file_formats:Cmx_format_cmi",
        ## (Clambda_primitives)
        "//middle_end:Clambda",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Cmm_invariants",
    struct = "cmm_invariants.ml",
    sig    = "Cmm_invariants_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//stdlib:Stdlib.Set",
        "//utils:Numbers",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Cmm_invariants_cmi",
    src  = "cmm_invariants.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Cmmgen",
    struct = "cmmgen.ml",
    sig    = "Cmmgen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Debuginfo",
        "//middle_end:Clambda",
        "//middle_end:Compilenv",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Option",
        "//typing:Primitive",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Misc",
        ":Afl_instrument",
        ":Cmm",
        ":Cmm_helpers",
        ":Cmmgen_state",
        ":Arch",
        "//middle_end:Backend_var",
        ## (Clambda_primitives)
        ## (Printclambda_primitives)
        ## (V)
        ## (VP)
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Cmmgen_cmi",
    src  = "cmmgen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//middle_end:Clambda",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Cmmgen_state",
    struct = "cmmgen_state.ml",
    sig    = "Cmmgen_state_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//stdlib:Stdlib.Queue",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//middle_end:Compilenv",
        "//middle_end:Clambda",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Cmmgen_state_cmi",
    src  = "cmmgen_state.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmm_cmi",
        "//utils:Misc",
        "//middle_end:Clambda_cmi"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Coloring",
    struct = "coloring.ml",
    sig    = "Coloring_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Coloring_cmi",
    src  = "coloring.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Comballoc",
    struct = "comballoc.ml",
    sig    = "Comballoc_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        "//stdlib:Stdlib.List",
        "//lambda:Debuginfo",
        "//utils:Config",
        "//stdlib:Stdlib.Array",
        ## (Arch)
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Comballoc_cmi",
    src  = "comballoc.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Dataflow",
    struct = "dataflow.ml",
    sig    = "Dataflow_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Dataflow_cmi",
    src  = "dataflow.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Deadcode",
    struct = "deadcode.ml",
    sig    = "Deadcode_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        ":Mach",
        ":Cmm",
        "//utils:Numbers",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Deadcode_cmi",
    src  = "deadcode.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

# asmcomp/emit.ml: asmcomp/$(ARCH)/emit.mlp $(cvt_emit)
# 	echo \# 1 \"$(ARCH)/emit.mlp\" > $@
# 	$(OCAMLRUN) $(cvt_emit) < $< >> $@ \
# 	|| { rm -f $@; exit 2; }

bootstrap_module(
    name   = "Emit",
    struct = select({
        "//config/arch:x86_64": "//asmcomp/amd64:emit.ml",
        "//config/arch:arm"   : "//asmcomp/arm:emit.ml",
        "//config/arch:arm64"   : "//asmcomp/arm64:emit.ml",
        "//config/arch:i386"   : "//asmcomp/i386:emit.ml",
        "//config/arch:ppc"   : "//asmcomp/power:emit.ml",
        "//config/arch:riscv64"   : "//asmcomp/riscv:emit.ml",
        "//config/arch:s390x"   : "//asmcomp/s390x:emit.ml",
    }, no_match_error = "unknown arch"),
    sig = "Emit_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Proc",
        ":Branch_relaxation",
        ":Emitaux",
        ":X86_dsl",
        ":X86_gas",
        ":X86_masm",
        "//middle_end:Compilenv",
        "//utils:Domainstate"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Emit_cmi",
    src  = "emit.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linear",
        ":Cmm",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_module(
    name   = "Emitaux",
    struct = "emitaux.ml",
    sig    = "Emitaux_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Debuginfo",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//utils:Clflags",
        "//utils:Config",
        ":Arch",
        ":Cmm",
        ":Emitenv_cmi",
        ## (Scoped_location)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "Emitaux_cmi",
    src  = "emitaux.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linear_cmi",
        ":Emitenv_cmi",
        ":Cmm_cmi",
        "//stdlib:Stdlib.Format",
        "//lambda:Debuginfo",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Emitenv_cmi",
    src  = "emitenv.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linear",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Interf",
    struct = "interf.ml",
    sig    = "Interf_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        ":Mach",
        ":Cmm",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Interf_cmi",
    src  = "interf.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Interval",
    struct = "interval.ml",
    sig    = "Interval_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        ":Mach",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Interval_cmi",
    src  = "interval.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Linear",
    struct = "linear.ml",
    sig    = "Linear_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Cmm",
        "//lambda:Debuginfo",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__subpackages__",
        "//file_formats:__subpackages__"
    ]
)

bootstrap_signature(
    name = "Linear_cmi",
    src  = "linear.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Cmm",
        "//lambda:Debuginfo",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//file_formats:__pkg__"]
)

bootstrap_module(
    name   = "Linearize",
    struct = "linearize.ml",
    sig    = "Linearize_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        ":Mach",
        ":Linear",
        ":Cmm",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//lambda:Debuginfo",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Linearize_cmi",
    src  = "linearize.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Linear",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Linscan",
    struct = "linscan.ml",
    sig    = "Linscan_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        ":Interval",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Linscan_cmi",
    src  = "linscan.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Interval"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Liveness",
    struct = "liveness.ml",
    sig    = "Liveness_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        ":Printmach",
        ":Mach",
        ":Dataflow",
        "//utils:Misc",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Liveness_cmi",
    src  = "liveness.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Mach",
    struct = "mach.ml",
    sig    = "Mach_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Mach_cmi",
    src  = "mach.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Reg_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Polling",
    struct = "polling.ml",
    sig    = "Polling_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Dataflow",
        ":Cmm",
        "//utils:Numbers",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Polling_cmi",
    src  = "polling.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
        "//utils:Misc",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Printcmm",
    struct = "printcmm.ml",
    sig    = "Printcmm_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        ## (Targetint)
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//lambda:Debuginfo",
        "//utils:Clflags",
        "//middle_end:Backend_var",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Printcmm_cmi",
    src  = "printcmm.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//stdlib:Stdlib.Format",
        "//lambda:Debuginfo",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Printlinear",
    struct = "printlinear.ml",
    sig    = "Printlinear_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Printmach",
        ":Mach",
        ":Linear",
        ":Cmm",
        "//stdlib:Stdlib.Format",
        "//lambda:Debuginfo",
        "//utils:Clflags",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Printlinear_cmi",
    src  = "printlinear.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linear",
        ":Cmm",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Printmach",
    struct = "printmach.ml",
    sig    = "Printmach_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Debuginfo",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Printf",
        "//utils:Clflags",
        ":Cmm",
        ":Interval",
        ":Mach",
        ":Printcmm",
        ":Proc",
        ":Reg",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Printmach_cmi",
    src  = "printmach.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Interval"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Proc",
    struct = select({
        ## supported archs: amd64, arm, arm64, i386, power, riscv, s390x
        ## NB: amd64 == x86_64
        "//config/arch:x86_64": "//asmcomp/amd64:proc.ml",
        "//config/arch:arm"   : "//asmcomp/arm:proc.ml",
        "//config/arch:arm64"   : "//asmcomp/arm64:proc.ml",
        "//config/arch:i386"   : "//asmcomp/i386:proc.ml",
        "//config/arch:ppc"   : "//asmcomp/power:proc.ml",
        "//config/arch:riscv64"   : "//asmcomp/riscv:proc.ml",
        "//config/arch:s390x"   : "//asmcomp/s390x:proc.ml",
    }, no_match_error = "unknown arch"),
    sig    = "Proc_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Arch",
        ":Cmm",
        ":Mach",
        ":Reg",
        ":X86_proc",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        # "//asmcomp:__subpackages__"
        "//driver:__pkg__"
    ]
)

bootstrap_signature(
    name = "Proc_cmi",
    src  = "proc.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Reg_cmi",
        ":Mach_cmi",
        ":Cmm_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_module(
    name   = "Reg",
    struct = "reg.ml",
    sig    = "Reg_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//middle_end:Backend_var",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "Reg_cmi",
    src  = "reg.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//middle_end:Backend_var",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Reload",
    struct = select({
        "//config/arch:x86_64": "//asmcomp/amd64:reload.ml",
        "//config/arch:arm"   : "//asmcomp/arm:reload.ml",
        "//config/arch:arm64"   : "//asmcomp/arm64:reload.ml",
        "//config/arch:i386"   : "//asmcomp/i386:reload.ml",
        "//config/arch:ppc"   : "//asmcomp/power:reload.ml",
        "//config/arch:riscv64"   : "//asmcomp/riscv:reload.ml",
        "//config/arch:s390x"   : "//asmcomp/s390x:reload.ml",
    }, no_match_error = "unknown arch"),
    sig    = "Reload_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reloadgen",
        # ":Reg",
        # ":Mach",
        # ":Cmm",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "Reload_cmi",
    src  = "reload.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Reloadgen",
    struct = "reloadgen.ml",
    sig    = "Reloadgen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Cmm",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "Reloadgen_cmi",
    src  = "reloadgen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)


bootstrap_module(
    name   = "Schedgen",
    struct = "schedgen.ml",
    sig    = "Schedgen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//utils:Clflags",
        ":Cmm",
        ":Linear",
        ":Mach",
        ":Proc",
        ":Reg",

        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Array",
        ## (Arch)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "Schedgen_cmi",
    src  = "schedgen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Linear",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Scheduling",
    struct = select({
        "//config/arch:x86_64": "//asmcomp/amd64:scheduling.ml",
        "//config/arch:arm"   : "//asmcomp/arm:scheduling.ml",
        "//config/arch:arm64"   : "//asmcomp/arm64:scheduling.ml",
        "//config/arch:i386"   : "//asmcomp/i386:scheduling.ml",
        "//config/arch:ppc"   : "//asmcomp/power:scheduling.ml",
        "//config/arch:riscv64"   : "//asmcomp/riscv:scheduling.ml",
        "//config/arch:s390x"   : "//asmcomp/s390x:scheduling.ml",
    }, no_match_error = "unknown arch"),
    sig = "Scheduling_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//asmcomp:Schedgen",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_signature(
    name = "Scheduling_cmi",
    src  = "scheduling.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linear",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Selection",
    struct = select({
        "//config/arch:x86_64": "//asmcomp/amd64:selection.ml",
        "//config/arch:arm"   : "//asmcomp/arm:selection.ml",
        "//config/arch:arm64"   : "//asmcomp/arm64:selection.ml",
        "//config/arch:i386"   : "//asmcomp/i386:selection.ml",
        "//config/arch:ppc"   : "//asmcomp/power:selection.ml",
        "//config/arch:riscv64"   : "//asmcomp/riscv:selection.ml",
        "//config/arch:s390x"   : "//asmcomp/s390x:selection.ml",
    }, no_match_error = "unknown arch"),
    sig = "Selection_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        ":Mach",
        ":Selectgen",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_module(
    name   = "Selectgen",
    struct = "selectgen.ml",
    sig    = "Selectgen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Int",
        ":Cmm",
        ":Mach",
        ":Proc",
        ":Polling",
        ":Reg",
        "//utils:Numbers",
        "//stdlib:Stdlib.Nativeint",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int64",
        "//lambda:Debuginfo",
        "//middle_end:Backend_var",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
        ## (Arch)
    # ] + select({
    #     "//config/arch:x86_64": [
    #         "//asmcomp/amd64:Proc",
    #     ]
    # }, no_match_error = "unknown arch"),
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "Selectgen_cmi",
    src  = "selectgen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Cmm",
        "//utils:Misc",
        "//lambda:Debuginfo",
        "//middle_end:Backend_var",
        "//parsing:Asttypes_cmi",
        ## (Arch)
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Selection_cmi",
    src  = "selection.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
        "//utils:Misc",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Spill",
    struct = "spill.ml",
    sig    = "Spill_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Proc",
        ":Mach",
        ":Cmm",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Hashtbl",
        "//utils:Clflags",
        "//stdlib:Stdlib.Array",
    # ] + select({
    #     "//config/arch:x86_64": ["//asmcomp/amd64:Proc"],
    # }, no_match_error = "unsupported arch"),
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Spill_cmi",
    src  = "spill.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach_cmi",
        ":Cmm_cmi",
        ":Proc_cmi"
   ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Split",
    struct = "split.ml",
    sig    = "Split_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Reg",
        ":Mach",
        ":Cmm",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Split_cmi",
    src  = "split.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Mach",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Strmatch",
    struct = "strmatch.ml",
    sig    = "Strmatch_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Debuginfo",
        "//middle_end:Backend_var",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        ":Arch",
        ":Cmm",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "Strmatch_cmi",
    src  = "strmatch.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cmm",
        "//lambda:Debuginfo",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_signature(
    name = "X86_ast_cmi",
    src  = "x86_ast.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "X86_dsl",
    struct = "x86_dsl.ml",
    sig    = "X86_dsl_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":X86_proc",
        ":X86_ast_cmi",
        "//stdlib:Stdlib.Int64",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "X86_dsl_cmi",
    src  = "x86_dsl.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":X86_ast_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "X86_gas",
    struct = "x86_gas.ml",
    sig    = "X86_gas_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":X86_proc",
        ":X86_ast_cmi",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "X86_gas_cmi",
    src  = "x86_gas.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":X86_ast_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "X86_masm",
    struct = "x86_masm.ml",
    sig    = "X86_masm_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":X86_proc",
        ":X86_ast_cmi",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "X86_masm_cmi",
    src  = "x86_masm.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":X86_ast_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "X86_proc",
    struct = "x86_proc.ml",
    sig    = "X86_proc_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":X86_ast_cmi",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Filename",
        "//utils:Config",
        "//utils:Clflags",
        "//stdlib:Stdlib.Char",
        "//utils:Ccomp",
        "//stdlib:Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__subpackages__"]
)

bootstrap_signature(
    name = "X86_proc_cmi",
    src  = "x86_proc.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":X86_ast_cmi",
        "//stdlib:Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"]
)

