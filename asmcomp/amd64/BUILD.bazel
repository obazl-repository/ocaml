load("//bzl:rules.bzl",
     "bootstrap_library",
     "bootstrap_module",
)

load("//config:BUILD.bzl", "ROOT_MODULE_OPTS", "ROOT_SIG_OPTS")

exports_files(["proc.ml"])

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS = ROOT_SIG_OPTS

STDLIB = ["//stdlib"]

bootstrap_library(
    name = "amd64",
    manifest  = [
        ":CSE",
        ":Arch",
        ":Proc",
        ":Reload",
        ":Scheduling",
        ":Selection",
    ],
)

# ./boot/ocamlrun ./boot/ocamlc -g -nostdlib -I boot -use-prims runtime/primitives -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48-66-70 -warn-error +a -bin-annot -safe-string -strict-formats -I utils -I parsing -I typing -I bytecomp -I file_formats -I lambda -I middle_end -I middle_end/closure -I middle_end/flambda -I middle_end/flambda/base_types -I asmcomp -I driver -I toplevel -c asmcomp/arch.ml -I asmcomp

bootstrap_module(
    name   = "CSE",
    struct = "CSE.ml",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Arch", ## (Asmcomp Amd64 Arch)
        "//asmcomp:Mach", ## (Asmcomp Mach)
        "//asmcomp:Cmm", ## (Asmcomp Cmm)
        "//asmcomp:CSEgen", ## (Asmcomp CSEgen)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_module(
    name   = "Arch",
    struct = "arch.ml",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ## (Printf)
        ## (Format)
        ## (Config)
        "//utils:Clflags"
        ## (Array)
        ## (Arg)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

# # root Makefile:
# asmcomp/emit.ml: asmcomp/$(ARCH)/emit.mlp $(cvt_emit)
# 	echo \# 1 \"$(ARCH)/emit.mlp\" > $@
# 	$(OCAMLRUN) $(cvt_emit) < $< >> $@ \
# 	|| { rm -f $@; exit 2; }
genrule(
    name = "emit_ml",
    srcs = ["emit.mlp", "//tools:cvt_emit.exe"],
    outs = ["emit.ml"],
    tools = ["//runtime:ocamlrun"], ## fixme: find a way to use the toolchain
    cmd  = "\n".join([
	    "echo '# 1 \"{ARCH}/emit.mlp\"' > $@;".format(ARCH = "FIXME"),
        "$(execpath //runtime:ocamlrun) $(location //tools:cvt_emit.exe) < $(location :emit.mlp) >> $@"
    ]),
)

bootstrap_module(
    name   = "Emit",
    struct = "emit.ml",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//asmcomp:Branch_relaxation",
        "//asmcomp:Cmm",
        "//asmcomp:Emitaux",
        "//asmcomp:Linear",
        "//asmcomp:X86_dsl",
        "//asmcomp:X86_gas",
        "//asmcomp:X86_masm",
        "//middle_end:Compilenv",
        "//utils:Domainstate",
        ":Proc"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)


bootstrap_module(
    name   = "Proc",
    struct = "proc.ml",
    sig  = "//asmcomp:Proc_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Arch", ## (Asmcomp Amd64 Arch)
        "//asmcomp:X86_proc", ## (Asmcomp X86_proc)
        "//asmcomp:Reg", ## (Asmcomp Reg)
        "//asmcomp:Mach", ## (Asmcomp Mach)
        "//asmcomp:Cmm", ## (Asmcomp Cmm)
        "//utils:Misc"
        ## (List)
        ## (Config)
        ## (Array)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_module(
    name   = "Reload",
    struct = "reload.ml",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Arch", ## (Asmcomp Amd64 Arch)
        "//asmcomp:Reloadgen", ## (Asmcomp Reloadgen)
        "//asmcomp:Reg", ## (Asmcomp Reg)
        "//asmcomp:Mach", ## (Asmcomp Mach)
        "//asmcomp:Cmm", ## (Asmcomp Cmm)
        ## (Clflags)
        ## (Array)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_module(
    name   = "Scheduling",
    struct = "scheduling.ml",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//asmcomp:Schedgen",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_module(
    name   = "Selection",
    struct = "selection.ml",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        # ":Amd64", ## (Asmcomp Amd64 Proc)
        # ":Amd64", ## (Asmcomp Amd64 Arch)
        "//asmcomp:Selectgen", ## (Asmcomp Selectgen)
        "//asmcomp:Mach", ## (Asmcomp Mach)
        "//asmcomp:Cmm", ## (Asmcomp Cmm)
        ## (Nativeint)
        ## (List)
        ## (Clflags)
        ## (Array)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

