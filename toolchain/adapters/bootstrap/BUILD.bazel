exports_files(["BUILD.bazel"])

load(":BUILD.bzl", "bootstrap_toolchain_adapter")

## The bootstrap compiler and lexer are precompiled vm>vm tools that
## come with the distribution. Everything else in //boot/bin and
## //boot/lib is compiled using those tools. Plus ocamlyacc which is
## implemented in C.

## Boot toolchain can only produce VM executables (vm>vm, vm>sys,
## vm>arm64, etc.).

# To produce vm>sys pass --//platforms/xtarget:sys vm>sys is a cross
# compiler, we produce it using a vm>vm compiler. so
# --platforms=//platforms/target:vm selects the *>vm toolchain; we
# then need another arg (cross-compile target or xtarget) to tell the
# selected toolchain what kind of output to emit.

# this tc is for endo-compilation, vm.vm > vm.vm
bootstrap_toolchain_adapter(
    name        = "bootstrap",
    build_host  = "vm",
    target_host = "vm",
    compiler    = "//boot:ocamlc.byte",
    copts       = [ ## compile opts (sigs/modules only)
        "-strict-sequence",
        # "-warn-error", "+A",
        "-nostdlib",
    ] + select({
        "//config:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config:principal?" : ["-principal"],
        "//conditions:default": []
    }) + select({
        "//config:absname?" : ["-absname"],
        "//conditions:default": []
    }),
    linkopts    = [],
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
    camlheaders = [
        # "//stdlib:camlheaders"
        "//stdlib:camlheader", "//stdlib:target_camlheader",
        "//stdlib:camlheaderd", "//stdlib:target_camlheaderd",
        "//stdlib:camlheaderi", "//stdlib:target_camlheaderi"
    ],
    lexer       = "//boot:ocamllex.byte",
    yacc        = "//boot:ocamlyacc.exe",
    tool_runner = "//boot:ocamlrun.exe",  # alias to //runtime:ocamlrun
    # std_exit = "//stdlib:Std_exit"
)

# this tc used to cross-compile from vm.vm to vm.sys
## no, use same tc with config_setting --//platforms/xtarget=vm, sys
# bootstrap_toolchain_adapter(
#     name        = "cross",
#     build_host  = "vm",
#     target_host = "vm",
#     xtarget_host = "sys",
#     compiler    = "//boot:ocamlc.byte",
#     copts       = [
#         # "-strict-sequence", "-absname",
#         # "-w", "+a-4-9-41-42-44-45-48",
#         # "-warn-error", "+A",
#         # "-bin-annot",
#         # "-nostdlib",
#         # "-principal",
#     ],
#     # primitives  = "//runtime:primitives",
#     lexer       = "//boot:ocamllex.byte",
#     yacc        = "//boot:ocamlyacc.exe",
#     tool_runner = "//boot:ocamlrun.exe",
#     # std_exit = "//stdlib:Std_exit"
# )

################################################################
# to produce compiler as a dev tool, build_host == target_host,
# and the toolchain uses the boot compiler
bootstrap_toolchain_adapter(
    name        = "dev_tool",
    build_host  = "dev",
    target_host = "dev",
    compiler    = "//dev/bin:ocamlc",
    copts       = [
        "-strict-sequence", "-absname",
        "-w", "+a-4-9-41-42-44-45-48",
        "-warn-error", "+A",
        "-bin-annot", "-nostdlib", "-principal",
    ],
    ## no primitives
    # lexer       = "//boot/bin:ocamllex",  # => //dev/bin:ocamllex.byte
    # yacc        = "//boot/bin:ocamlyacc", # => //dev/bin:ocamlyacc.byte
    # stdlib      = "//boot/lib:stdlib",    # => //dev/lib:stdlib.cma
    tool_runner = "//boot/bin:ocamlrun",
)


bootstrap_toolchain_adapter(
    name        = "dev",
    build_host  = "dev",
    target_host = "dev",
    compiler    = "//dev/bin:ocamlc",
    # compiler    = "//boot/bin:ocamlc",    # => //dev/bin:ocamlc.byte, //dev/bin:ocamlopt.byte
    copts       = [
        "-strict-sequence", "-absname",
        "-w", "+a-4-9-41-42-44-45-48",
        "-warn-error", "+A",
        "-bin-annot", "-nostdlib", "-principal",
    ],
    ## no primitives
    # lexer       = "//boot/bin:ocamllex",  # => //dev/bin:ocamllex.byte
    # yacc        = "//boot/bin:ocamlyacc", # => //dev/bin:ocamlyacc.byte
    # stdlib      = "//boot/lib:stdlib",    # => //dev/lib:stdlib.cma
    tool_runner = "//boot/bin:ocamlrun",
)

bootstrap_toolchain_adapter(
    name        = "vmvm",
    build_host  = "vm",
    target_host = "vm",
    compiler    = "//bin:ocamlc.byte",
    lexer       = "//bin:ocamllex",
    yacc        = "//bin:ocamlyacc",
    stdlib      = "//lib:stdlib",
    tool_runner = "//boot/bin:ocamlrun",
)

bootstrap_toolchain_adapter(
    name        = "vmsys",
    build_host  = "vm",
    target_host = "sys",
    compiler    = "//bin:ocamlopt.byte",
    lexer       = "//bin:ocamllex",
    yacc        = "//bin:ocamlyacc",
    stdlib      = "//lib:stdlib",
    tool_runner = "//boot/bin:ocamlrun",
)

bootstrap_toolchain_adapter(
    name        = "syssys",
    build_host  = "sys",
    target_host = "sys",
    compiler    = "//bin:ocamlopt.byte",
    lexer       = "//bin:ocamllex",
    yacc        = "//bin:ocamlyacc",
    stdlib      = "//lib:stdlib",
    tool_runner = "//boot/bin:ocamlrun",
)
