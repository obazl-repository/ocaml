exports_files(["BUILD.bazel"])

load(":BUILD.bzl", "bootstrap_toolchain_adapter")

## The bootstrap compiler and lexer are precompiled vm>vm tools that
## come with the distribution. Everything else in //boot/bin and
## //boot/lib is compiled using those tools. Plus ocamlyacc which is
## implemented in C.
bootstrap_toolchain_adapter(
    name        = "bootstrap",
    build_host  = "boot",
    target_host = "boot",
    compiler    = "//boot/bin:ocamlc", # alias to //boot:ocamlc
    # ocamlopt?
    copts       = [
        "-strict-sequence", "-absname",
        "-w", "+a-4-9-41-42-44-45-48",
        "-warn-error", "+A",
        "-bin-annot", "-nostdlib", "-principal",
    ],
    primitives  = "//runtime:primitives",
    lexer       = "//boot/bin:ocamllex",  # alias to //boot:ocamllex
    yacc        = "//yacc:ocamlyacc",
    #yacc        = "//boot/bin:ocamlyacc", # alias to //yacc:ocamlyacc",
    tool_runner = "//boot/bin:ocamlrun",  # alias to //runtime:ocamlrun
    # std_exit = "//stdlib:Std_exit"
    ##  => //boot/lib:stdlib
)

# to produce compiler as a dev tool, build_host == target_host,
# and the toolchain uses the boot compiler
bootstrap_toolchain_adapter(
    name        = "dev_tool",
    build_host  = "dev",
    target_host = "dev",
    compiler    = "//dev/bin:ocamlc",
    copts       = [
        "-strict-sequence", "-absname",
        "-w", "+a-4-9-41-42-44-45-48",
        "-warn-error", "+A",
        "-bin-annot", "-nostdlib", "-principal",
    ],
    ## no primitives
    # lexer       = "//boot/bin:ocamllex",  # => //dev/bin:ocamllex.byte
    # yacc        = "//boot/bin:ocamlyacc", # => //dev/bin:ocamlyacc.byte
    # stdlib      = "//boot/lib:stdlib",    # => //dev/lib:stdlib.cma
    tool_runner = "//boot/bin:ocamlrun",
)


bootstrap_toolchain_adapter(
    name        = "dev",
    build_host  = "dev",
    target_host = "dev",
    compiler    = "//dev/bin:ocamlc",
    # compiler    = "//boot/bin:ocamlc",    # => //dev/bin:ocamlc.byte, //dev/bin:ocamlopt.byte
    copts       = [
        "-strict-sequence", "-absname",
        "-w", "+a-4-9-41-42-44-45-48",
        "-warn-error", "+A",
        "-bin-annot", "-nostdlib", "-principal",
    ],
    ## no primitives
    # lexer       = "//boot/bin:ocamllex",  # => //dev/bin:ocamllex.byte
    # yacc        = "//boot/bin:ocamlyacc", # => //dev/bin:ocamlyacc.byte
    # stdlib      = "//boot/lib:stdlib",    # => //dev/lib:stdlib.cma
    tool_runner = "//boot/bin:ocamlrun",
)

bootstrap_toolchain_adapter(
    name        = "vmvm",
    build_host  = "vm",
    target_host = "vm",
    compiler    = "//bin:ocamlc.byte",
    lexer       = "//bin:ocamllex",
    yacc        = "//bin:ocamlyacc",
    stdlib      = "//lib:stdlib",
    tool_runner = "//boot/bin:ocamlrun",
)

bootstrap_toolchain_adapter(
    name        = "vmsys",
    build_host  = "vm",
    target_host = "sys",
    compiler    = "//bin:ocamlopt.byte",
    lexer       = "//bin:ocamllex",
    yacc        = "//bin:ocamlyacc",
    stdlib      = "//lib:stdlib",
    tool_runner = "//boot/bin:ocamlrun",
)

bootstrap_toolchain_adapter(
    name        = "syssys",
    build_host  = "sys",
    target_host = "sys",
    compiler    = "//bin:ocamlopt.byte",
    lexer       = "//bin:ocamllex",
    yacc        = "//bin:ocamlyacc",
    stdlib      = "//lib:stdlib",
    tool_runner = "//boot/bin:ocamlrun",
)
