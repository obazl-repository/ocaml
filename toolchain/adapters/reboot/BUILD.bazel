exports_files(["BUILD.bazel"])

load("//toolchain/adapters/baseline:BUILD.bzl", "baseline_toolchain_adapter")
load("//toolchain/adapters/boot:BUILD.bzl", "boot_toolchain_adapter")


## cross-compile testing - just to check tc selection
# baseline_toolchain_adapter(
boot_toolchain_adapter(
    name        = "sys_vm_vm",
    build_host  = "vm",
    target_host = "sys_vm_vm",
    compiler    = "//boot/compiler",
    copts       = [],
    primitives  = "//runtime:primitives",
    lexer       = "//boot/bin:ocamllex",  # alias to //boot:ocamllex
    yacc        = "//yacc:ocamlyacc",
)

######## toolchain adapters ########

## We need several to avoid circularity. Actually we need several
## toolchain types.

## Bootstrap toolchain: a singleton toolchain, whose toolset is
## exogenous: either C code (ocamlrun, ocamlyacc) or precompiled OCaml
## code (ocamlc, ocamllex.

## Baseline toolchains (for lack of a better term) include OCaml tools
## and libs built using the bootstrap toolchain.


## stages:  bootstrap > dev > prod (vm>vm, vm>sys, [sys>vm, sys>sys])

## (or:  bootstrap > kneecap > headcase, or bootstap > shoulderstrap )

## The bootstrap compiler and lexer are precompiled vm>vm tools that
## come with the distribution. Everything else in //boot/bin and
## //boot/lib is compiled using those tools. Plus ocamlyacc which is
## implemented in C.
baseline_toolchain_adapter(
    name        = "baseline",
    build_host  = "vm",
    target_host = "vm",
    compiler    = "//boot/compiler",
    # ocamlopt?
    copts       = [
        "-strict-sequence", "-absname",
        "-w", "+a-4-9-41-42-44-45-48",
        "-warn-error", "+A",
        "-bin-annot", "-nostdlib", "-principal",
    ],
    primitives  = "//runtime:primitives",
    lexer       = "//boot/bin:ocamllex",  # alias to //boot:ocamllex
    yacc        = "//yacc:ocamlyacc",
    #yacc        = "//boot/bin:ocamlyacc", # alias to //yacc:ocamlyacc",
    tool_runner = "//boot/bin:ocamlrun",  # alias to //runtime:ocamlrun
    # std_exit = "//stdlib:Std_exit"
    ##  => //boot/lib:stdlib
)

# # to produce compiler as a dev tool, build_host == target_host,
# # and the toolchain uses the boot compiler
# baseline_toolchain_adapter(
#     name        = "dev_tool",
#     build_host  = "dev",
#     target_host = "dev",
#     compiler    = "//dev/bin:ocamlc",
#     copts       = [
#         "-strict-sequence", "-absname",
#         "-w", "+a-4-9-41-42-44-45-48",
#         "-warn-error", "+A",
#         "-bin-annot", "-nostdlib", "-principal",
#     ],
#     ## no primitives
#     # lexer       = "//boot/bin:ocamllex",  # => //dev/bin:ocamllex.byte
#     # yacc        = "//boot/bin:ocamlyacc", # => //dev/bin:ocamlyacc.byte
#     # stdlib      = "//boot/lib:stdlib",    # => //dev/lib:stdlib.cma
#     tool_runner = "//boot/bin:ocamlrun",
# )


# baseline_toolchain_adapter(
#     name        = "dev",
#     build_host  = "dev",
#     target_host = "dev",
#     compiler    = "//dev/bin:ocamlc",
#     # compiler    = "//boot/bin:ocamlc",    # => //dev/bin:ocamlc.byte, //dev/bin:ocamlopt.byte
#     copts       = [
#         "-strict-sequence", "-absname",
#         "-w", "+a-4-9-41-42-44-45-48",
#         "-warn-error", "+A",
#         "-bin-annot", "-nostdlib", "-principal",
#     ],
#     ## no primitives
#     # lexer       = "//boot/bin:ocamllex",  # => //dev/bin:ocamllex.byte
#     # yacc        = "//boot/bin:ocamlyacc", # => //dev/bin:ocamlyacc.byte
#     # stdlib      = "//boot/lib:stdlib",    # => //dev/lib:stdlib.cma
#     tool_runner = "//boot/bin:ocamlrun",
# )

# baseline_toolchain_adapter(
#     name        = "vmvm",
#     build_host  = "vm",
#     target_host = "vm",
#     compiler    = "//bin:ocamlc.byte",
#     lexer       = "//bin:ocamllex",
#     yacc        = "//bin:ocamlyacc",
#     stdlib      = "//lib:stdlib",
#     tool_runner = "//boot/bin:ocamlrun",
# )

# baseline_toolchain_adapter(
#     name        = "vmsys",
#     build_host  = "vm",
#     target_host = "sys",
#     compiler    = "//bin:ocamlopt.byte",
#     lexer       = "//bin:ocamllex",
#     yacc        = "//bin:ocamlyacc",
#     stdlib      = "//lib:stdlib",
#     tool_runner = "//boot/bin:ocamlrun",
# )

# baseline_toolchain_adapter(
#     name        = "syssys",
#     build_host  = "sys",
#     target_host = "sys",
#     compiler    = "//bin:ocamlopt.byte",
#     lexer       = "//bin:ocamllex",
#     yacc        = "//bin:ocamlyacc",
#     stdlib      = "//lib:stdlib",
#     tool_runner = "//boot/bin:ocamlrun",
# )
