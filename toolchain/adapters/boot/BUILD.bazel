exports_files(["BUILD.bazel"])

load(":BUILD.bzl", "boot_toolchain_adapter")

## The bootstrap compiler and lexer are precompiled vm>vm tools that
## come with the distribution. Everything else in //boot/baseline and
## //boot/lib is compiled using those tools. Plus ocamlyacc which is
## implemented in C.

## Boot toolchain can only produce VM executables (vm>vm, vm>sys,
## vm>arm64, etc.).

# To produce vm>sys pass --//platform/xtarget:sys vm>sys is a cross
# compiler, we produce it using a vm>vm compiler. so
# --platforms=//platform/target:vm selects the *>vm toolchain; we
# then need another arg (cross-compile target or xtarget) to tell the
# selected toolchain what kind of output to emit.

# only one selector for this tc: //toolchain/selectors:bootstrap
# with build_host_constraints  = ["//platform/build:boot?"],
boot_toolchain_adapter(
    name        = "Xboot",
    build_host  = "boot",
    target_host = select({
        "//conditions:default": "vm"
    }),
    compiler    = "//boot/baseline:ocamlc.boot",
    lexer       = "//boot/baseline:ocamllex.boot",
    yacc        = "//yacc:ocamlyacc",
    ##FIXME: ocamlrun not needed, it's embedded in the .boot tools
    # tool_runner = "//boot:ocamlrun.boot",  # alias to //runtime:ocamlrun
    copts       = [ ## compile opts (sigs/modules only)
        "-strict-sequence",
        # "-warn-error", "+A",
        "-nostdlib",
    ] + select({
        "//config:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config:principal?" : ["-principal"],
        "//conditions:default": []
    }) + select({
        "//config:absname?" : ["-absname"],
        "//conditions:default": []
    }),
    linkopts    = [],
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
    camlheaders = [
        # "//stdlib:camlheaders"
        "//stdlib:camlheader", "//stdlib:target_camlheader",
        "//stdlib:camlheaderd", "//stdlib:target_camlheaderd",
        "//stdlib:camlheaderi", "//stdlib:target_camlheaderi"
    ],
    # std_exit = "//stdlib:Std_exit"
)

boot_toolchain_adapter(
    name        = "default",
    build_host  = "boot",
    target_host = select({
        "//conditions:default": "vm"
    }),
    compiler    = "//boot/baseline:ocamlc.boot",
    lexer       = "//boot:ocamllex.boot",
    yacc        = "//yacc:ocamlyacc",
    ##FIXME: ocamlrun not needed, it's embedded in the .boot tools
    # tool_runner = "//boot:ocamlrun.boot",  # alias to //runtime:ocamlrun
    copts       = [ ## compile opts (sigs/modules only)
        "-strict-sequence",
        # "-warn-error", "+A",
        "-nostdlib",
    ] + select({
        "//config:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config:principal?" : ["-principal"],
        "//conditions:default": []
    }) + select({
        "//config:absname?" : ["-absname"],
        "//conditions:default": []
    }),
    linkopts    = [],
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
    camlheaders = [
        # "//stdlib:camlheaders"
        "//stdlib:camlheader", "//stdlib:target_camlheader",
        "//stdlib:camlheaderd", "//stdlib:target_camlheaderd",
        "//stdlib:camlheaderi", "//stdlib:target_camlheaderi"
    ],
    # std_exit = "//stdlib:Std_exit"
)

#######################
boot_toolchain_adapter(
    name        = "vmsys",
    build_host  = "vmsys",
    target_host = "sys",
    compiler    = "//boot/baseline:ocamlc.boot",
    lexer       = "//boot/baseline:ocamllex.boot",
    yacc        = "//yacc:ocamlyacc",
    ##FIXME: ocamlrun not needed, it's embedded in the .boot tools
    # tool_runner = "//boot:ocamlrun.boot",  # alias to //runtime:ocamlrun
    copts       = [ ## compile opts (sigs/modules only)
        "-strict-sequence",
        # "-warn-error", "+A",
        "-nostdlib",
    ] + select({
        "//config:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config:principal?" : ["-principal"],
        "//conditions:default": []
    }) + select({
        "//config:absname?" : ["-absname"],
        "//conditions:default": []
    }),
    linkopts    = [],
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
    camlheaders = [
        # "//stdlib:camlheaders"
        "//stdlib:camlheader", "//stdlib:target_camlheader",
        "//stdlib:camlheaderd", "//stdlib:target_camlheaderd",
        "//stdlib:camlheaderi", "//stdlib:target_camlheaderi"
    ],
    # std_exit = "//stdlib:Std_exit"
)
