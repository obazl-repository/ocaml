exports_files(["BUILD.bazel"])

load("//toolchain/adapter:boot_tc_adapter.bzl", "boot_toolchain_adapter")
load("//toolchain/adapter:dev_tc_adapter.bzl", "dev_toolchain_adapter")
load("//toolchain/adapter:ocaml_tc_adapter.bzl", "ocaml_tc_adapter")
load("//toolchain/adapter:mustache_tc_adapter.bzl", "mustache_toolchain_adapter")

## NB: these are all the same, but for debugging they need different
## names. Use aliases?

## compile options (.ml/mli) passed in most cases:
# -absname
# -bin-annot
# -g
# -nostdlib - everywhere, always?
# -principal  (.ml only, stage 2, not bootstrap?)
# -strict-sequence
# -strict-formats (ocamlopt.opt, stdlib.ml[i]
# -w +a-4-9-41-42-44-45-48
# -warn-error +A
# -use-prims (bootstrap stage only?)
# -nopervasives: added for stdlib/camlinternalFormatBasics.ml[i], stdlib/stdlib.ml[i]

## archive options
# -nostdlib (all except stdlib.cma, cmxa)
# -use-prims (stdlib.cma, ocamlcommon.cma, ocamlbytecomp.cma, ocamlmiddleend.cma, ocamltoplevel.cma, ocamloptcomp.cma)
# -linkall (ocamlcommon.cma, cmxa only)

# dynlink.cma, cmxa: -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +A -bin-annot -strict-formats

## link options
# -nostdlib
# -g
# -compat-32 (ocamlc.byte only)
# -use-prims (ocamlc.byte, ocamlopt.byte only)
# -cclib "-lm  -lpthread" (ocamlc.opt only)

STD_COPTS = [
    "-nocwd",
    "-nostdlib",
    "-nopervasives",
    "-strict-sequence",
]

STD_LOPTS = [
    # "-nocwd",
    "-nostdlib",
    "-nopervasives",
    # "-strict-sequence",
]

######################
dev_toolchain_adapter(
    name        = "dev",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        ## FIXME: only for native (sys) targets
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    linkopts    = STD_LOPTS,
    sigopts     = [],
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

##################
ocaml_tc_adapter(
    name        = "default",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

ocaml_tc_adapter(
    name        = "boot",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

ocaml_tc_adapter(
    name        = "ocamlc.byte",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

# alias(name = "boot.ocamlopt.byte", actual = ":ocamlopt.byte")
ocaml_tc_adapter(
    name        = "boot.ocamlopt.byte",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

ocaml_tc_adapter(
    name        = "ocamlopt.byte",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

ocaml_tc_adapter(
    name        = "ocamlopt.opt",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

ocaml_tc_adapter(
    name        = "ocamlc.opt",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,
    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)

################################################################
mustache_toolchain_adapter(name = "mustache")

boot_toolchain_adapter(
    name        = "preproc",
    copts       = STD_COPTS + select({
        "//config/ocaml/compile:bin-annot?" : ["-bin-annot"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml/compile:absname?" : ["-absname"],
        "//conditions:default": []
    }) + select({
        "//config/ocaml:xmo?" : [],
        "//conditions:default": ["-opaque"]
    }),
    structopts  = select({
        ## FIXME: -principal should not be used for boot stage
        "//config/ocaml/compile:principal?" : ["-principal"],
        "//conditions:default": []
    }),
    linkopts    = STD_LOPTS,

    # warnings  - use defaults
    # primitives  = "//runtime:primitives",
)
