load("//bzl:rules.bzl",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:BUILD.bzl",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS"
     )

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS    = ROOT_MODULE_OPTS

STDLIB = ["//stdlib"]

bootstrap_library(
    name = "base_types",
    manifest  = [
        ":Closure_element",
        ":Closure_id",
        ":Closure_origin",
        ":Export_id",
        ":Id_types",
        ":Mutable_variable",
        ":Set_of_closures_id",
        ":Set_of_closures_origin",
        ":Static_exception",
        ":Tag",
        ":Var_within_closure",
    ],
)

bootstrap_module(
    name   = "Closure_element",
    struct = "closure_element.ml",
    sig    = "Closure_element_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable", ## (Middle_end Variable)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Closure_element_cmi",
    src  = "closure_element.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Compilation_unit_cmi", ## (Middle_end Compilation_unit)
        ## (Set)
        ## (Map)
        ## (Identifiable)
    ]
)

bootstrap_module(
    name   = "Closure_id",
    struct = "closure_id.ml",
    sig    = "Closure_id_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Flambda", ## (Middle_end Flambda Base_types Closure_element)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Closure_id_cmi",
    src  = "closure_id.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        # "//middle_end/flambda:Flambda_cmi", ## (Middle_end Flambda Base_types Closure_element)
        "Closure_element_cmi"
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Closure_origin",
    struct = "closure_origin.ml",
    sig    = "Closure_origin_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        # "//middle_end/flambda:Flambda", ## (Middle_end Flambda Base_types Closure_id)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Closure_origin_cmi",
    src  = "closure_origin.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Closure_id_cmi",
        "//middle_end:Compilation_unit_cmi", ## (Middle_end Compilation_unit)
        ## (Identifiable)
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Export_id",
    struct = "export_id.ml",
    sig    = "Export_id_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Id_types",
        "//middle_end:Compilation_unit",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Identifiable"
    ]
)

bootstrap_signature(
    name = "Export_id_cmi",
    src  = "export_id.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Compilation_unit_cmi", ## (Middle_end Compilation_unit)
        ## (Identifiable)
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Id_types",
    struct = "id_types.ml",
    sig    = "Id_types_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ## (Printf)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int)
        ## (Identifiable)
        ## (Hashtbl)
        ## (Format)
    ]
)

bootstrap_signature(
    name = "Id_types_cmi",
    src  = "id_types.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//utils:Identifiable_cmi"
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Mutable_variable",
    struct = "mutable_variable.ml",
    sig    = "Mutable_variable_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable", ## (Middle_end Variable)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Mutable_variable_cmi",
    src  = "mutable_variable.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable_cmi", ## (Middle_end Variable)
        "//middle_end:Internal_variable_names_cmi", ## (Middle_end Internal_variable_names)
        "//middle_end:Compilation_unit_cmi", ## (Middle_end Compilation_unit)
        ## (Identifiable)
        ## (Ident)
        ## (Format)
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Set_of_closures_id",
    struct = "set_of_closures_id.ml",
    sig    = "Set_of_closures_id_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Id_types",
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
    ]
)

bootstrap_signature(
    name = "Set_of_closures_id_cmi",
    src  = "set_of_closures_id.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Compilation_unit_cmi", ## (Middle_end Compilation_unit)
        ## (Identifiable)
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Set_of_closures_origin",
    struct = "set_of_closures_origin.ml",
    sig    = "Set_of_closures_origin_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Flambda", ## (Middle_end Flambda Base_types Set_of_closures_id)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Set_of_closures_origin_cmi",
    src  = "set_of_closures_origin.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Set_of_closures_id_cmi",
        "//middle_end:Compilation_unit_cmi",
        ## (Identifiable)
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Static_exception",
    struct = "static_exception.ml",
    sig    = "Static_exception_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Lambda",
        "//utils:Numbers",
        "//utils:Int_replace_polymorphic_compare"
    ],
    visibility = []
)

bootstrap_signature(
    name = "Static_exception_cmi",
    src  = "static_exception.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//utils:Identifiable_cmi"
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Tag",
    struct = "tag.ml",
    sig    = "Tag_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ## (Printf)
        ## (Obj)
        "//utils:Numbers",
        ## (Misc)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
    ]
)

bootstrap_signature(
    name = "Tag_cmi",
    src  = "tag.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//utils:Identifiable_cmi"
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Var_within_closure",
    struct = "var_within_closure.ml",
    sig    = "Var_within_closure_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Flambda", ## (Middle_end Flambda Base_types Closure_element)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Var_within_closure_cmi",
    src  = "var_within_closure.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [":Closure_element"],
    visibility = ["//middle_end/flambda:__pkg__"]
)

