load("//bzl:rules.bzl",
     "compiler_library",
     "compiler_module",
     "compiler_signature",
)

MODULE_OPTS = []
SIG_OPTS    = []

# obazl testing, build everything
# compiler_library(
#     name = "flambda",
#     manifest  = [
#         ":Alias_analysis",
#         ":Allocated_const",
#         ":Augment_specialised_args",
#         ":Build_export_info",
#         ":Closure_conversion",
#         ":Closure_conversion_aux",
#         ":Closure_offsets",
#         ":Effect_analysis",
#         ":Export_info",
#         ":Export_info_for_pack",
#         ":Extract_projections",
#         ":Find_recursive_functions",
#         ":Flambda",
#         ":Flambda_invariants",
#         ":Flambda_iterators",
#         ":Flambda_middle_end",
#         ":Flambda_to_clambda",
#         ":Flambda_utils",
#         ":Freshening",
#         ":Import_approx",
#         ":Inconstant_idents",
#         ":Initialize_symbol_to_let_symbol",
#         ":Inline_and_simplify",
#         ":Inline_and_simplify_aux",
#         ":Inlining_cost",
#         ":Inlining_decision",
#         ":Inlining_stats",
#         ":Inlining_stats_types",
#         ":Inlining_transforms",
#         ":Invariant_params",
#         ":Lift_code",
#         ":Lift_constants",
#         ":Lift_let_to_initialize_symbol",
#         ":Parameter",
#         ":Pass_wrapper",
#         ":Projection",
#         ":Ref_to_variables",
#         ":Remove_free_vars_equal_to_args",
#         ":Remove_unused_arguments",
#         ":Remove_unused_closure_vars",
#         ":Remove_unused_program_constructs",
#         ":Share_constants",
#         ":Simple_value_approx",
#         ":Simplify_boxed_integer_ops",
#         ":Simplify_common",
#         ":Simplify_primitives",
#         ":Traverse_for_exported_symbols",
#         ":Un_anf",
#         ":Unbox_closures",
#         ":Unbox_free_vars_of_closures",
#         ":Unbox_specialised_args",
#     ],
#     # signatures  = [
#     #     ":Inlining_decision_intf_cmi",
#     #     ":Simplify_boxed_integer_ops_intf_cmi",
#     # ],
# )

## compilerlibs/Makefile.compilerlibs:
## MIDDLE_END contains two sets of flambda deps. some are inlined, the
## rest are grouped in MIDDLE_END_FLAMBDA.
compiler_library(
    name = "ocamloptcomp",
    manifest  = [
        ## inlined in MIDDLE_END:
        ":Pass_wrapper",
        ":Allocated_const",
        ":Parameter",
        ":Projection",
        ":Flambda",
        ":Flambda_iterators",
        ":Flambda_utils",
        ":Freshening",
        ":Effect_analysis",
        ":Inlining_cost",
        ":Simple_value_approx",
        ":Export_info",
        ":Export_info_for_pack",

        ## inlined in MIDDLE_END
        "//middle_end/flambda/base_types:ocamloptcomp",

        ## MIDDLE_END_FLAMBDA:
        ":Import_approx",
        ":Lift_code",
        ":Closure_conversion_aux",
        ":Closure_conversion",
        ":Initialize_symbol_to_let_symbol",
        ":Lift_let_to_initialize_symbol",
        ":Find_recursive_functions",
        ":Invariant_params",
        ":Inconstant_idents",
        ":Alias_analysis",
        ":Lift_constants",
        ":Share_constants",
        ":Simplify_common",
        ":Remove_unused_arguments",
        ":Remove_unused_closure_vars",
        ":Remove_unused_program_constructs",
        ":Simplify_boxed_integer_ops",
        ":Simplify_primitives",
        ":Inlining_stats_types",
        ":Inlining_stats",
        ":Inline_and_simplify_aux",
        ":Remove_free_vars_equal_to_args",
        ":Extract_projections",
        ":Augment_specialised_args",
        ":Unbox_free_vars_of_closures",
        ":Unbox_specialised_args",
        ":Unbox_closures",
        ":Inlining_transforms",
        ":Inlining_decision",
        ":Inline_and_simplify",
        ":Ref_to_variables",
        ":Flambda_invariants",
        ":Traverse_for_exported_symbols",
        ":Build_export_info",
        ":Closure_offsets",
        ":Un_anf",
        ":Flambda_to_clambda",
        ":Flambda_middle_end",

        ## MIDDLE_END_FLAMBDA_CMI:
        # ":Inlining_decision_intf_cmi",
        # ":Simplify_boxed_integer_ops_intf_cmi",
    ],
    visibility = ["//middle_end:__pkg__"]
)

################################################################
compiler_module(
    name   = "Alias_analysis",
    struct = "alias_analysis.ml",
    sig    = "Alias_analysis_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Flambda",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Alias_analysis_cmi",
    src  = "alias_analysis.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Tag_cmi",
        "//middle_end/flambda:Allocated_const_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
        "//parsing:Asttypes_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Allocated_const",
    struct = "allocated_const.ml",
    sig    = "Allocated_const_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Allocated_const_cmi",
    src  = "allocated_const.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi",
    ]
)

compiler_module(
    name   = "Augment_specialised_args",
    struct = "augment_specialised_args.ml",
    sig    = "Augment_specialised_args_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Pass_wrapper",
        "//middle_end/flambda:Projection",
        "//middle_end:Internal_variable_names",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Identifiable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Augment_specialised_args_cmi",
    src  = "augment_specialised_args.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Build_export_info",
    struct = "build_export_info.ml",
    sig    = "Build_export_info_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Export_id",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Export_info",
        "//middle_end/flambda:Find_recursive_functions",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Traverse_for_exported_symbols",
        "//middle_end:Clambda",
        "//middle_end:Compilation_unit",
        "//middle_end:Compilenv",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Build_export_info_cmi",
    src  = "build_export_info.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Export_info_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
    ]
)

compiler_module(
    name   = "Closure_conversion",
    struct = "closure_conversion.ml",
    sig    = "Closure_conversion_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//lambda:Debuginfo",
        "//lambda:Simplif",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda:Closure_conversion_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Lift_code",
        "//middle_end/flambda:Parameter",
        "//middle_end:Clambda_primitives",
        "//middle_end:Compilation_unit",
        "//middle_end:Convert_primitives",
        "//middle_end:Internal_variable_names",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//typing:Ident",
        "//typing:Predef",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
        "//utils:Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

compiler_signature(
    name = "Closure_conversion_cmi",
    src  = "closure_conversion.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//parsing:Asttypes_cmi",
        "//typing:Ident_cmi",
    ]
)

compiler_module(
    name   = "Closure_conversion_aux",
    struct = "closure_conversion_aux.ml",
    sig    = "Closure_conversion_aux_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//typing:Ident",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
        "//utils:Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
    ],
)

compiler_signature(
    name = "Closure_conversion_aux_cmi",
    src  = "closure_conversion_aux.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Mutable_variable_cmi",
        "//middle_end/flambda/base_types:Static_exception_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
        "//typing:Ident_cmi",
    ]
)

compiler_module(
    name   = "Closure_offsets",
    struct = "closure_offsets.ml",
    sig    = "Closure_offsets_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end:Variable",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Closure_offsets_cmi",
    src  = "closure_offsets.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
    ]
)

compiler_module(
    name   = "Effect_analysis",
    struct = "effect_analysis.ml",
    sig    = "Effect_analysis_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda",
        "//middle_end:Clambda_primitives",
        "//middle_end:Semantics_of_primitives",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
)

compiler_signature(
    name = "Effect_analysis_cmi",
    src  = "effect_analysis.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Export_info",
    struct = "export_info.ml",
    sig    = "Export_info_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Export_id",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Compilation_unit",
        "//middle_end:Symbol",
        "//middle_end:Variable",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Queue",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//middle_end:__pkg__",
        "//tools:__pkg__",
    ]
)

compiler_signature(
    name = "Export_info_cmi",
    src  = "export_info.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Export_id_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_id_cmi",
        "//middle_end/flambda/base_types:Tag_cmi",
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Compilation_unit_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = [
        "//file_formats:__pkg__",
        "//middle_end:__pkg__"
    ]
)

compiler_module(
    name   = "Export_info_for_pack",
    struct = "export_info_for_pack.ml",
    sig    = "Export_info_for_pack_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Export_id",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Set_of_closures_origin",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Export_info",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Compilation_unit",
        "//middle_end:Symbol",
        "//middle_end:Variable",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Option",
    ],
    visibility = ["//asmcomp:__pkg__"]
)

compiler_signature(
    name = "Export_info_for_pack_cmi",
    src  = "export_info_for_pack.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Export_info_cmi",
        "//middle_end:Compilation_unit_cmi",
    ]
)

compiler_module(
    name   = "Extract_projections",
    struct = "extract_projections.ml",
    sig    = "Extract_projections_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Extract_projections_cmi",
    src  = "extract_projections.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Find_recursive_functions",
    struct = "find_recursive_functions.ml",
    sig    = "Find_recursive_functions_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Strongly_connected_components",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Find_recursive_functions_cmi",
    src  = "find_recursive_functions.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Flambda",
    struct = "flambda.ml",
    sig    = "Flambda_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//lambda:Printlambda",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Set_of_closures_origin",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Clambda_primitives",
        "//middle_end:Compilation_unit",
        "//middle_end:Printclambda_primitives",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Identifiable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
        "//utils:Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = ["//middle_end/flambda/base_types:__pkg__"]
)

compiler_signature(
    name = "Flambda_cmi",
    src  = "flambda.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Closure_origin_cmi",
        "//middle_end/flambda/base_types:Mutable_variable_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_id_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_origin_cmi",
        "//middle_end/flambda/base_types:Static_exception_cmi",
        "//middle_end/flambda/base_types:Tag_cmi",
        "//middle_end:Clambda_primitives_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
        "//parsing:Asttypes_cmi",
        "//utils:Identifiable_cmi",
        "//utils:Numbers_cmi",
        ":Allocated_const_cmi",
        ":Parameter_cmi",
        ":Projection_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = ["//middle_end/flambda/base_types:__pkg__"]
)

compiler_module(
    name   = "Flambda_invariants",
    struct = "flambda_invariants.ml",
    sig    = "Flambda_invariants_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Set_of_closures_origin",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Clambda_primitives",
        "//middle_end:Compilation_unit",
        "//middle_end:Printclambda_primitives",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printexc",
    ],
)

compiler_signature(
    name = "Flambda_invariants_cmi",
    src  = "flambda_invariants.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Flambda_iterators",
    struct = "flambda_iterators.ml",
    sig    = "Flambda_iterators_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Projection",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
)

compiler_signature(
    name = "Flambda_iterators_cmi",
    src  = "flambda_iterators.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Flambda_middle_end",
    struct = "flambda_middle_end.ml",
    sig    = "Flambda_middle_end_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda:Build_export_info",
        "//middle_end/flambda:Closure_conversion",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_invariants",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_to_clambda",
        "//middle_end/flambda:Initialize_symbol_to_let_symbol",
        "//middle_end/flambda:Inline_and_simplify",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Lift_code",
        "//middle_end/flambda:Lift_constants",
        "//middle_end/flambda:Lift_let_to_initialize_symbol",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Ref_to_variables",
        "//middle_end/flambda:Remove_unused_closure_vars",
        "//middle_end/flambda:Remove_unused_program_constructs",
        "//middle_end/flambda:Share_constants",
        "//middle_end/flambda:Un_anf",
        "//middle_end:Clambda",
        "//middle_end:Compilenv",
        "//middle_end:Linkage_name",
        "//middle_end:Printclambda",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//parsing:Location",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
        "//utils:Profile",
        "//utils:Warnings",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Set",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//driver:__pkg__"
    ]
)

compiler_signature(
    name = "Flambda_middle_end_cmi",
    src  = "flambda_middle_end.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end:Clambda_cmi",
        "//middle_end:Backend_intf_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Flambda_to_clambda",
    struct = "flambda_to_clambda.ml",
    sig    = "Flambda_to_clambda_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Closure_offsets",
        "//middle_end/flambda:Export_info",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Initialize_symbol_to_let_symbol",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Un_anf",
        "//middle_end:Backend_var",
        "//middle_end:Clambda",
        "//middle_end:Compilation_unit",
        "//middle_end:Compilenv",
        "//middle_end:Linkage_name",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//typing:Primitive",
        "//utils:Clflags",
        "//utils:Misc",
        "//utils:Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
)

compiler_signature(
    name = "Flambda_to_clambda_cmi",
    src  = "flambda_to_clambda.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Export_info_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Clambda_cmi",
        "//middle_end:Symbol_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Flambda_utils",
    struct = "flambda_utils.ml",
    sig    = "Flambda_utils_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//lambda:Switch",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Clambda_primitives",
        "//middle_end:Compilation_unit",
        "//middle_end:Internal_variable_names",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
        "//utils:Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Queue",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Flambda_utils_cmi",
    src  = "flambda_utils.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Switch_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_id_cmi",
        "//middle_end/flambda/base_types:Static_exception_cmi",
        "//middle_end/flambda/base_types:Tag_cmi",
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Parameter_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Internal_variable_names_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Freshening",
    struct = "freshening.ml",
    sig    = "Freshening_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Identifiable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Freshening_cmi",
    src  = "freshening.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Mutable_variable_cmi",
        "//middle_end/flambda/base_types:Static_exception_cmi",
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Import_approx",
    struct = "import_approx.ml",
    sig    = "Import_approx_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Export_id",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Export_info",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Clambda",
        "//middle_end:Compilation_unit",
        "//middle_end:Compilenv",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//driver:__pkg__"]
)

compiler_signature(
    name = "Import_approx_cmi",
    src  = "import_approx.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Symbol_cmi",
    ]
)

compiler_module(
    name   = "Inconstant_idents",
    struct = "inconstant_idents.ml",
    sig    = "Inconstant_idents_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Compilation_unit",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Identifiable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Queue",
    ],
)

compiler_signature(
    name = "Inconstant_idents_cmi",
    src  = "inconstant_idents.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Set_of_closures_id_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//middle_end:Compilation_unit_cmi",
        "//middle_end:Variable_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Initialize_symbol_to_let_symbol",
    struct = "initialize_symbol_to_let_symbol.ml",
    sig    = "Initialize_symbol_to_let_symbol_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Projection",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Initialize_symbol_to_let_symbol_cmi",
    src  = "initialize_symbol_to_let_symbol.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
    ]
)

compiler_module(
    name   = "Inline_and_simplify",
    struct = "inline_and_simplify.ml",
    sig    = "Inline_and_simplify_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Effect_analysis",
        "//middle_end/flambda:Find_recursive_functions",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inlining_decision",
        "//middle_end/flambda:Inlining_stats",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Lift_code",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Remove_free_vars_equal_to_args",
        "//middle_end/flambda:Remove_unused_arguments",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Simplify_primitives",
        "//middle_end/flambda:Unbox_closures",
        "//middle_end/flambda:Unbox_free_vars_of_closures",
        "//middle_end/flambda:Unbox_specialised_args",
        "//middle_end:Clambda_primitives",
        "//middle_end:Internal_variable_names",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//parsing:Location",
        "//typing:Ident",
        "//typing:Predef",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
        "//utils:Warnings",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Inline_and_simplify_cmi",
    src  = "inline_and_simplify.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//middle_end:Variable_cmi",
        "//parsing:Asttypes_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Inline_and_simplify_aux",
    struct = "inline_and_simplify_aux.ml",
    sig    = "Inline_and_simplify_aux_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda/base_types:Set_of_closures_origin",
        "//middle_end/flambda/base_types:Static_exception",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inlining_stats",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Compilation_unit",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
    ],
)

compiler_signature(
    name = "Inline_and_simplify_aux_cmi",
    src  = "inline_and_simplify_aux.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Closure_origin_cmi",
        "//middle_end/flambda/base_types:Mutable_variable_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_origin_cmi",
        "//middle_end/flambda/base_types:Static_exception_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Freshening_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Inlining_stats_types_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Backend_intf_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Lazy_cmi",
    ],
)

compiler_module(
    name   = "Inlining_cost",
    struct = "inlining_cost.ml",
    sig    = "Inlining_cost_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Projection",
        "//middle_end:Clambda_primitives",
        "//middle_end:Variable",
        "//typing:Primitive",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Float",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Inlining_cost_cmi",
    src  = "inlining_cost.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//parsing:Asttypes_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Inlining_decision",
    struct = "inlining_decision.ml",
    sig    = "Inlining_decision_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inlining_stats_types",
        "//middle_end/flambda:Inlining_transforms",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Inlining_decision_cmi",
    src  = "inlining_decision.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Inlining_decision_intf_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_signature(
    name = "Inlining_decision_intf_cmi",
    src  = "inlining_decision_intf.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Inlining_stats",
    struct = "inlining_stats.ml",
    sig    = "Inlining_stats_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda:Inlining_stats_types",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Inlining_stats_cmi",
    src  = "inlining_stats.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda:Inlining_stats_types_cmi",
    ]
)

compiler_module(
    name   = "Inlining_stats_types",
    struct = "inlining_stats_types.ml",
    sig    = "Inlining_stats_types_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Inlining_cost",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Inlining_stats_types_cmi",
    src  = "inlining_stats_types.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Inlining_cost_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Inlining_transforms",
    struct = "inlining_transforms.ml",
    sig    = "Inlining_transforms_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Compilation_unit",
        "//middle_end:Internal_variable_names",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Inlining_transforms_cmi",
    src  = "inlining_transforms.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Inlining_decision_intf_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Invariant_params",
    struct = "invariant_params.ml",
    sig    = "Invariant_params_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Invariant_params_cmi",
    src  = "invariant_params.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Lift_code",
    struct = "lift_code.ml",
    sig    = "Lift_code_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Projection",
        "//middle_end:Compilation_unit",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Strongly_connected_components",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Lift_code_cmi",
    src  = "lift_code.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Internal_variable_names_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Lift_constants",
    struct = "lift_constants.ml",
    sig    = "Lift_constants_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Alias_analysis",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Inconstant_idents",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Compilation_unit",
        "//middle_end:Internal_variable_names",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
        "//utils:Strongly_connected_components",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Lift_constants_cmi",
    src  = "lift_constants.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Lift_let_to_initialize_symbol",
    struct = "lift_let_to_initialize_symbol.ml",
    sig    = "Lift_let_to_initialize_symbol_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Projection",
        "//middle_end:Internal_variable_names",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Lift_let_to_initialize_symbol_cmi",
    src  = "lift_let_to_initialize_symbol.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Parameter",
    struct = "parameter.ml",
    sig    = "Parameter_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end:Variable",
        "//utils:Identifiable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Parameter_cmi",
    src  = "parameter.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end:Compilation_unit_cmi",
        "//middle_end:Variable_cmi",
        "//utils:Identifiable_cmi"
    ],
)

compiler_module(
    name   = "Pass_wrapper",
    struct = "pass_wrapper.ml",
    sig    = "Pass_wrapper_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
    ]
)

compiler_signature(
    name = "Pass_wrapper_cmi",
    src  = "pass_wrapper.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi",
    ]
)

compiler_module(
    name   = "Projection",
    struct = "projection.ml",
    sig    = "Projection_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end:Variable",
        "//utils:Identifiable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
    ]
)

compiler_signature(
    name = "Projection_cmi",
    src  = "projection.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        "//middle_end:Variable_cmi",
        "//utils:Identifiable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ]
)

compiler_module(
    name   = "Ref_to_variables",
    struct = "ref_to_variables.ml",
    sig    = "Ref_to_variables_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Mutable_variable",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Projection",
        "//middle_end:Internal_variable_names",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ]
)

compiler_signature(
    name = "Ref_to_variables_cmi",
    src  = "ref_to_variables.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Remove_free_vars_equal_to_args",
    struct = "remove_free_vars_equal_to_args.ml",
    sig    = "Remove_free_vars_equal_to_args_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Pass_wrapper",
        "//middle_end/flambda:Projection",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

compiler_signature(
    name = "Remove_free_vars_equal_to_args_cmi",
    src  = "remove_free_vars_equal_to_args.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ]
)

compiler_module(
    name   = "Remove_unused_arguments",
    struct = "remove_unused_arguments.ml",
    sig    = "Remove_unused_arguments_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda:Find_recursive_functions",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Compilation_unit",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ]
)

compiler_signature(
    name = "Remove_unused_arguments_cmi",
    src  = "remove_unused_arguments.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Backend_intf_cmi",
    ]
)

compiler_module(
    name   = "Remove_unused_closure_vars",
    struct = "remove_unused_closure_vars.ml",
    sig    = "Remove_unused_closure_vars_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Primitives",
    ]
)

compiler_signature(
    name = "Remove_unused_closure_vars_cmi",
    src  = "remove_unused_closure_vars.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
    ]
)

compiler_module(
    name   = "Remove_unused_program_constructs",
    struct = "remove_unused_program_constructs.ml",
    sig    = "Remove_unused_program_constructs_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Effect_analysis",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Projection",
        "//middle_end:Symbol",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

compiler_signature(
    name = "Remove_unused_program_constructs_cmi",
    src  = "remove_unused_program_constructs.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
    ]
)

compiler_module(
    name   = "Share_constants",
    struct = "share_constants.ml",
    sig    = "Share_constants_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Projection",
        "//middle_end:Symbol",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

compiler_signature(
    name = "Share_constants_cmi",
    src  = "share_constants.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
    ]
)

compiler_module(
    name   = "Simple_value_approx",
    struct = "simple_value_approx.ml",
    sig    = "Simple_value_approx_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Closure_origin",
        "//middle_end/flambda/base_types:Export_id",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Set_of_closures_origin",
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Effect_analysis",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Projection",
        "//middle_end:Compilation_unit",
        "//middle_end:Internal_variable_names",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.String",
    ]
)

compiler_signature(
    name = "Simple_value_approx_cmi",
    src  = "simple_value_approx.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Closure_origin_cmi",
        "//middle_end/flambda/base_types:Export_id_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_id_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_origin_cmi",
        "//middle_end/flambda/base_types:Tag_cmi",
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Freshening_cmi",
        "//middle_end/flambda:Parameter_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end:Variable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Lazy_cmi",
    ],
    visibility = ["//middle_end:__pkg__"]
)

compiler_module(
    name   = "Simplify_boxed_integer_ops",
    struct = "simplify_boxed_integer_ops.ml",
    sig    = "Simplify_boxed_integer_ops_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end:Clambda_primitives",
        "//utils:Int_replace_polymorphic_compare",
        ":Flambda",
        ":Inlining_cost",
        ":Projection",
        ":Simple_value_approx",
        ":Simplify_common",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Nativeint",
    ]
)

compiler_signature(
    name = "Simplify_boxed_integer_ops_cmi",
    src  = "simplify_boxed_integer_ops.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Simplify_boxed_integer_ops_intf_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Int32_cmi",
        "//stdlib:Stdlib.Int64_cmi",
        "//stdlib:Stdlib.Nativeint_cmi",
    ]
)

compiler_signature(
    name = "Simplify_boxed_integer_ops_intf_cmi",
    src  = "simplify_boxed_integer_ops_intf.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Clambda_primitives_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Simplify_common",
    struct = "simplify_common.ml",
    sig    = "Simplify_common_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Effect_analysis",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//utils:Int_replace_polymorphic_compare",
    ]
)

compiler_signature(
    name = "Simplify_common_cmi",
    src  = "simplify_common.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
    ]
)

compiler_module(
    name   = "Simplify_primitives",
    struct = "simplify_primitives.ml",
    sig    = "Simplify_primitives_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Tag",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Simplify_boxed_integer_ops",
        "//middle_end/flambda:Simplify_common",
        "//middle_end:Clambda_primitives",
        "//middle_end:Semantics_of_primitives",
        "//middle_end:Symbol",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Float",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.String",
    ]
)

compiler_signature(
    name = "Simplify_primitives_cmi",
    src  = "simplify_primitives.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Debuginfo_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Clambda_primitives_cmi",
        "//middle_end:Variable_cmi",
        "//parsing:Asttypes_cmi",
    ]
)

compiler_module(
    name   = "Traverse_for_exported_symbols",
    struct = "traverse_for_exported_symbols.ml",
    sig    = "Traverse_for_exported_symbols_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda/base_types:Export_id",
        "//middle_end/flambda/base_types:Set_of_closures_id",
        "//middle_end/flambda/base_types:Var_within_closure",
        "//middle_end/flambda:Export_info",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end:Compilation_unit",
        "//middle_end:Symbol",
        "//middle_end:Variable",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Queue",
    ]
)

compiler_signature(
    name = "Traverse_for_exported_symbols_cmi",
    src  = "traverse_for_exported_symbols.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Export_id_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_id_cmi",
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        "//middle_end/flambda:Export_info_cmi",
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//middle_end:Symbol_cmi",
    ]
)

compiler_module(
    name   = "Un_anf",
    struct = "un_anf.ml",
    sig    = "Un_anf_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Debuginfo",
        "//middle_end:Backend_var",
        "//middle_end:Clambda",
        "//middle_end:Clambda_primitives",
        "//middle_end:Printclambda",
        "//middle_end:Semantics_of_primitives",
        "//middle_end:Symbol",
        "//utils:Clflags",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ]
)

compiler_signature(
    name = "Un_anf_cmi",
    src  = "un_anf.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end:Clambda_cmi",
        "//middle_end:Symbol_cmi",
        "//parsing:Asttypes_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ]
)

compiler_module(
    name   = "Unbox_closures",
    struct = "unbox_closures.ml",
    sig    = "Unbox_closures_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda/base_types:Closure_id",
        "//middle_end/flambda:Augment_specialised_args",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Projection",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Primitives",
    ]
)

compiler_signature(
    name = "Unbox_closures_cmi",
    src  = "unbox_closures.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Variable_cmi",
    ]
)

compiler_module(
    name   = "Unbox_free_vars_of_closures",
    struct = "unbox_free_vars_of_closures.ml",
    sig    = "Unbox_free_vars_of_closures_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Extract_projections",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Pass_wrapper",
        "//middle_end/flambda:Projection",
        "//middle_end:Internal_variable_names",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Primitives",
    ]
)

compiler_signature(
    name = "Unbox_free_vars_of_closures_cmi",
    src  = "unbox_free_vars_of_closures.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Projection_cmi",
    ]
)

compiler_module(
    name   = "Unbox_specialised_args",
    struct = "unbox_specialised_args.ml",
    sig    = "Unbox_specialised_args_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//middle_end/flambda:Augment_specialised_args",
        "//middle_end/flambda:Extract_projections",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Projection",
        "//middle_end:Variable",
        "//utils:Clflags",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Primitives",
    ]
)

compiler_signature(
    name = "Unbox_specialised_args_cmi",
    src  = "unbox_specialised_args.mli",
    opts = SIG_OPTS,
    deps   = [
        "//middle_end/flambda:Flambda_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux_cmi",
        "//middle_end/flambda:Inlining_cost_cmi",
        "//middle_end/flambda:Projection_cmi",
        "//middle_end:Variable_cmi",
    ]
)

