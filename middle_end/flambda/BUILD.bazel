load("//bzl:rules.bzl",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:BUILD.bzl",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS"
     )

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS    = ROOT_MODULE_OPTS

STDLIB = ["//stdlib"]

## compilerlibs/Makefile.compilerlibs:
MIDDLE_END_FLAMBDA = [
    "alias_analysis.cmo",
    "augment_specialised_args.cmo",
    "build_export_info.cmo",
    "closure_conversion.cmo",
    "closure_conversion_aux.cmo",
    "closure_offsets.cmo",
    "extract_projections.cmo",
    "find_recursive_functions.cmo",
    "flambda_invariants.cmo",
    "flambda_middle_end.cmo",
    "flambda_to_clambda.cmo",
    "import_approx.cmo",
    "inconstant_idents.cmo",
    "initialize_symbol_to_let_symbol.cmo",
    "inline_and_simplify.cmo",
    "inline_and_simplify_aux.cmo",
    "inlining_decision.cmo",
    "inlining_stats.cmo",
    "inlining_stats_types.cmo",
    "inlining_transforms.cmo",
    "invariant_params.cmo",
    "lift_code.cmo",
    "lift_constants.cmo",
    "lift_let_to_initialize_symbol.cmo",
    "ref_to_variables.cmo",
    "remove_free_vars_equal_to_args.cmo",
    "remove_unused_arguments.cmo",
    "remove_unused_closure_vars.cmo",
    "remove_unused_program_constructs.cmo",
    "share_constants.cmo",
    "simplify_boxed_integer_ops.cmo",
    "simplify_common.cmo",
    "simplify_primitives.cmo",
    "traverse_for_exported_symbols.cmo",
    "un_anf.cmo",
    "unbox_closures.cmo",
    "unbox_free_vars_of_closures.cmo",
    "unbox_specialised_args.cmo"
]

MIDDLE_END_FLAMBDA_CMI = [
    "inlining_decision_intf.cmi", "simplify_boxed_integer_ops_intf.cmi"
]


bootstrap_library(
    name = "flambda",
    manifest  = [
        ":Alias_analysis",
        ":Allocated_const",
        ":Augment_specialised_args",
        ":Build_export_info",
        ":Closure_conversion",
        ":Closure_conversion_aux",
        ":Closure_offsets",
        ":Effect_analysis",
        ":Export_info",
        ":Export_info_for_pack",
        ":Extract_projections",
        ":Find_recursive_functions",
        ":Flambda",
        ":Flambda_invariants",
        ":Flambda_iterators",
        ":Flambda_middle_end",
        ":Flambda_to_clambda",
        ":Flambda_utils",
        ":Freshening",
        ":Import_approx",
        ":Inconstant_idents",
        ":Initialize_symbol_to_let_symbol",
        ":Inline_and_simplify",
        ":Inline_and_simplify_aux",
        ":Inlining_cost",
        ":Inlining_decision",
        ":Inlining_stats",
        ":Inlining_stats_types",
        ":Inlining_transforms",
        ":Invariant_params",
        ":Lift_code",
        ":Lift_constants",
        ":Lift_let_to_initialize_symbol",
        ":Parameter",
        ":Pass_wrapper",
        ":Projection",
        ":Ref_to_variables",
        ":Remove_free_vars_equal_to_args",
        ":Remove_unused_arguments",
        ":Remove_unused_closure_vars",
        ":Remove_unused_program_constructs",
        ":Share_constants",
        ":Simple_value_approx",
        ":Simplify_boxed_integer_ops",
        ":Simplify_common",
        ":Simplify_primitives",
        ":Traverse_for_exported_symbols",
        ":Un_anf",
        ":Unbox_closures",
        ":Unbox_free_vars_of_closures",
        ":Unbox_specialised_args",
    ],
    # signatures  = [
    #     ":Inlining_decision_intf_cmi",
    #     ":Simplify_boxed_integer_ops_intf_cmi",
    # ],
)

bootstrap_module(
    name   = "Alias_analysis",
    struct = "alias_analysis.ml",
    sig    = "Alias_analysis_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable",
        "//middle_end:Symbol",
        ## (Var_within_closure)
        ## (Tag)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Alias_analysis_cmi",
    src  = "alias_analysis.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable",
        "//middle_end:Symbol",
        ## (Tag)
        ## (Format)
        ## (Asttypes)
    ]
)

bootstrap_module(
    name   = "Allocated_const",
    struct = "allocated_const.ml",
    sig    = "Allocated_const_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ## (String)
        ## (Nativeint)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int64)
        ## (Int32)
        ## (Format)
    ]
)

bootstrap_signature(
    name = "Allocated_const_cmi",
    src  = "allocated_const.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Augment_specialised_args",
    struct = "augment_specialised_args.ml",
    sig    = "Augment_specialised_args_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Pass_wrapper",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
        ## (Hashtbl)
        ## (Format)
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Augment_specialised_args_cmi",
    src  = "augment_specialised_args.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable",
    ]
)

bootstrap_module(
    name   = "Build_export_info",
    struct = "build_export_info.ml",
    sig    = "Build_export_info_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Traverse_for_exported_symbols",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Find_recursive_functions",
        "//middle_end/flambda:Export_info",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Compilenv",
        "//middle_end:Compilation_unit",
        "//middle_end:Clambda",
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Var_within_closure)
        ## (Tag)
        ## (String)
        ## (Set_of_closures_id)
        ## (Misc)
        ## (List)
        ## (Export_id)
        ## (Closure_id)
        ## (Clflags)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Build_export_info_cmi",
    src  = "build_export_info.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Export_info",
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
    ]
)

bootstrap_module(
    name   = "Closure_conversion",
    struct = "closure_conversion.ml",
    sig    = "Closure_conversion_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Lift_code",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Closure_conversion_aux",
        "//middle_end:Variable", ## (Middle_end Variable",
        "//middle_end:Symbol", ## (Middle_end Symbol",
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        "//middle_end:Convert_primitives", ## (Middle_end Convert_primitives)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Tag)
        ## (Sys)
        ## (String)
        ## (Static_exception)
        "//lambda:Simplif",
        ## (Predef)
        ## (Option)
        ## (Numbers)
        ## (Mutable_variable)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Ident)
        ## (Debuginfo)
        ## (Config)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Clflags)
        ## (Asttypes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Closure_conversion_cmi",
    src  = "closure_conversion.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Ident)
    ]
)

bootstrap_module(
    name   = "Closure_conversion_aux",
    struct = "closure_conversion_aux.ml",
    sig    = "Closure_conversion_aux_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable", ## (Middle_end Variable",
        "//middle_end:Symbol", ## (Middle_end Symbol",
        ## (Static_exception)
        ## (Printexc)
        ## (Numbers)
        ## (Mutable_variable)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int)
        ## (Ident)
    ]
)

bootstrap_signature(
    name = "Closure_conversion_aux_cmi",
    src  = "closure_conversion_aux.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable_cmi",
        "//middle_end:Symbol_cmi",
        "//middle_end/flambda/base_types:Static_exception_cmi",
        "//middle_end/flambda/base_types:Mutable_variable_cmi",
        ## (Ident)
    ]
)

bootstrap_module(
    name   = "Closure_offsets",
    struct = "closure_offsets.ml",
    sig    = "Closure_offsets_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Var_within_closure)
        ## (Misc)
        ## (List)
        ## (Closure_id)
    ]
)

bootstrap_signature(
    name = "Closure_offsets_cmi",
    src  = "closure_offsets.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        ## (Var_within_closure)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Effect_analysis",
    struct = "effect_analysis.ml",
    sig    = "Effect_analysis_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Flambda",
        "//middle_end:Semantics_of_primitives", ## (Middle_end Semantics_of_primitives)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        ## (Option)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Effect_analysis_cmi",
    src  = "effect_analysis.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Export_info",
    struct = "export_info.ml",
    sig    = "Export_info_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        ## (Var_within_closure)
        ## (Tag)
        ## (String)
        ## (Set_of_closures_id)
        ## (Queue)
        ## (List)
        ## (Format)
        ## (Export_id)
        ## (Closure_id)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Export_info_cmi",
    src  = "export_info.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable",
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        ## (Var_within_closure)
        ## (Tag)
        ## (Set_of_closures_id)
        ## (Format)
        ## (Export_id)
        ## (Closure_id)
    ],
    visibility = ["//file_formats:__pkg__"]
)

bootstrap_module(
    name   = "Export_info_for_pack",
    struct = "export_info_for_pack.ml",
    sig    = "Export_info_for_pack_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Export_info",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        ## (Var_within_closure)
        ## (Set_of_closures_origin)
        ## (Set_of_closures_id)
        ## (Option)
        ## (Export_id)
        ## (Closure_id)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Export_info_for_pack_cmi",
    src  = "export_info_for_pack.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Export_info",
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
    ]
)

bootstrap_module(
    name   = "Extract_projections",
    struct = "extract_projections.ml",
    sig    = "Extract_projections_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Var_within_closure)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Closure_id)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Extract_projections_cmi",
    src  = "extract_projections.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
    ]
)

bootstrap_module(
    name   = "Find_recursive_functions",
    struct = "find_recursive_functions.ml",
    sig    = "Find_recursive_functions_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        "//utils:Strongly_connected_components",
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Find_recursive_functions_cmi",
    src  = "find_recursive_functions.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
    ]
)

bootstrap_module(
    name   = "Flambda",
    struct = "flambda.ml",
    sig    = "Flambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//middle_end:Printclambda_primitives", ## (Middle_end Printclambda_primitives)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Tag)
        ## (String)
        ## (Static_exception)
        ## (Set_of_closures_origin)
        ## (Set_of_closures_id)
        ## (Printlambda)
        ## (Printf)
        ## (Printexc)
        ## (Option)
        ## (Numbers)
        ## (Mutable_variable)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
        ## (Hashtbl)
        ## (Format)
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Clflags)
        ## (Char)
        ## (Asttypes)
    ],
    visibility = ["//middle_end/flambda/base_types:__pkg__"]
)

bootstrap_signature(
    name = "Flambda_cmi",
    src  = "flambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Allocated_const_cmi",
        ":Parameter_cmi",
        ":Projection_cmi",
        "//middle_end:Clambda_primitives_cmi", ## (Middle_end Clambda_primitives)
        "//middle_end:Symbol_cmi", ## (Middle_end Symbol)
        "//middle_end:Variable_cmi", ## (Middle_end Variable)
        "//middle_end/flambda/base_types:Tag_cmi",
        "//middle_end/flambda/base_types:Static_exception_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_id_cmi",
        "//middle_end/flambda/base_types:Set_of_closures_origin_cmi",
        ## (Numbers)
        "//middle_end/flambda/base_types:Mutable_variable_cmi",
        ## (Identifiable)
        ## (Format)
        ## (Debuginfo)
        "//middle_end/flambda/base_types:Closure_id_cmi",
        "//middle_end/flambda/base_types:Closure_origin_cmi",
        ## (Asttypes)
    ],
    visibility = ["//middle_end/flambda/base_types:__pkg__"]
)

bootstrap_module(
    name   = "Flambda_invariants",
    struct = "flambda_invariants.ml",
    sig    = "Flambda_invariants_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Printclambda_primitives", ## (Middle_end Printclambda_primitives)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        ## (Var_within_closure)
        ## (Tag)
        ## (Static_exception)
        ## (Set_of_closures_origin)
        ## (Set_of_closures_id)
        ## (Printexc)
        ## (Option)
        ## (Numbers)
        ## (Mutable_variable)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Debuginfo)
        ## (Closure_id)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Flambda_invariants_cmi",
    src  = "flambda_invariants.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Flambda_iterators",
    struct = "flambda_iterators.ml",
    sig    = "Flambda_iterators_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Option)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Flambda_iterators_cmi",
    src  = "flambda_iterators.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
    ]
)

bootstrap_module(
    name   = "Flambda_middle_end",
    struct = "flambda_middle_end.ml",
    sig    = "Flambda_middle_end_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Un_anf",
        "//middle_end/flambda:Share_constants",
        "//middle_end/flambda:Remove_unused_program_constructs",
        "//middle_end/flambda:Remove_unused_closure_vars",
        "//middle_end/flambda:Ref_to_variables",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Lift_let_to_initialize_symbol",
        "//middle_end/flambda:Lift_constants",
        "//middle_end/flambda:Lift_code",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify",
        "//middle_end/flambda:Initialize_symbol_to_let_symbol",
        "//middle_end/flambda:Flambda_to_clambda",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda_invariants",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Closure_conversion",
        "//middle_end/flambda:Build_export_info",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Printclambda", ## (Middle_end Printclambda)
        "//middle_end:Linkage_name", ## (Middle_end Linkage_name)
        "//middle_end:Compilenv", ## (Middle_end Compilenv)
        "//middle_end:Clambda", ## (Middle_end Clambda)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Warnings)
        ## (Set)
        ## (Profile)
        ## (Printexc)
        ## (Misc)
        ## (Location)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Debuginfo)
        ## (Closure_id)
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Flambda_middle_end_cmi",
    src  = "flambda_middle_end.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Clambda", ## (Middle_end Clambda",
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Flambda_to_clambda",
    struct = "flambda_to_clambda.ml",
    sig    = "Flambda_to_clambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Un_anf",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Initialize_symbol_to_let_symbol",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Export_info",
        "//middle_end/flambda:Closure_offsets",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Linkage_name", ## (Middle_end Linkage_name)
        "//middle_end:Compilenv", ## (Middle_end Compilenv)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Clambda", ## (Middle_end Clambda)
        "//middle_end:Backend_var", ## (Middle_end Backend_var)
        ## (Var_within_closure)
        ## (Tag)
        ## (Static_exception)
        ## (Set_of_closures_id)
        ## (Primitive)
        ## (Option)
        ## (Numbers)
        ## (Mutable_variable)
        ## (Misc)
        ## (List)
        ## (Int)
        ## (Format)
        ## (Debuginfo)
        ## (Closure_id)
        ## (Clflags)
        ## (Char)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Flambda_to_clambda_cmi",
    src  = "flambda_to_clambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Export_info",
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Clambda", ## (Middle_end Clambda)
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Flambda_utils",
    struct = "flambda_utils.ml",
    sig    = "Flambda_utils_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        ## (Var_within_closure)
        ## (Switch)
        ## (String)
        ## (Static_exception)
        ## (Set_of_closures_id)
        ## (Queue)
        ## (Option)
        ## (Numbers)
        ## (Mutable_variable)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Flambda_utils_cmi",
    src  = "flambda_utils.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable",
        "//middle_end:Symbol",
        "//middle_end:Internal_variable_names_cmi",
        ## (Var_within_closure)
        ## (Tag)
        "//lambda:Switch_cmi",
        ## (Static_exception)
        ## (Set_of_closures_id)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Freshening",
    struct = "freshening.ml",
    sig    = "Freshening_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable",
        "//middle_end:Symbol", ## (Middle_end Symbol)
        ## (Var_within_closure)
        ## (Static_exception)
        ## (Mutable_variable)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
        ## (Format)
        ## (Closure_id)
    ]
)

bootstrap_signature(
    name = "Freshening_cmi",
    src  = "freshening.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        ## (Var_within_closure)
        ## (Static_exception)
        ## (Mutable_variable)
        ## (Format)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Import_approx",
    struct = "import_approx.ml",
    sig    = "Import_approx_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Export_info",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Compilenv", ## (Middle_end Compilenv)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Clambda", ## (Middle_end Clambda)
        ## (Var_within_closure)
        ## (Set_of_closures_id)
        ## (Misc)
        ## (Format)
        ## (Export_id)
        ## (Closure_id)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Import_approx_cmi",
    src  = "import_approx.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Symbol", ## (Middle_end Symbol)
    ]
)

bootstrap_module(
    name   = "Inconstant_idents",
    struct = "inconstant_idents.ml",
    sig    = "Inconstant_idents_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Set_of_closures_id)
        ## (Queue)
        ## (Option)
        ## (Numbers)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
        ## (Closure_id)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Inconstant_idents_cmi",
    src  = "inconstant_idents.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Set_of_closures_id)
    ]
)

bootstrap_module(
    name   = "Initialize_symbol_to_let_symbol",
    struct = "initialize_symbol_to_let_symbol.ml",
    sig    = "Initialize_symbol_to_let_symbol_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Initialize_symbol_to_let_symbol_cmi",
    src  = "initialize_symbol_to_let_symbol.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Inline_and_simplify",
    struct = "inline_and_simplify.ml",
    sig    = "Inline_and_simplify_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Unbox_specialised_args",
        "//middle_end/flambda:Unbox_free_vars_of_closures",
        "//middle_end/flambda:Unbox_closures",
        "//middle_end/flambda:Simplify_primitives",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Remove_unused_arguments",
        "//middle_end/flambda:Remove_free_vars_equal_to_args",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Lift_code",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Inlining_stats",
        "//middle_end/flambda:Inlining_decision",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Find_recursive_functions",
        "//middle_end/flambda:Effect_analysis",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Warnings)
        ## (Var_within_closure)
        ## (Tag)
        ## (String)
        ## (Static_exception)
        ## (Printf)
        ## (Predef)
        ## (Misc)
        ## (Location)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Ident)
        ## (Format)
        ## (Debuginfo)
        ## (Config)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Clflags)
        ## (Asttypes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Inline_and_simplify_cmi",
    src  = "inline_and_simplify.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Inline_and_simplify_aux",
    struct = "inline_and_simplify_aux.ml",
    sig    = "Inline_and_simplify_aux_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Inlining_stats",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",

        "//middle_end:Variable",
        "//middle_end:Symbol",
        "//middle_end:Compilation_unit",
        "//middle_end:Backend_intf_cmi",

        ## (Var_within_closure)
        ## (Static_exception)
        ## (Set_of_closures_origin)
        ## (Printexc)
        ## (Mutable_variable)
        ## (Misc)
        ## (List)
        ## (Lazy)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int)
        ## (Format)
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Inline_and_simplify_aux_cmi",
    src  = "inline_and_simplify_aux.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_stats_types",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable",
        "//middle_end:Symbol",
        "//middle_end:Backend_intf_cmi",
        ## (Static_exception)
        ## (Set_of_closures_origin)
        ## (Mutable_variable)
        ## (Lazy)
        ## (Format)
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Inlining_cost",
    struct = "inlining_cost.ml",
    sig    = "Inlining_cost_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable",
        "//middle_end:Clambda_primitives",
        ## (String)
        ## (Printf)
        ## (Primitive)
        ## (Option)
        ## (Misc)
        ## (List)
        ## (Lazy)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int)
        ## (Format)
        ## (Float)
        ## (Clflags)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Inlining_cost_cmi",
    src  = "inlining_cost.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda_cmi"
        ## (Format",
    ]
)

bootstrap_module(
    name   = "Inlining_decision",
    struct = "inlining_decision.ml",
    sig    = "Inlining_decision_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Inlining_transforms",
        "//middle_end/flambda:Inlining_stats_types",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Var_within_closure)
        ## (Misc)
        ## (List)
        ## (Lazy)
        "//utils:Int_replace_polymorphic_compare"
        ## (Closure_id)
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Inlining_decision_cmi",
    src  = "inlining_decision.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_decision_intf_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Debuginfo)
        ## (Closure_id)
    ]
)

bootstrap_signature(
    name = "Inlining_decision_intf_cmi",
    src  = "inlining_decision_intf.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Debuginfo)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Inlining_stats",
    struct = "inlining_stats.ml",
    sig    = "Inlining_stats_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Inlining_stats_types",
        ## (String)
        ## (Misc)
        ## (Map)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Debuginfo)
        ## (Closure_id)
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Inlining_stats_cmi",
    src  = "inlining_stats.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Inlining_stats_types",
        ## (Debuginfo)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Inlining_stats_types",
    struct = "inlining_stats_types.ml",
    sig    = "Inlining_stats_types_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Inlining_cost",
        ## (String)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
    ]
)

bootstrap_signature(
    name = "Inlining_stats_types_cmi",
    src  = "inlining_stats_types.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Inlining_cost",
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Inlining_transforms",
    struct = "inlining_transforms.ml",
    sig    = "Inlining_transforms_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Inlining_decision_intf_cmi",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        ## (Var_within_closure)
        ## (List)
        ## (Lazy)
        "//utils:Int_replace_polymorphic_compare"
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
    ]
)

bootstrap_signature(
    name = "Inlining_transforms_cmi",
    src  = "inlining_transforms.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_decision_intf_cmi",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Debuginfo)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Invariant_params",
    struct = "invariant_params.ml",
    sig    = "Invariant_params_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Closure_id)
        ## (Clflags)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Invariant_params_cmi",
    src  = "invariant_params.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
    ]
)

bootstrap_module(
    name   = "Lift_code",
    struct = "lift_code.ml",
    sig    = "Lift_code_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        "//utils:Strongly_connected_components",
        ## (Mutable_variable)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Lift_code_cmi",
    src  = "lift_code.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable",
        "//middle_end:Internal_variable_names",
    ]
)

bootstrap_module(
    name   = "Lift_constants",
    struct = "lift_constants.ml",
    sig    = "Lift_constants_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inconstant_idents",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Allocated_const",
        "//middle_end/flambda:Alias_analysis",
        "//middle_end:Variable",
        "//middle_end:Symbol",
        "//middle_end:Internal_variable_names",
        "//middle_end:Compilation_unit",
        "//middle_end:Backend_intf_cmi",
        ## (Var_within_closure)
        ## (Tag)
        "//utils:Strongly_connected_components",
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Closure_id)
        ## (Asttypes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Lift_constants_cmi",
    src  = "lift_constants.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
    ]
)

bootstrap_module(
    name   = "Lift_let_to_initialize_symbol",
    struct = "lift_let_to_initialize_symbol.ml",
    sig    = "Lift_let_to_initialize_symbol_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        ## (Tag)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Debuginfo)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Lift_let_to_initialize_symbol_cmi",
    src  = "lift_let_to_initialize_symbol.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
    ]
)

bootstrap_module(
    name   = "Parameter",
    struct = "parameter.ml",
    sig    = "Parameter_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
    ]
)

bootstrap_signature(
    name = "Parameter_cmi",
    src  = "parameter.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Compilation_unit_cmi",
        "//middle_end:Variable_cmi",
        "//utils:Identifiable_cmi"
    ],
)

bootstrap_module(
    name   = "Pass_wrapper",
    struct = "pass_wrapper.ml",
    sig    = "Pass_wrapper_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//utils:Int_replace_polymorphic_compare",
        ## (Format)
        "//utils:Clflags"
    ]
)

bootstrap_signature(
    name = "Pass_wrapper_cmi",
    src  = "pass_wrapper.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Projection",
    struct = "projection.ml",
    sig    = "Projection_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Var_within_closure)
        "//utils:Int_replace_polymorphic_compare"
        ## (Identifiable)
        ## (Hashtbl)
        ## (Format)
        ## (Closure_id)
    ]
)

bootstrap_signature(
    name = "Projection_cmi",
    src  = "projection.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Variable_cmi", ## (Middle_end Variable)
        "//middle_end/flambda/base_types:Var_within_closure_cmi",
        ## (Identifiable)
        ## (Format)
        "//middle_end/flambda/base_types:Closure_id_cmi"
    ]
)

bootstrap_module(
    name   = "Ref_to_variables",
    struct = "ref_to_variables.ml",
    sig    = "Ref_to_variables_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        ## (Option)
        ## (Mutable_variable)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Asttypes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Ref_to_variables_cmi",
    src  = "ref_to_variables.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Remove_free_vars_equal_to_args",
    struct = "remove_free_vars_equal_to_args.ml",
    sig    = "Remove_free_vars_equal_to_args_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Pass_wrapper",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Remove_free_vars_equal_to_args_cmi",
    src  = "remove_free_vars_equal_to_args.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Remove_unused_arguments",
    struct = "remove_unused_arguments.ml",
    sig    = "Remove_unused_arguments_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Find_recursive_functions",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Format)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Remove_unused_arguments_cmi",
    src  = "remove_unused_arguments.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end:Backend_intf_cmi", ## (Middle_end Backend_intf)
    ]
)

bootstrap_module(
    name   = "Remove_unused_closure_vars",
    struct = "remove_unused_closure_vars.ml",
    sig    = "Remove_unused_closure_vars_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        ## (Var_within_closure)
        "//utils:Int_replace_polymorphic_compare"
        ## (Closure_id)
    ]
)

bootstrap_signature(
    name = "Remove_unused_closure_vars_cmi",
    src  = "remove_unused_closure_vars.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Remove_unused_program_constructs",
    struct = "remove_unused_program_constructs.ml",
    sig    = "Remove_unused_program_constructs_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Effect_analysis",
        "//middle_end:Symbol", ## (Middle_end Symbol)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Remove_unused_program_constructs_cmi",
    src  = "remove_unused_program_constructs.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Share_constants",
    struct = "share_constants.ml",
    sig    = "Share_constants_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end:Symbol", ## (Middle_end Symbol)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Share_constants_cmi",
    src  = "share_constants.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Simple_value_approx",
    struct = "simple_value_approx.ml",
    sig    = "Simple_value_approx_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Effect_analysis",
        "//middle_end/flambda:Allocated_const",
        "//middle_end:Variable",
        "//middle_end:Symbol",
        "//middle_end:Internal_variable_names",
        "//middle_end:Compilation_unit",
        ## (Var_within_closure)
        ## (Tag)
        ## (String)
        ## (Set_of_closures_origin)
        ## (Set_of_closures_id)
        ## (Printexc)
        ## (Option)
        ## (Obj)
        ## (Nativeint)
        ## (Misc)
        ## (List)
        ## (Lazy)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int64)
        ## (Int32)
        ## (Format)
        ## (Export_id)
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
        ## (Char)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Simple_value_approx_cmi",
    src  = "simple_value_approx.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Parameter",
        "//middle_end/flambda:Freshening",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        ## (Var_within_closure)
        ## (Tag)
        ## (Set_of_closures_origin)
        ## (Set_of_closures_id)
        ## (Lazy)
        ## (Format)
        "//middle_end/flambda/base_types:Export_id_cmi",
        ## (Debuginfo)
        ## (Closure_origin)
        ## (Closure_id)
    ],
    visibility = ["//middle_end:__pkg__"]
)

bootstrap_module(
    name   = "Simplify_boxed_integer_ops",
    struct = "simplify_boxed_integer_ops.ml",
    sig    = "Simplify_boxed_integer_ops_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Simplify_common",
        ":Simplify_boxed_integer_ops_intf_cmi",
        ":Simple_value_approx",
        ":Projection",
        ":Inlining_cost",
        ":Flambda",
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        ## (Nativeint)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int64)
        ## (Int32)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Simplify_boxed_integer_ops_cmi",
    src  = "simplify_boxed_integer_ops.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simplify_boxed_integer_ops_intf_cmi",
        ## (Nativeint)
        ## (Int64)
        ## (Int32)
    ]
)

bootstrap_signature(
    name = "Simplify_boxed_integer_ops_intf_cmi",
    src  = "simplify_boxed_integer_ops_intf.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Flambda",
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        ## (Asttypes)
    ]
)

bootstrap_module(
    name   = "Simplify_common",
    struct = "simplify_common.ml",
    sig    = "Simplify_common_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Effect_analysis",
        "//utils:Int_replace_polymorphic_compare"
    ]
)

bootstrap_signature(
    name = "Simplify_common_cmi",
    src  = "simplify_common.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Simplify_primitives",
    struct = "simplify_primitives.ml",
    sig    = "Simplify_primitives_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simplify_common",
        "//middle_end/flambda:Simplify_boxed_integer_ops",
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Flambda",
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Semantics_of_primitives", ## (Middle_end Semantics_of_primitives)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        ## (Tag)
        ## (String)
        ## (Nativeint)
        ## (Misc)
        ## (List)
        "//utils:Int_replace_polymorphic_compare"
        ## (Int64)
        ## (Int32)
        ## (Float)
        ## (Clflags)
        ## (Char)
        ## (Asttypes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Simplify_primitives_cmi",
    src  = "simplify_primitives.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        ## (Debuginfo)
        ## (Asttypes)
    ]
)

bootstrap_module(
    name   = "Traverse_for_exported_symbols",
    struct = "traverse_for_exported_symbols.ml",
    sig    = "Traverse_for_exported_symbols_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Export_info",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Compilation_unit", ## (Middle_end Compilation_unit)
        ## (Var_within_closure)
        ## (Set_of_closures_id)
        ## (Queue)
        ## (Misc)
        ## (Export_id)
        ## (Closure_id)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Traverse_for_exported_symbols_cmi",
    src  = "traverse_for_exported_symbols.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Simple_value_approx",
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Export_info",
        "//middle_end:Symbol", ## (Middle_end Symbol)
        ## (Var_within_closure)
        ## (Set_of_closures_id)
        ## (Export_id)
        ## (Closure_id)
    ]
)

bootstrap_module(
    name   = "Un_anf",
    struct = "un_anf.ml",
    sig    = "Un_anf_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end:Symbol",
        "//middle_end:Semantics_of_primitives",
        "//middle_end:Printclambda",
        "//middle_end:Clambda_primitives",
        "//middle_end:Clambda",
        "//middle_end:Backend_var",
        ## (Option)
        ## (Misc)
        ## (List)
        ## (Format)
        ## (Debuginfo)
        ## (Clflags)
        ## (Asttypes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Un_anf_cmi",
    src  = "un_anf.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Symbol", ## (Middle_end Symbol)
        "//middle_end:Clambda_cmi", ## (Middle_end Clambda)
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Unbox_closures",
    struct = "unbox_closures.ml",
    sig    = "Unbox_closures_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Augment_specialised_args",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//utils:Int_replace_polymorphic_compare"
        ## (Closure_id)
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Unbox_closures_cmi",
    src  = "unbox_closures.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
    ]
)

bootstrap_module(
    name   = "Unbox_free_vars_of_closures",
    struct = "unbox_free_vars_of_closures.ml",
    sig    = "Unbox_free_vars_of_closures_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Pass_wrapper",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda_utils",
        "//middle_end/flambda:Flambda_iterators",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Extract_projections",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//middle_end:Internal_variable_names", ## (Middle_end Internal_variable_names)
        ## (Misc)
        "//utils:Int_replace_polymorphic_compare"
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Unbox_free_vars_of_closures_cmi",
    src  = "unbox_free_vars_of_closures.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
    ]
)

bootstrap_module(
    name   = "Unbox_specialised_args",
    struct = "unbox_specialised_args.ml",
    sig    = "Unbox_specialised_args_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Invariant_params",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end/flambda:Extract_projections",
        "//middle_end/flambda:Augment_specialised_args",
        "//middle_end:Variable", ## (Middle_end Variable)
        "//utils:Int_replace_polymorphic_compare"
        ## (Clflags)
    ]
)

bootstrap_signature(
    name = "Unbox_specialised_args_cmi",
    src  = "unbox_specialised_args.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end/flambda:Projection",
        "//middle_end/flambda:Inlining_cost",
        "//middle_end/flambda:Inline_and_simplify_aux",
        "//middle_end/flambda:Flambda",
        "//middle_end:Variable", ## (Middle_end Variable)
    ]
)

