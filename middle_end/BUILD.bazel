load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:CONFIG.bzl",
     "OC_COMMON_CFLAGS",
     "PLATFORM_CFLAGS")

MODULE_OPTS = OC_COMMON_CFLAGS + PLATFORM_CFLAGS
# + [
#     "-nostdlib"
# ]
SIG_OPTS    = OC_COMMON_CFLAGS + PLATFORM_CFLAGS

STDLIB = ["//boot/lib:stdlib"]

bootstrap_library(
    name = "middle_end",
    manifest  = [
        ":Backend_var",
        ":Clambda",
        ":Clambda_primitives",
        ":Compilation_unit",
        ":Compilenv",
        ":Convert_primitives",
        ":Internal_variable_names",
        ":Linkage_name",
        ":Printclambda",
        ":Printclambda_primitives",
        ":Semantics_of_primitives",
        ":Symbol",
        ":Variable",

        ":Backend_intf_cmi",
    ],
)

## defined in compilerlibs/Makefile.compilerlibs
## used by //compilerlibs:ocamlmiddleend and //compilerlibs:ocamloptcomp
# bootstrap_library(
bootstrap_archive(
    name = "ocamlmiddleend",
    manifest  = [
        ## NB: the makefiles take pains to put stuff in order, across
        ## pkg boundaries in some cases. OBazl doesn't need that, so
        ## long as each target lists its direct deps. So we can list
        ## targets from any packages, in alpha order, and OBazl will
        ## put them in dependency order.

        ":Internal_variable_names",
        ":Linkage_name",
        ":Compilation_unit",
        ":Variable",
        # flambda stuff..
        ":Symbol",
        ":Backend_var",
        ":Clambda_primitives",
        ":Printclambda_primitives",
        ":Clambda",
        ":Printclambda",
        ":Semantics_of_primitives",
        ":Convert_primitives",
        # flambda stuff
        ":Compilenv",

        ## includes all flambda deps, inline and $(MIDDLE_END_FLAMBDA)
        "//middle_end/flambda:ocamloptcomp",

        # $(MIDDLE_END_CLOSURE)
        "//middle_end/closure:Closure",
        "//middle_end/closure:Closure_middle_end",

        # ":Backend_intf_cmi",
    ],
    visibility = [
        # "//compilerlibs:__pkg__",
        # "//tools:__pkg__",
        "//visibility:public"
    ]
)

################################################################
bootstrap_signature(
    name = "Backend_intf_cmi",
    src  = "backend_intf.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Symbol", ## (Middle_end Symbol)
        "//middle_end/flambda:Simple_value_approx_cmi",
        "//typing:Ident",
        "//middle_end/flambda/base_types:Closure_id",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__pkg__",
        "//driver:__pkg__",
        "//middle_end:__subpackages__"
    ]
)

bootstrap_module(
    name   = "Backend_var",
    struct = "backend_var.ml",
    sig    = "Backend_var_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//typing:Ident",
        "//typing:Path",
        "//stdlib:Stdlib.Format",
        "//lambda:Debuginfo",
        "//utils:Clflags",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__subpackages__",
        "//middle_end:__subpackages__"
    ]
)

bootstrap_signature(
    name = "Backend_var_cmi",
    src  = "backend_var.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//typing:Path_cmi",
        "//typing:Ident_cmi",
        "//stdlib:Stdlib.Format",
        "//lambda:Debuginfo_cmi"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_module(
    name   = "Clambda",
    struct = "clambda.ml",
    sig    = "Clambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Clambda_primitives", ## (Middle_end Clambda_primitives)
        ":Backend_var", ## (Middle_end Backend_var)
        "//lambda:Debuginfo", ## (Lambda Debuginfo)
        "//stdlib:Stdlib.String",
        "//typing:Path",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int32",
        "//typing:Ident",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__pkg__",
        "//middle_end:__subpackages__"
    ]
)

bootstrap_signature(
    name = "Clambda_cmi",
    src  = "clambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Clambda_primitives", ## (Middle_end Clambda_primitives)
        ":Backend_var", ## (Middle_end Backend_var)
        "//lambda:Debuginfo",
        "//typing:Path",
        "//typing:Ident",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end/flambda:__pkg__",
    ]
)

bootstrap_module(
    name   = "Clambda_primitives",
    struct = "clambda_primitives.ml",
    sig    = "Clambda_primitives_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Lambda",
        "//typing:Types",
        "//typing:Primitive",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end:__subpackages__"]
)

bootstrap_signature(
    name = "Clambda_primitives_cmi",
    src  = "clambda_primitives.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//typing:Types",
        "//typing:Primitive",
        "//lambda:Lambda_cmi",
        "//parsing:Asttypes_cmi"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Compilation_unit",
    struct = "compilation_unit.ml",
    sig    = "Compilation_unit_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Linkage_name", ## (Middle_end Linkage_name)
        "//stdlib:Stdlib.String",
        "//utils:Misc",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Identifiable",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__pkg__",
        "//middle_end/flambda:__subpackages__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Compilation_unit_cmi",
    src  = "compilation_unit.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Linkage_name", ## (Middle_end Linkage_name)
        "//utils:Identifiable",
        "//typing:Ident_cmi"
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//middle_end/flambda:__pkg__",
        "//middle_end/flambda/base_types:__pkg__"
    ]
)

bootstrap_module(
    name   = "Compilenv",
    struct = "compilenv.ml",
    sig    = "Compilenv_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Symbol", ## (Middle_end Symbol)
        ":Linkage_name", ## (Middle_end Linkage_name)
        ":Compilation_unit", ## (Middle_end Compilation_unit)
        ":Clambda", ## (Middle_end Clambda)
        "//utils:Warnings",
        "//stdlib:Stdlib.String",
        ## (Simple_value_approx)
        ## (Set_of_closures_id)
        "//typing:Path",
        "//utils:Misc",
        "//stdlib:Stdlib.Map",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//middle_end/flambda:Export_info",
        "//typing:Env",
        "//stdlib:Stdlib.Digest",
        "//utils:Config",
        "//file_formats:Cmx_format_cmi",
        "//middle_end/flambda/base_types:Closure_id",
        "//utils:Clflags",
        "//stdlib:Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__subpackages__",
        "//driver:__pkg__",
        "//middle_end:__subpackages__"
    ]
)

bootstrap_signature(
    name = "Compilenv_cmi",
    src  = "compilenv.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Symbol_cmi",
        ":Linkage_name_cmi",
        ":Compilation_unit_cmi",
        ":Clambda_cmi",
        ## (Simple_value_approx)
        ## (Set_of_closures_id)
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//middle_end/flambda:Export_info",
        "//stdlib:Stdlib.Digest",
        "//file_formats:Cmx_format_cmi",
        "//middle_end/flambda/base_types:Closure_id",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Convert_primitives",
    struct = "convert_primitives.ml",
    sig    = "Convert_primitives_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//lambda:Printlambda",
        "//utils:Misc",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end:__subpackages__"]
)

bootstrap_signature(
    name = "Convert_primitives_cmi",
    src  = "convert_primitives.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Internal_variable_names",
    struct = "internal_variable_names.ml",
    sig    = "Internal_variable_names_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Location",
        "//lambda:Lambda",
        "//utils:Int_replace_polymorphic_compare",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//lambda:Debuginfo",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_signature(
    name = "Internal_variable_names_cmi",
    src  = "internal_variable_names.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//lambda:Lambda_cmi"
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//middle_end/flambda:__subpackages__",
        # "//otherlibs/dynlink:__pkg__"
    ]
)

bootstrap_module(
    name   = "Linkage_name",
    struct = "linkage_name.ml",
    sig    = "Linkage_name_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.String",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Identifiable",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//middle_end/flambda:__pkg__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Linkage_name_cmi",
    src  = "linkage_name.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//utils:Identifiable_cmi"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Printclambda",
    struct = "printclambda.ml",
    sig    = "Printclambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Printclambda_primitives", ## (Middle_end Printclambda_primitives)
        ":Clambda", ## (Middle_end Clambda)
        ":Backend_var", ## (Middle_end Backend_var)
        "//stdlib:Stdlib.String",
        "//lambda:Printlambda",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//middle_end:__subpackages__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Printclambda_cmi",
    src  = "printclambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Clambda", ## (Middle_end Clambda)
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Printclambda_primitives",
    struct = "printclambda_primitives.ml",
    sig    = "Printclambda_primitives_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//middle_end:Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//lambda:Printlambda", ## (Lambda Printlambda)
        "//lambda:Lambda", ## (Lambda Lambda)
        "//lambda:Debuginfo", ## (Lambda Debuginfo)
        "//stdlib:Stdlib.Printf",
        "//typing:Primitive",
        "//stdlib:Stdlib.Format",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_signature(
    name = "Printclambda_primitives_cmi",
    src  = "printclambda_primitives.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//stdlib:Stdlib.Format",
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Semantics_of_primitives",
    struct = "semantics_of_primitives.ml",
    sig    = "Semantics_of_primitives_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end:__subpackages__"]
)

bootstrap_signature(
    name = "Semantics_of_primitives_cmi",
    src  = "semantics_of_primitives.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Clambda_primitives", ## (Middle_end Clambda_primitives)
        "//parsing:Asttypes_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Symbol",
    struct = "symbol.ml",
    sig    = "Symbol_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Variable", ## (Middle_end Variable)
        ":Linkage_name", ## (Middle_end Linkage_name)
        ":Compilation_unit", ## (Middle_end Compilation_unit)
        "//utils:Misc",
        "//utils:Int_replace_polymorphic_compare",
        "//utils:Identifiable",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//middle_end/flambda:__pkg__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Symbol_cmi",
    src  = "symbol.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Variable", ## (Middle_end Variable)
        ":Linkage_name", ## (Middle_end Linkage_name)
        ":Compilation_unit", ## (Middle_end Compilation_unit)
        "//utils:Identifiable",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Variable",
    struct = "variable.ml",
    sig    = "Variable_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Internal_variable_names", ## (Middle_end Internal_variable_names)
        ":Compilation_unit", ## (Middle_end Compilation_unit)
        ## (T)
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//utils:Int_replace_polymorphic_compare",
        "//stdlib:Stdlib.Int",
        "//utils:Identifiable",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end/flambda:__subpackages__"]
)

bootstrap_signature(
    name = "Variable_cmi",
    src  = "variable.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Internal_variable_names", ## (Middle_end Internal_variable_names)
        ":Compilation_unit", ## (Middle_end Compilation_unit)
        "//utils:Identifiable",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//middle_end/flambda:__subpackages__"]
)

