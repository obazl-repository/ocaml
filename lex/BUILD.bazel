load("//bzl:rules.bzl",
     "boot_executable",
     "boot_module",
     "bootstrap_ocamllex",
     "bootstrap_ocamlyacc",
     "boot_signature",
     "boot_library",
)

load("//config:CONFIG.bzl",
     # "OC_COMMON_CFLAGS",
     "PLATFORM_CFLAGS",
     # "ROOT_MODULE_OPTS",
     # "ROOT_SIG_OPTS"
     )

# MODULE_OPTS = OC_COMMON_CFLAGS + PLATFORM_CFLAGS + [
MODULE_OPTS = ["-strict-formats"]
# = PLATFORM_CFLAGS + [
#     "-nostdlib"
# ]

# SIG_OPTS    = OC_COMMON_CFLAGS + PLATFORM_CFLAGS + [
SIG_OPTS    =  ["-strict-formats"]
# PLATFORM_CFLAGS + [
#     "-nostdlib"
# ]
# MODULE_OPTS = ROOT_MODULE_OPTS
# SIG_OPTS = ROOT_SIG_OPTS

## HACK ALERT. There's a bug in the rules. The dependency on
## //lib:Stdlib should be added automatically, either by the toolchain
## or by the rules.
STDLIB = ["//stdlib:Stdlib"]

## Makefile.common
# Lexer generation
# BOOT_OCAMLLEX ?= $(OCAMLRUN) $(ROOTDIR)/boot/ocamllex
# Default value for OCAMLLEX
# In those directories where this needs to be overridden, the overriding
# should take place *before* Makefile.common is included.
# OCAMLLEX ?= $(BEST_OCAMLLEX)
# OCAMLLEXFLAGS ?= -q
# %.ml: %.mll
# 	$(OCAMLLEX) $(OCAMLLEXFLAGS) $<

# Parser generation
# OCAMLYACC ?= $(ROOTDIR)/yacc/ocamlyacc$(EXE)
# OCAMLYACCFLAGS ?=
# %.ml %.mli: %.mly
# 	$(OCAMLYACC) $(OCAMLYACCFLAGS) $<

## BOOT_OCAMLLEX = //boot/ocamllex is the default for this dir
# We implement it in the toolchain used by bootstrap_ocamllex


# ../boot/ocamlrun ../boot/ocamlc
# -strict-sequence -nostdlib
# -I ../boot -use-prims ../runtime/primitives
# -compat-32 -o ocamllex
# cset.cmo syntax.cmo parser.cmo lexer.cmo table.cmo
# lexgen.cmo compact.cmo common.cmo output.cmo outputbis.cmo main.cmo

# ./boot/ocamlrun ./ocamlopt
# -nostdlib -I ./stdlib -I otherlibs/dynlink
# -o lex/ocamllex.opt
# lex/cset.cmx lex/syntax.cmx lex/parser.cmx lex/lexer.cmx lex/table.cmx lex/lexgen.cmx
# lex/compact.cmx lex/common.cmx lex/output.cmx lex/outputbis.cmx lex/main.cmx

BOOT_OPTS = ["-strict-sequence", "-nostdlib", "-compat-32", "-w", "-31"]
boot_executable(
    name       = "ocamllex",
    prologue   = [":lex"],
    main       = ":Main",
    opts       = select({
        "//platforms/target:vm?" : BOOT_OPTS,
        "//platforms/target:sys?": ["-nostdlib"],
        "//conditions:default"   : BOOT_OPTS
   }),
    use_prims  = select({
        "//platforms/target:vm?" : True,
        "//platforms/target:sys?": False,
        "//conditions:default"   : True
    }),
    visibility = ["//visibility:public"]
)

boot_library(
    name = "lex",
    manifest  = [
        ":Common",
        ":Compact",
        ":Cset",
        ":Lexer",
        ":Lexgen",
        ":Output",
        ":Outputbis",
        ":Parser",
        ":Syntax",
        ":Table",
    ],
)

boot_module(
    name   = "Common",
    struct = "common.ml",
    sig    = "Common_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Syntax", ## (Lex Syntax)
        ":Lexgen", ## (Lex Lexgen)
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Bytes",
    ]
)

boot_signature(
    name = "Common_cmi",
    src  = "common.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Syntax", ## (Lex Syntax)
        ":Lexgen", ## (Lex Lexgen)
    ]
)

boot_module(
    name   = "Compact",
    struct = "compact.ml",
    sig    = "Compact_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lexgen", ## (Lex Lexgen)
        ":Table", ## (Lex Table)
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Array",
    ]
)

boot_signature(
    name = "Compact_cmi",
    src  = "compact.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Syntax_cmi", ## (Lex Syntax)
        ":Lexgen_cmi", ## (Lex Lexgen)
    ]
)

boot_module(
    name   = "Cset",
    struct = "cset.ml",
    sig    = "Cset_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Array",
    ]
)

boot_signature(
    name = "Cset_cmi",
    src  = "cset.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ]
)

boot_module(
    name   = "Lexer",
    struct = "lexer.ml",
    sig    = "Lexer_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Parser"
    ],
    visibility = ["//file_formats:__pkg__"]
)

bootstrap_ocamllex(
    name = "lexer_ml",
    out  = "lexer.ml",
    src  = "lexer.mll"
)

boot_signature(
    name = "Lexer_cmi",
    src  = "lexer.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parser"
    ]
)

boot_module(
    name   = "Lexgen",
    struct = "lexgen.ml",
    sig    = "Lexgen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Table", ## (Lex Table)
        ":Syntax", ## (Lex Syntax)
        ":Cset", ## (Lex Cset)
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Stack",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Bool",
        "//stdlib:Stdlib.Array",
    ]
)

boot_signature(
    name = "Lexgen_cmi",
    src  = "lexgen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Syntax_cmi", ## (Lex Syntax)
    ]
)

boot_module(
    name   = "Main",
    struct = "main.ml",
    sig    = "Main_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
        ":Common",
        ":Compact",
        ":Cset",
        ":Lexer",
        ":Lexgen",
        ":Output",
        ":Outputbis",
        ":Parser",
        ":Syntax",
    ]
)

boot_signature(
    name = "Main_cmi",
    src  = "main.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        # ":Syntax_cmi", ## (Lex Syntax)
        # ":Lexgen_cmi", ## (Lex Lexgen)
        # ":Compact_cmi", ## (Lex Compact)
        # ":Common_cmi", ## (Lex Common)
    ]
)

boot_module(
    name   = "Output",
    struct = "output.ml",
    sig    = "Output_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Syntax", ## (Lex Syntax)
        ":Lexgen", ## (Lex Lexgen)
        ":Compact", ## (Lex Compact)
        ":Common", ## (Lex Common)
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Array",
    ]
)

boot_signature(
    name = "Output_cmi",
    src  = "output.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Syntax_cmi", ## (Lex Syntax)
        ":Lexgen_cmi", ## (Lex Lexgen)
        ":Compact_cmi", ## (Lex Compact)
        ":Common_cmi", ## (Lex Common)
    ]
)

boot_module(
    name   = "Outputbis",
    struct = "outputbis.ml",
    sig    = "Outputbis_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Syntax", ## (Lex Syntax)
        ":Lexgen", ## (Lex Lexgen)
        ":Common", ## (Lex Common)
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Array",
    ]
)

boot_signature(
    name = "Outputbis_cmi",
    src  = "outputbis.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Syntax_cmi", ## (Lex Syntax)
        ":Lexgen_cmi", ## (Lex Lexgen)
        ":Common_cmi", ## (Lex Common)
    ]
)

boot_module(
    name   = "Parser",
    struct = "parser.ml",
    sig    = ":Parser_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Syntax",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Parsing",
        "//stdlib:Stdlib.Printf",
    ]
)

boot_signature(
    name = "Parser_cmi",
    src  = "parser.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Syntax",
        "//stdlib:Stdlib.Lexing",
    ]
)

bootstrap_ocamlyacc(
    name = "parser_ml",
    outs = ["parser.ml", "parser.mli"],
    src  = "parser.mly",
    opts = ["-v", "--strict"]
)

boot_module(
    name   = "Syntax",
    struct = "syntax.ml",
    sig    = "Syntax_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Cset", ## (Lex Cset)
    ]
)

boot_signature(
    name = "Syntax_cmi",
    src  = "syntax.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Cset_cmi", ## (Lex Cset)
    ]
)

boot_module(
    name   = "Table",
    struct = "table.ml",
    sig    = "Table_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Array",
    ]
)

boot_signature(
    name = "Table_cmi",
    src  = "table.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ]
)

