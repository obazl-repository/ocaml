load("//bzl:rules.bzl",
     "compiler_library",
     "compiler_module",
     "compiler_signature")

load("//bzl/rules:COMPILER.bzl", "OCAML_COMPILER_OPTS")

load("//tools:TOOL_RULES.bzl",
     "ocaml_tool_vm",
     "ocaml_tool_sys",
     "ocaml_tool_r")

# load("//bzl/rules:ocaml_tool.bzl",
#      "ocaml_tool_vm", "ocaml_tool_sys")

load(":BUILD_RULES.bzl", "run_ocamllex")
load("//yacc:BUILD_RULES.bzl", "yacc")

# MODULE_OPTS = OC_COMMON_CFLAGS + PLATFORM_CFLAGS + [
MODULE_OPTS = ["-strict-formats"]
# = PLATFORM_CFLAGS + [
#     "-nostdlib"
# ]

# SIG_OPTS    = OC_COMMON_CFLAGS + PLATFORM_CFLAGS + [
SIG_OPTS    =  ["-strict-formats"]
# PLATFORM_CFLAGS + [
#     "-nostdlib"
# ]
# MODULE_OPTS = ROOT_MODULE_OPTS
# SIG_OPTS = ROOT_SIG_OPTS

## HACK ALERT. There's a bug in the rules. The dependency on
## //lib:Stdlib should be added automatically, either by the toolchain
## or by the rules.
 # STDLIB = ["//stdlib:Stdlib"]

## Makefile.common
# Lexer generation
# BOOT_OCAMLLEX ?= $(OCAMLRUN) $(ROOTDIR)/boot/ocamllex
# Default value for OCAMLLEX
# In those directories where this needs to be overridden, the overriding
# should take place *before* Makefile.common is included.
# OCAMLLEX ?= $(BEST_OCAMLLEX)
# OCAMLLEXFLAGS ?= -q
# %.ml: %.mll
# 	$(OCAMLLEX) $(OCAMLLEXFLAGS) $<

# Parser generation
# OCAMLYACC ?= $(ROOTDIR)/yacc/ocamlyacc$(EXE)
# OCAMLYACCFLAGS ?=
# %.ml %.mli: %.mly
# 	$(OCAMLYACC) $(OCAMLYACCFLAGS) $<

## BOOT_OCAMLLEX = //boot/ocamllex is the default for this dir
# We implement it in the toolchain used by boot_lexer


# ../boot/ocamlrun ../boot/ocamlc
# -strict-sequence -nostdlib
# -I ../boot -use-prims ../runtime/primitives
# -compat-32 -o ocamllex
# cset.cmo syntax.cmo parser.cmo lexer.cmo table.cmo
# lexgen.cmo compact.cmo common.cmo output.cmo outputbis.cmo main.cmo

# ./boot/ocamlrun ./ocamlopt
# -nostdlib -I ./stdlib -I otherlibs/dynlink
# -o lex/ocamllex.opt
# lex/cset.cmx lex/syntax.cmx lex/parser.cmx lex/lexer.cmx lex/table.cmx lex/lexgen.cmx
# lex/compact.cmx lex/common.cmx lex/output.cmx lex/outputbis.cmx lex/main.cmx

# BOOT_OPTS = ["-strict-sequence", "-nostdlib", "-compat-32", "-w", "-31"]
# boot_executable(
#     name       = "ocamllex",
#     prologue   = [":lex"],
#     main       = ":Main",
#     opts       = select({
#         "//platform/target:vm?" : BOOT_OPTS,
#         "//platform/target:sys?": ["-nostdlib"],
#         "//conditions:default"   : BOOT_OPTS
#    }),
#     use_prims  = select({
#         "//platform/target:vm?" : True,
#         "//platform/target:sys?": False,
#         "//conditions:default"   : True
#     }),
#     visibility = ["//visibility:public"]
# )

# BOOT_OPTS = ["-strict-sequence", "-nostdlib", "-compat-32", "-w", "-31"]

# ocaml_tool_r(
#     name       = "ocamllex",
#     opts = ["-verbose"],
#     cc_linkopts = select({
#         "@platforms//os:macos": [ ## FIXME: default tc, not zig
#             # "-Wl,-v", # prints config, search paths
#             # "-Wl,-print_statistics", # -Wl,-v plus timings, mem, etc.
#             # "-t", # -Wl-v plus logs each file the linker loads.
#             # "-why_load" # Log why each object file in a static library
#             #             # is loaded. That is, what symbol was needed.
#             ## zig linker opts
#             # "-v",
#             ],
#         "@platforms//os:linux": [
#             # "-Wl,--verbose"
#             ##FIXME: depends on linker used (bfd, gold, etc.)
#         ]
#     }),
#     prologue   = [":lex"],
#     main       = ":Main",
#     # opts       = select({
#     #     "//platform/target:vm?" : BOOT_OPTS,
#     #     "//platform/target:sys?": ["-nostdlib"],
#     #     "//conditions:default"   : BOOT_OPTS
#     # }),
#     use_prims = select({
#         # "//platform/target:vm?" : True,
#         # "//platform/target:sys?": False,
#         "//conditions:default"   : True
#     }),
#     visibility = ["//visibility:public"]
# )

ocaml_tool_vm(
    name       = "ocamllex.byte",
    opts = ["-verbose"],
    cc_linkopts = select({
        "@platforms//os:macos": [ ## FIXME: default tc, not zig
            # "-Wl,-v", # prints config, search paths
            # "-Wl,-print_statistics", # -Wl,-v plus timings, mem, etc.
            # "-t", # -Wl-v plus logs each file the linker loads.
            # "-why_load" # Log why each object file in a static library
            #             # is loaded. That is, what symbol was needed.
            ## zig linker opts
            # "-v",
            ],
        "@platforms//os:linux": [
            # "-Wl,--verbose"
            ##FIXME: depends on linker used (bfd, gold, etc.)
        ]
    }),
    prologue   = [":lex"],
    main       = ":Main",
    # opts       = select({
    #     "//platform/target:vm?" : BOOT_OPTS,
    #     "//platform/target:sys?": ["-nostdlib"],
    #     "//conditions:default"   : BOOT_OPTS
    # }),
    use_prims = select({
        # "//platform/target:vm?" : True,
        # "//platform/target:sys?": False,
        "//conditions:default"   : True
    }),
    visibility = ["//visibility:public"]
)

ocaml_tool_sys(
    name       = "ocamllex.opt",
    prologue   = [":lex"],
    main       = ":Main",
    opts      = OCAML_COMPILER_OPTS,
    # opts       = select({
    #     "//platform/target:vm?" : BOOT_OPTS,
    #     "//platform/target:sys?": ["-nostdlib"],
    #     "//conditions:default"   : BOOT_OPTS
    # }),
    # use_prims = select({
    #     # "//platform/target:vm?" : True,
    #     # "//platform/target:sys?": False,
    #     "//conditions:default"   : True
    # }),
    visibility = ["//visibility:public"]
)

compiler_library(
    name = "lex",
    manifest  = [
        ":Common",
        ":Compact",
        ":Cset",
        ":Lexer",
        ":Lexgen",
        ":Output",
        ":Outputbis",
        ":Parser",
        ":Syntax",
        ":Table",
    ],
    visibility = [
        "//boot:__subpackages__",
        "//dev:__subpackages__",
        "//bin:__pkg__"
    ]
)

compiler_module(
    name   = "Common",
    struct = "common.ml",
    sig    = "Common_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Lexgen", ## (Lex Lexgen)
        ":Syntax", ## (Lex Syntax)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ]
)

compiler_signature(
    name = "Common_cmi",
    src  = "common.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Syntax_cmi",
        ":Lexgen_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi"
    ]
)

compiler_module(
    name   = "Compact",
    struct = "compact.ml",
    sig    = "Compact_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Lexgen", ## (Lex Lexgen)
        ":Table", ## (Lex Table)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
    ]
)

compiler_signature(
    name = "Compact_cmi",
    src  = "compact.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Lexgen_cmi",
        ":Syntax_cmi",
    ]
)

compiler_module(
    name   = "Cset",
    struct = "cset.ml",
    sig    = "Cset_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
    ]
)

compiler_signature(
    name = "Cset_cmi",
    src  = "cset.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi",
    ]
)

compiler_module(
    name   = "Lexer",
    struct = "lexer_ml",
    sig    = "Lexer_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Parser"
    ],
    stdlib_deps = [
        "//stdlib:Primitives"
    ],
    visibility = ["//file_formats:__pkg__"]
)

run_ocamllex(
    name = "lexer_ml",
    src  = "lexer.mll",
    out  = "lexer.ml",
)

compiler_signature(
    name = "Lexer_cmi",
    src  = "lexer.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Parser_cmi"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing_cmi"
    ]
)

compiler_module(
    name   = "Lexgen",
    struct = "lexgen.ml",
    sig    = "Lexgen_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Cset", ## (Lex Cset)
        ":Syntax", ## (Lex Syntax)
        ":Table", ## (Lex Table)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bool",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Stack",
        "//stdlib:Stdlib.String",
    ]
)

compiler_signature(
    name = "Lexgen_cmi",
    src  = "lexgen.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Syntax_cmi",
    ]
)

compiler_module(
    name   = "Main",
    struct = "main.ml",
    sig    = "Main_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Common",
        ":Compact",
        ":Cset",
        ":Lexer",
        ":Lexgen",
        ":Output",
        ":Outputbis",
        ":Parser",
        ":Syntax",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//boot:__subpackages__",
        "//dev:__subpackages__",
        "//bin:__pkg__"
    ]
)

compiler_signature(
    name = "Main_cmi",
    src  = "main.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi",
    ]
)

compiler_module(
    name   = "Output",
    struct = "output.ml",
    sig    = "Output_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Common", ## (Lex Common)
        ":Compact", ## (Lex Compact)
        ":Lexgen", ## (Lex Lexgen)
        ":Syntax", ## (Lex Syntax)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

compiler_signature(
    name = "Output_cmi",
    src  = "output.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Common_cmi",
        ":Compact_cmi",
        ":Lexgen_cmi",
        ":Syntax_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi"
    ]
)

compiler_module(
    name   = "Outputbis",
    struct = "outputbis.ml",
    sig    = "Outputbis_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Common", ## (Lex Common)
        ":Lexgen", ## (Lex Lexgen)
        ":Syntax", ## (Lex Syntax)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

compiler_signature(
    name = "Outputbis_cmi",
    src  = "outputbis.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Common_cmi",
        ":Lexgen_cmi",
        ":Syntax_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi"
    ]
)

compiler_module(
    name   = "Parser",
    struct = "parser.ml",
    sig    = ":Parser_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Syntax",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Parsing",
        "//stdlib:Stdlib.Printf",
    ]
)

compiler_signature(
    name = "Parser_cmi",
    src  = "parser.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Syntax_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing_cmi",
    ]
)

# yacc(
#     name = "parser_ml",
#     src  = "parser.mly",
#     outs = ["parser.ml", "parser.mli"],
#     opts = ["--strict", "-q"]
# )

genrule(
    name = "parser_ml",
    outs = ["parser.ml", "parser.mli"],
    srcs = ["parser.mly",
            "//yacc:ocamlyacc"
            ],
    # tools = ["//yacc:ocamlyacc"],
    cmd   = " ".join([
        # "echo PWD: $$PWD;",
        "$(execpath //yacc:ocamlyacc)",
        "--strict", "-v",
        "$(location parser.mly) > /dev/null;",
        # "echo `ls -la lex`;",
        "cp lex/parser.ml $(RULEDIR)/;",
        "cp lex/parser.mli $(RULEDIR)/;"
    ])
)

compiler_module(
    name   = "Syntax",
    struct = "syntax.ml",
    sig    = "Syntax_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Cset",
    ]
)

compiler_signature(
    name = "Syntax_cmi",
    src  = "syntax.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Cset_cmi",
    ]
)

compiler_module(
    name   = "Table",
    struct = "table.ml",
    sig    = "Table_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
    ]
)

compiler_signature(
    name = "Table_cmi",
    src  = "table.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi",
    ]
)

