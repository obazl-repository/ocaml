load("//bzl:rules.bzl",
     # "boot_archive",
     # "boot_executable",
     # "boot_library",
     "compiler_library",
     "compiler_module",
     # "bootstrap_ns",
     "compiler_signature",
)

load("//bzl/rules:ns_rules.bzl", "ns_module", "ns_signature")

MODULE_OPTS = []
SIG_OPTS    = []

################################################################
# OBJS=byte/dynlink_compilerlibs.cmo dynlink_types.cmo \
#   dynlink_platform_intf.cmo dynlink_common.cmo byte/dynlink.cmo
# COMPILERLIBS_CMO=$(COMPILERLIBS_COPIED_SOURCES:.ml=.cmo)
# COMPILERLIBS_CMX=$(COMPILERLIBS_COPIED_SOURCES:.ml=.cmx)
# $(LOCAL_SRC)/%.cmo: $(LOCAL_SRC)/%.ml
# 	$(OCAMLC) -c -for-pack Dynlink_compilerlibs $(COMPFLAGS) \
#           -I $(LOCAL_SRC) -o $@ $(LOCAL_SRC)/$*.ml
# byte/dynlink_compilerlibs.cmo: $(COMPILERLIBS_CMO)
# 	$(OCAMLC) $(COMPFLAGS) -pack -o $@ $(COMPILERLIBS_CMO)
# byte/dynlink_compilerlibs.cmi: byte/dynlink_compilerlibs.cmo
# dynlink.cma: $(OBJS)
# 	$(OCAMLC) $(COMPFLAGS) -ccopt "$(NATDYNLINKOPTS)" -a -I byte -o $@ $^
# %.cmi: %.mli

# 	$(OCAMLC) -c $(COMPFLAGS) $<
# %.cmo: %.ml
# 	$(OCAMLC) -c $(COMPFLAGS) $<

# OBJS=byte/dynlink_compilerlibs.cmo dynlink_types.cmo \
#   dynlink_platform_intf.cmo dynlink_common.cmo byte/dynlink.cmo

## OBazl build strategy
# We build dynlink_compilerlibs as an OBazl bottom-up namespace
# library, aggregating it using boot_library.
# This is passed to boot_archive along with the other modules.

# :Dynlink binds dynlink/dynlink.mli to either dynlink/byte/dynlink.ml
# or dynlink/native/dynlink.ml.

# macos make log:
# ../../ocamlc.opt -nostdlib -I ../../stdlib -g -c -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +A -bin-annot -strict-formats -I byte dynlink_types.mli


compiler_library(
    name = "dynlink",
    cmxa_eligible = True,
    manifest  = [
        ":Dynlink",             # selected, byte or native
        ":Dynlink_common",
        ":Dynlink_platform_intf",
        ":Dynlink_types",
    ] + select({
        ":pack_dynlink":  [":compilerlibs_packed"],
        "//conditions:default"   :  [":compilerlibs"],
    }),
    visibility = [
        "//debugger:__pkg__",
        "//testsuite/tests:__subpackages__"
    ]
)


# COMPILERLIBS_INTFS=\
#   parsing/asttypes.mli \
#   parsing/parsetree.mli \
#   typing/outcometree.mli \
#   file_formats/cmo_format.mli \
#   file_formats/cmxs_format.mli


config_setting(
    name = "pack_dynlink",
    flag_values = {"//config/pack:dynlink" : "True"},
)

##########################################################
################  non-namespaced modules  ################

# dynamically configured module binding
compiler_module(
    name   = "Dynlink",
    struct = select({
        # "//platform/constraints/ocaml/emitter:vm_emitter?":
        "//config/target/emitter:boot_emitter?":
        "//otherlibs/dynlink/byte:dynlink.ml",

        "//config/target/emitter:vm_emitter?":
        "//otherlibs/dynlink/byte:dynlink.ml",

        # "//platform/constraints/ocaml/emitter:sys_emitter?":
        "//config/target/emitter:sys_emitter?":
        "//otherlibs/dynlink/native:dynlink.ml",
    }),
    sig    = "Dynlink_cmi",
    opts = MODULE_OPTS,
    sig_deps = [
        "Dynlink_compilerlibs.Cmo_format_cmi",
        ## if emitter == sys
        ":Dynlink_compilerlibs.Cmxs_format_cmi",
    ],
    deps   = [
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_common",
        ":Dynlink_types",
    ] + select({
        # "//platform/constraints/ocaml/emitter:vm_emitter?": [
        "//config/target/executor:boot_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            # "//bytecomp:Dll",
            # "//bytecomp:Meta",
            "Dynlink_compilerlibs.Opcodes",
            "Dynlink_compilerlibs.Symtable",
            # "//file_formats:Cmo_format_cmi",
            # "//typing:Ident",
            "Dynlink_compilerlibs.Misc",
            ## (LongString)
        ],
        "//config/target/executor:vm_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            # "//bytecomp:Dll",
            # "//bytecomp:Meta",
            # "//bytecomp:Opcodes",
            "Dynlink_compilerlibs.Opcodes",
            # "//bytecomp:Symtable",
            "Dynlink_compilerlibs.Symtable",
            # "//file_formats:Cmo_format_cmi",
            "//typing:Ident",
            "Dynlink_compilerlibs.Misc",
            ## (LongString)
        ],
        # "//platform/constraints/ocaml/emitter:sys_emitter?": [
        "//config/target/executor:sys_executor?": [
        # "//toolchain/target/executor:sys_executor?": [
            ":Dynlink_compilerlibs.Cmxs_format_cmi",
            # "//stdlib:Stdlib.Filename",
        ]
    # }) + select({
    #     ":pack_dynlink":  [":compilerlibs_packed"],
    #     "//conditions:default"   :  [":compilerlibs"],
    # }),
    }),
    stdlib_deps   = [
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
    ] + select({
        # "//platform/constraints/ocaml/emitter:vm_emitter?": [
        "//config/target/executor:boot_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            "//stdlib:Stdlib.Char",
            "//stdlib:Stdlib.String",
            "//stdlib:Stdlib.Sys",
        ],
        "//config/target/executor:vm_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            "//stdlib:Stdlib.Char",
            "//stdlib:Stdlib.String",
            "//stdlib:Stdlib.Sys",
        ],
        # "//platform/constraints/ocaml/emitter:sys_emitter?": [
        "//config/target/executor:sys_executor?": [
        # "//toolchain/target/executor:sys_executor?": [

        ]
    }),
)

compiler_signature(
    name = "Dynlink_cmi",
    src  = "dynlink.mli",
    opts = SIG_OPTS,
    deps   = select({
        # "//platform/constraints/ocaml/emitter:vm_emitter?": [
        "//config/target/executor:boot_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            "//file_formats:Cmo_format_cmi",
            ":Dynlink_compilerlibs.Config_cmi",
            ":Dynlink_common_cmi",
            ":Dynlink_types_cmi",
        ],
        "//config/target/executor:vm_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            "//file_formats:Cmo_format_cmi",
            ":Dynlink_compilerlibs.Config_cmi",
            ":Dynlink_common_cmi",
            ":Dynlink_types_cmi",
        ],
        # "//platform/constraints/ocaml/executor:sys_executor?": [
        "//config/target/executor:sys_executor?": [
        # "//toolchain/target/executor:sys_executor?": [
            ":Dynlink_compilerlibs.Cmxs_format_cmi",
            # "//file_formats:Cmxs_format_cmi",
        ]
    }),
    stdlib_deps = [
        "//stdlib:Stdlib.Obj_cmi",
    ] + select({
        # "//platform/constraints/ocaml/emitter:vm_emitter?": [
        "//config/target/executor:boot_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            "//stdlib:Stdlib.Digest_cmi",
            "//stdlib:Stdlib.Filename_cmi",
            "//stdlib:Stdlib.List_cmi",
            "//stdlib:Stdlib.Printexc_cmi",
        ],
        "//config/target/executor:vm_executor?": [
        # "//toolchain/target/executor:vm_executor?": [
            "//stdlib:Stdlib.Digest_cmi",
            "//stdlib:Stdlib.Filename_cmi",
            "//stdlib:Stdlib.List_cmi",
            "//stdlib:Stdlib.Printexc_cmi",
        ],
        # "//platform/constraints/ocaml/executor:sys_executor?": [
        "//config/target/executor:sys_executor?": [
        # "//toolchain/target/executor:sys_executor?": [
            # ":Dynlink_compilerlibs.Cmxs_format_cmi",
            # "//file_formats:Cmxs_format_cmi",
        ]
    }),
    visibility = ["//debugger:__pkg__"]
)

#################
compiler_module(
    name   = "Dynlink_common",
    struct = "dynlink_common.ml",
    sig    = "Dynlink_common_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_platform_intf",
        ":Dynlink_types",
        ":Dynlink_compilerlibs.Misc"
    # ] + select({
    #     ":pack_dynlink"        :  [":compilerlibs_packed"],
    #     "//conditions:default" :  [":compilerlibs"],
    # }),
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest",
        # "//stdlib:Stdlib.Filename",
        # "//stdlib:Stdlib.Format",
        # "//stdlib:Stdlib.Lazy",
        # "//stdlib:Stdlib.List",
        # "//stdlib:Stdlib.Map",
        # "//stdlib:Stdlib.Printf",
        # "//stdlib:Stdlib.Set",
        # "//stdlib:Stdlib.Sys",
    ],
)

compiler_signature(
    name = "Dynlink_common_cmi",
    src  = "dynlink_common.mli",
    opts = SIG_OPTS,
    struct_deps   = [
        ":Dynlink_platform_intf",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Obj_cmi",
    ],
)

#################
compiler_module(
    name   = "Dynlink_platform_intf",
    struct = "dynlink_platform_intf.ml",
    # sig = "Dynlink_platform_intf_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_types", ## (Otherlibs Dynlink Dynlink_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Mutex",
        "//stdlib:Stdlib.Obj",
    ],
)

## WARNING: same file is used as both .ml and .mli!
# compiler_signature(
#     name = "Dynlink_platform_intf_cmi",
#     src  = "dynlink_platform_intf.ml",
#     opts = SIG_OPTS,
#     deps   = [
#         ":Dynlink_types_cmi",
#     ],
#     stdlib_deps = [
#         # "//stdlib:Stdlib.Obj_cmi",
#         "//stdlib:Stdlib.Digest_cmi",
#         "//stdlib:Stdlib.Mutex_cmi",
#         "//stdlib:Stdlib.Obj_cmi",
#     ],
# )

#################
compiler_module(
    name   = "Dynlink_types",
    struct = "dynlink_types.ml",
    sig    = "Dynlink_types_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        # "//stdlib:Stdlib",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
    ]
)

compiler_signature(
    name = "Dynlink_types_cmi",
    src  = "dynlink_types.mli",
    opts = SIG_OPTS,
    stdlib_deps = ["//stdlib:Stdlib_cmi"]
)

#################
# $(extract_crc): dynlink.cma byte/dynlink_compilerlibs.cmo extract_crc.cmo
# 	$(OCAMLC) -o $@ $^
## NB: dynlink.cma already contains byte/dynlink_compilerlibs.cmo??

## https://github.com/ocaml/ocaml/pull/11766:
# This tool is no longer installed and we don't use it in the build
# system or testsuite either, so if there is no real need to keep it I'd
# suggest to get rid of it.

# boot_executable(
#     name = "extract_crc",
#     main = ":Extract_crc",
#     opts = ["-nostdlib"],
#     prologue = [":dynlink"]
# )

# compiler_module(
#     name   = "Extract_crc",
#     struct = "extract_crc.ml",
#     sig    = "extract_crc.mli",  ##FIXME: use cmi
#     opts = MODULE_OPTS,
#     deps   = [
#         # makefile exposes this via '-I byte'
#     # ] + select({
#     #     ":pack_dynlink":  [":compilerlibs_packed"],
#     #     "//conditions:default"   :  [":compilerlibs"],
#     # }),
#     ]
# )

#########################################################
################  dynlink_compilerlibs  ################

## since we're in pkg dynlink, "dynlink_compilerlibs" would be
## redundant. This gives us "//otherlibs/dynlink:compilerlibs"
## (private).
# boot_library(
compiler_library(
    visibility = ["//visibility:private"],
    name       = "compilerlibs",
    ## cm_name not needed for std lib, it does not compile anything
    ## cm_name    = "compilerlibs",
    manifest   = [
        ":Dynlink_compilerlibs",
        ":Dynlink_compilerlibs.Arg_helper",
        ":Dynlink_compilerlibs.Ast_helper",
        ":Dynlink_compilerlibs.Ast_mapper",
        ":Dynlink_compilerlibs.Attr_helper",
        ":Dynlink_compilerlibs.Binutils",
        ":Dynlink_compilerlibs.Btype",
        ":Dynlink_compilerlibs.Build_path_prefix_map",
        ":Dynlink_compilerlibs.Builtin_attributes",
        ":Dynlink_compilerlibs.Bytesections",
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Cmi_format",
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Consistbl",
        ":Dynlink_compilerlibs.Datarepr",
        ":Dynlink_compilerlibs.Debuginfo",
        ":Dynlink_compilerlibs.Dll",
        ":Dynlink_compilerlibs.Docstrings",
        ":Dynlink_compilerlibs.Env",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Identifiable",
        ":Dynlink_compilerlibs.Instruct",
        ":Dynlink_compilerlibs.Int_replace_polymorphic_compare",
        ":Dynlink_compilerlibs.Lambda",
        ":Dynlink_compilerlibs.Lazy_backtrack",
        ":Dynlink_compilerlibs.Load_path",
        ":Dynlink_compilerlibs.Local_store",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Longident",
        ":Dynlink_compilerlibs.Meta",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Numbers",
        ":Dynlink_compilerlibs.Opcodes",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Persistent_env",
        ":Dynlink_compilerlibs.Predef",
        ":Dynlink_compilerlibs.Primitive",
        ":Dynlink_compilerlibs.Profile",
        ":Dynlink_compilerlibs.Runtimedef",
        ":Dynlink_compilerlibs.Shape",
        ":Dynlink_compilerlibs.Subst",
        ":Dynlink_compilerlibs.Symtable",
        ":Dynlink_compilerlibs.Syntaxerr",
        ":Dynlink_compilerlibs.Terminfo",
        ":Dynlink_compilerlibs.Type_immediacy",
        ":Dynlink_compilerlibs.Types",
        ":Dynlink_compilerlibs.Warnings",
    ],
)

## resolver
compiler_module(
    name   = "Dynlink_compilerlibs",
    struct = "dynlink_compilerlibs.ml",
    opts = MODULE_OPTS + [
        "-no-alias-deps",
        "-w", "-49",
    ],
    stdlib_deps   = ["//stdlib:Stdlib"]
)

################################################################
ns_module(
    name   = "Dynlink_compilerlibs.Arg_helper",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:arg_helper.ml",
    sig    = ":Dynlink_compilerlibs.Arg_helper_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Arg_helper_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:arg_helper.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Map_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Ast_helper",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:ast_helper.ml",
    sig    = ":Dynlink_compilerlibs.Ast_helper_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Docstrings",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Longident",
        ":Dynlink_compilerlibs.Syntaxerr",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Ast_helper_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:ast_helper.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Docstrings_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Longident_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Ast_mapper",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:ast_mapper.ml",
    sig    = ":Dynlink_compilerlibs.Ast_mapper_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Load_path",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Ast_helper",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Longident",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Ast_mapper_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:ast_mapper.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Longident_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Asttypes_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:asttypes.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Location_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Attr_helper",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:attr_helper.ml",
    sig    = ":Dynlink_compilerlibs.Attr_helper_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Location",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Attr_helper_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:attr_helper.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Longident_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Binutils",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:binutils.ml",
    sig    = "Dynlink_compilerlibs.Binutils_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Binutils_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:binutils.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Result_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Btype",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:btype.ml",
    sig    = ":Dynlink_compilerlibs.Btype_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Local_store",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Types",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Btype_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:btype.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Path_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
    ],
    stdlib_deps = ["//stdlib:Stdlib.Set_cmi"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Build_path_prefix_map",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:build_path_prefix_map.ml",
    sig    = "Dynlink_compilerlibs.Build_path_prefix_map_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Build_path_prefix_map_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:build_path_prefix_map.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Result_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Builtin_attributes",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:builtin_attributes.ml",
    sig    = ":Dynlink_compilerlibs.Builtin_attributes_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Warnings",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Longident",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Builtin_attributes_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:builtin_attributes.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Longident_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Bytesections",
    ns     = ":Dynlink_compilerlibs",
    struct = "//bytecomp:bytesections.ml",
    sig    = ":Dynlink_compilerlibs.Bytesections_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Config"
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.List",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Bytesections_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//bytecomp:bytesections.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Out_channel_cmi"
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Clflags",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:clflags.ml",
    sig    = ":Dynlink_compilerlibs.Clflags_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Arg_helper",
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Numbers",
        ":Dynlink_compilerlibs.Profile",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Clflags_cmi",
    ns   = ":Dynlink_compilerlibs",
    src  = "//utils:clflags.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc_cmi",
        ":Dynlink_compilerlibs.Profile_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Arg_cmi",
        "//stdlib:Stdlib.Digest_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Cmi_format",
    ns     = ":Dynlink_compilerlibs",
    struct = "//file_formats:cmi_format.ml",
    sig    = ":Dynlink_compilerlibs.Cmi_format_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Types",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Cmi_format_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//file_formats:cmi_format.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Cmo_format_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//file_formats:cmo_format.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc_cmi",
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Lambda_cmi"
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Cmxs_format_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//file_formats:cmxs_format.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest_cmi"
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Config",
    ns     = ":Dynlink_compilerlibs",
    struct = "//config:config_ml",
    sig    = ":Dynlink_compilerlibs.Config_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [ # [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys"
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Config_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//config:config.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.List_cmi",
        "//stdlib:Stdlib.Printf_cmi",
        "//stdlib:Stdlib.String_cmi",
        "//stdlib:Stdlib.Sys_cmi"
    ],
)

ns_module(
    name   = "Dynlink_compilerlibs.Consistbl",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:consistbl.ml",
    sig    = ":Dynlink_compilerlibs.Consistbl_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Digest",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Consistbl_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:consistbl.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Set_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Digest_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Debuginfo",
    ns     = ":Dynlink_compilerlibs",
    struct = "//lambda:debuginfo.ml",
    sig    = ":Dynlink_compilerlibs.Debuginfo_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Int_replace_polymorphic_compare",
        ":Dynlink_compilerlibs.Location",
    ],
    sig_deps = [":Dynlink_compilerlibs.Asttypes_cmi"],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Debuginfo_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//lambda:debuginfo.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Ident_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Docstrings",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:docstrings.ml",
    sig    = ":Dynlink_compilerlibs.Docstrings_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Warnings",
        ":Dynlink_compilerlibs.Location",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Docstrings_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:docstrings.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Longident_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Lazy_cmi",
        "//stdlib:Stdlib.Lexing_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Dll",
    ns     = ":Dynlink_compilerlibs",
    struct = "//bytecomp:dll.ml",
    sig    = ":Dynlink_compilerlibs.Dll_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Binutils",
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Dll_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//bytecomp:dll.mli",
    opts = SIG_OPTS,
)

ns_module(
    name   = "Dynlink_compilerlibs.Env",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:env.ml",
    sig    = ":Dynlink_compilerlibs.Env_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Btype",
        ":Dynlink_compilerlibs.Builtin_attributes",
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Cmi_format",
        ":Dynlink_compilerlibs.Datarepr",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Lazy_backtrack",
        ":Dynlink_compilerlibs.Load_path",
        ":Dynlink_compilerlibs.Local_store",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Longident",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Persistent_env",
        ":Dynlink_compilerlibs.Predef",
        ":Dynlink_compilerlibs.Shape",
        ":Dynlink_compilerlibs.Subst",
        ":Dynlink_compilerlibs.Types",
        ":Dynlink_compilerlibs.Warnings",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Seq",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Env_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:env.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Cmi_format_cmi",
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Load_path_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Longident_cmi",
        ":Dynlink_compilerlibs.Misc_cmi",
        ":Dynlink_compilerlibs.Path_cmi",
        ":Dynlink_compilerlibs.Subst_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
        ":Dynlink_compilerlibs.Warnings_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.String_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Datarepr",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:datarepr.ml",
    sig    = ":Dynlink_compilerlibs.Datarepr_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Btype",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Types",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Datarepr_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:datarepr.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Types_cmi",
        ":Dynlink_compilerlibs.Path_cmi",
        ":Dynlink_compilerlibs.Ident_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Ident",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:ident.ml",
    sig    = ":Dynlink_compilerlibs.Ident_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Identifiable",
        ":Dynlink_compilerlibs.Local_store",
        ":Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Ident_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:ident.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Identifiable_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Identifiable",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:identifiable.ml",
    sig    = ":Dynlink_compilerlibs.Identifiable_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Identifiable_cmi",
    ns   = ":Dynlink_compilerlibs",
    src  = "//utils:identifiable.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ],
)

ns_module(
    name   = "Dynlink_compilerlibs.Instruct",
    ns     = ":Dynlink_compilerlibs",
    struct = "//bytecomp:instruct.ml",
    sig    = ":Dynlink_compilerlibs.Instruct_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Env",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Lambda",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Subst",
        ":Dynlink_compilerlibs.Types",
    ],
    stdlib_deps = ["//stdlib:Primitives"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Int_replace_polymorphic_compare",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:int_replace_polymorphic_compare.ml",
    sig    = ":Dynlink_compilerlibs.Int_replace_polymorphic_compare_cmi",
    opts = MODULE_OPTS,
)

ns_signature(
    name = "Dynlink_compilerlibs.Int_replace_polymorphic_compare_cmi",
    ns   = ":Dynlink_compilerlibs",
    src  = "//utils:int_replace_polymorphic_compare.mli",
    opts = SIG_OPTS,
)

ns_signature(
    name = "Dynlink_compilerlibs.Instruct_cmi",
    ns   = ":Dynlink_compilerlibs",
    src  = "//bytecomp:instruct.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Env_cmi",
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Lambda_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Subst_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
    ],
    stdlib_deps = ["//stdlib:Primitives_cmi"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Lambda",
    ns     = ":Dynlink_compilerlibs",
    struct = "//lambda:lambda.ml",
    sig    = "Dynlink_compilerlibs.Lambda_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Debuginfo",
        ":Dynlink_compilerlibs.Env",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Longident",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Primitive",
        ":Dynlink_compilerlibs.Types",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Lambda_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//lambda:lambda.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Debuginfo_cmi",
        ":Dynlink_compilerlibs.Env_cmi",
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Path_cmi",
        ":Dynlink_compilerlibs.Primitive_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
    ],
    stdlib_deps = ["//stdlib:Primitives_cmi"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Lazy_backtrack",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:lazy_backtrack.ml",
    sig    = ":Dynlink_compilerlibs.Lazy_backtrack_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Either",
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Lazy_backtrack_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:lazy_backtrack.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Either_cmi",
    ],
)

ns_module(
    name   = "Dynlink_compilerlibs.Load_path",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:load_path.ml",
    sig    = ":Dynlink_compilerlibs.Load_path_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Local_store",
        ":Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Load_path_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:load_path.mli",
    opts = SIG_OPTS,
)

ns_module(
    name   = "Dynlink_compilerlibs.Local_store",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:local_store.ml",
    sig    = ":Dynlink_compilerlibs.Local_store_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.List",
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Local_store_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:local_store.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Hashtbl_cmi"
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Location",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:location.ml",
    sig    = ":Dynlink_compilerlibs.Location_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Build_path_prefix_map",
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Terminfo",
        ":Dynlink_compilerlibs.Warnings",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Parsing",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Location_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:location.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Warnings_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Buffer_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Lexing_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Longident",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:longident.ml",
    sig    = ":Dynlink_compilerlibs.Longident_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Longident_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:longident.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi"
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Meta",
    ns     = ":Dynlink_compilerlibs",
    struct = "//bytecomp:meta.ml",
    sig    = ":Dynlink_compilerlibs.Meta_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Instruct",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Obj",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Meta_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//bytecomp:meta.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Instruct_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Obj_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Misc",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:misc.ml",
    sig    = "Dynlink_compilerlibs.Misc_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Build_path_prefix_map",
        ":Dynlink_compilerlibs.Config",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Misc_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:misc.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Build_path_prefix_map_cmi",
        ":Dynlink_compilerlibs.Config_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
        "//stdlib:Stdlib.String_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Numbers",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:numbers.ml",
    sig    = ":Dynlink_compilerlibs.Numbers_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Identifiable",
        ":Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Numbers_cmi",
    ns   = ":Dynlink_compilerlibs",
    src  = "//utils:numbers.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Identifiable_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Int64_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Opcodes",
    ns     = ":Dynlink_compilerlibs",
    struct = "//bytecomp:opcodes.ml",
    opts = MODULE_OPTS + ["-open", "Stdlib"],
    stdlib_deps = ["//stdlib:Stdlib"]
)

ns_signature(
    name = "Dynlink_compilerlibs.Outcometree_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:outcometree.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Type_immediacy_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Parsetree_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:parsetree.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Longident_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Path",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:path.ml",
    sig    = ":Dynlink_compilerlibs.Path_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Path_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:path.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Persistent_env",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:persistent_env.ml",
    sig    = ":Dynlink_compilerlibs.Persistent_env_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Cmi_format",
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Consistbl",
        ":Dynlink_compilerlibs.Lazy_backtrack",
        ":Dynlink_compilerlibs.Load_path",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Warnings",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Persistent_env_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:persistent_env.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Cmi_format_cmi",
        ":Dynlink_compilerlibs.Consistbl_cmi",
        ":Dynlink_compilerlibs.Lazy_backtrack_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Misc_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Predef",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:predef.ml",
    sig    = ":Dynlink_compilerlibs.Predef_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ast_helper",
        ":Dynlink_compilerlibs.Btype",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Shape",
        ":Dynlink_compilerlibs.Type_immediacy",
        ":Dynlink_compilerlibs.Types",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.List",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Predef_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:predef.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Path_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Primitive",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:primitive.ml",
    sig    = ":Dynlink_compilerlibs.Primitive_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Attr_helper",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Misc",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Outcometree_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Primitive_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:primitive.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
        ":Dynlink_compilerlibs.Outcometree_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Profile",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:profile.ml",
    sig    = ":Dynlink_compilerlibs.Profile_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Float",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Profile_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:profile.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Runtimedef",
    ns     = ":Dynlink_compilerlibs",
    struct = "//lambda:runtimedef.ml",
    sig    = ":Dynlink_compilerlibs.Runtimedef_cmi",
    opts = MODULE_OPTS,
)

ns_signature(
    name = "Dynlink_compilerlibs.Runtimedef_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//lambda:runtimedef.mli",
    opts = SIG_OPTS,
)

ns_module(
    name   = "Dynlink_compilerlibs.Shape",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:shape.ml",
    sig    = ":Dynlink_compilerlibs.Shape_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Identifiable",
        ":Dynlink_compilerlibs.Path",
    ],
    stdlib_deps = ["//stdlib:Primitives"]
)

ns_signature(
    name = "Dynlink_compilerlibs.Shape_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:shape.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Path_cmi"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Map_cmi",
    ],
)

ns_module(
    name   = "Dynlink_compilerlibs.Subst",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:subst.ml",
    sig    = ":Dynlink_compilerlibs.Subst_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ast_mapper",
        ":Dynlink_compilerlibs.Btype",
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Lazy_backtrack",
        ":Dynlink_compilerlibs.Local_store",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Types",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Subst_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:subst.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Location_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
        ":Dynlink_compilerlibs.Path_cmi",
        ":Dynlink_compilerlibs.Types_cmi",
    ],
    stdlib_deps = ["//stdlib:Primitives_cmi"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Symtable",
    ns     = ":Dynlink_compilerlibs",
    struct = "//bytecomp:symtable.ml",
    sig    = ":Dynlink_compilerlibs.Symtable_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Bytesections",
        ":Dynlink_compilerlibs.Clflags",
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Dll",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Meta",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Predef",
        ":Dynlink_compilerlibs.Runtimedef",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Cmo_format_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Symtable_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//bytecomp:symtable.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Cmo_format_cmi",
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Misc_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Obj_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Syntaxerr",
    ns     = ":Dynlink_compilerlibs",
    struct = "//parsing:syntaxerr.ml",
    sig    = ":Dynlink_compilerlibs.Syntaxerr_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Location",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Syntaxerr_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//parsing:syntaxerr.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Location_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Dynlink_compilerlibs.Terminfo",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:terminfo.ml",
    sig    = ":Dynlink_compilerlibs.Terminfo_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Printf",
    ],
)

ns_signature(
    name = "Dynlink_compilerlibs.Terminfo_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:terminfo.mli",
    opts = SIG_OPTS,
    stdlib_deps   = ["//stdlib:Stdlib.Out_channel_cmi"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Types",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:types.ml",
    sig    = ":Dynlink_compilerlibs.Types_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Config",
        ":Dynlink_compilerlibs.Ident",
        ":Dynlink_compilerlibs.Identifiable",
        ":Dynlink_compilerlibs.Local_store",
        ":Dynlink_compilerlibs.Location",
        ":Dynlink_compilerlibs.Longident",
        ":Dynlink_compilerlibs.Misc",
        ":Dynlink_compilerlibs.Path",
        ":Dynlink_compilerlibs.Primitive",
        ":Dynlink_compilerlibs.Shape",
        ":Dynlink_compilerlibs.Type_immediacy",
    ],
    sig_deps = [
        ":Dynlink_compilerlibs.Asttypes_cmi",
        ":Dynlink_compilerlibs.Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Types_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:types.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Ident_cmi",
        ":Dynlink_compilerlibs.Path_cmi",
        ":Dynlink_compilerlibs.Primitive_cmi",
        ":Dynlink_compilerlibs.Shape_cmi",
        ":Dynlink_compilerlibs.Type_immediacy_cmi",
    ],
    stdlib_deps = ["//stdlib:Primitives_cmi"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Type_immediacy",
    ns     = ":Dynlink_compilerlibs",
    struct = "//typing:type_immediacy.ml",
    sig    = ":Dynlink_compilerlibs.Type_immediacy_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Builtin_attributes"
    ],
    stdlib_deps = ["//stdlib:Primitives"]
)

ns_signature(
    name = "Dynlink_compilerlibs.Type_immediacy_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//typing:type_immediacy.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Dynlink_compilerlibs.Parsetree_cmi"
    ],
    stdlib_deps = ["//stdlib:Primitives_cmi"]
)

ns_module(
    name   = "Dynlink_compilerlibs.Warnings",
    ns     = ":Dynlink_compilerlibs",
    struct = "//utils:warnings.ml",
    sig    = ":Dynlink_compilerlibs.Warnings_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "Dynlink_compilerlibs.Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Dynlink_compilerlibs.Warnings_cmi",
    ns     = ":Dynlink_compilerlibs",
    src  = "//utils:warnings.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Lazy_cmi",
        "//stdlib:Stdlib.Lexing_cmi",
        "//stdlib:Stdlib.Sys_cmi",
    ]
)

#########################################################
################  packed module version  ################
# ../../ocamlc.opt -g -nostdlib -I ../../stdlib -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48-66-70 -warn-error +A -bin-annot -safe-string -strict-formats -I byte -pack -o byte/dynlink_compilerlibs.cmo

## Status: builds, but won't link into dynlink.cma

# boot_library(
# compiler_library(
#     name       = "compilerlibs_packed",
#     pack_ns    = "Dynlink_compilerlibs_packed",
#     visibility = ["//visibility:private"],
#     opts       = MODULE_OPTS,
#     # stdlib     = "//stdlib",
#     manifest   = [
#         "//bytecomp:Bytesections_cmi",
#         "//bytecomp:Bytesections",
#         "//bytecomp:Dll",
#         "//bytecomp:Dll_cmi",
#         "//bytecomp:Instruct",
#         "//bytecomp:Instruct_cmi",
#         "//bytecomp:Meta",
#         "//bytecomp:Meta_cmi",
#         "//bytecomp:Opcodes",
#         "//bytecomp:Symtable",
#         "//bytecomp:Symtable_cmi",

#         "//file_formats:Cmi_format",
#         "//file_formats:Cmo_format_cmi",
#         "//file_formats:Cmxs_format_cmi",

#         "//lambda:Debuginfo",
#         "//lambda:Lambda",
#         "//lambda:Runtimedef",

#         "//parsing:Ast_helper",
#         "//parsing:Ast_mapper",
#         "//parsing:Asttypes_cmi",
#         "//parsing:Attr_helper",
#         "//parsing:Builtin_attributes",
#         "//parsing:Docstrings",
#         "//parsing:Location",
#         "//parsing:Longident",
#         "//parsing:Parsetree_cmi",
#         "//parsing:Syntaxerr",

#         "//typing:Btype",
#         "//typing:Datarepr",
#         "//typing:Env",
#         "//typing:Ident",
#         "//typing:Outcometree_cmi",
#         "//typing:Path",
#         "//typing:Persistent_env",
#         "//typing:Predef",
#         "//typing:Primitive",
#         "//typing:Shape",
#         "//typing:Subst",
#         "//typing:Type_immediacy",
#         "//typing:Types",

#         "//utils:Arg_helper",
#         "//utils:Binutils",
#         "//utils:Build_path_prefix_map",
#         "//utils:Clflags",
#         "//config:Config",
#         "//utils:Consistbl",
#         "//utils:Identifiable",
#         "//utils:Int_replace_polymorphic_compare",
#         "//utils:Lazy_backtrack",
#         "//utils:Load_path",
#         "//utils:Local_store",
#         "//utils:Misc",
#         "//utils:Numbers",
#         "//utils:Profile",
#         "//utils:Terminfo",
#         "//utils:Warnings",
#     ]
# )
