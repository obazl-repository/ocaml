load("//bzl:rules.bzl",
     "boot_library",
     "compiler_library",
     "compiler_module",
     "compiler_signature",
)

MODULE_OPTS = ["-nostdlib"]
SIG_OPTS = ["-nostdlib"]

compiler_library(
    name = "unix_lib",
    manifest  = [
        ":Unix",
        ":UnixLabels",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//ocamltest:__pkg__"
    ]
)

compiler_module(
    name   = "Unix",
    struct = select({
        "//platform/os:windows?": "unix_win32.ml",
        "//conditions:default":   "unix_unix.ml"
    }),
    sig    = "Unix_cmi",
    opts = MODULE_OPTS,
    cc_deps   = [
       ":unix", ## cc_library
    ],
    # cc_deps = [
    # ]
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Callback",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//debugger:__pkg__"
    ]
)

compiler_signature(
    name = "Unix_cmi",
    src  = "unix.mli",
    opts = SIG_OPTS,
    stdlib_deps = ["//stdlib:Stdlib.Bigarray_cmi"],
    visibility = [
        "//debugger:__pkg__",
        "//otherlibs/systhreads:__pkg__"
    ]
)

compiler_module(
    name   = "UnixLabels",
    struct = "unixLabels.ml",
    # sig    = "unixLabels.mli",
    sig    = "UnixLabels_cmi",
    opts = MODULE_OPTS + [
        "-nolabels" # ignore labels in the cmi file
    ],
    deps   = [
        ":Unix",
    ],
)

compiler_signature(
    name = "UnixLabels_cmi",
    src  = "unixLabels.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Unix_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.In_channel_cmi",
    ],
)

# unixLabels.cmi: \
#   EXTRACAMLFLAGS += -pp "$(AWK) -f $(ROOTDIR)/stdlib/expand_module_aliases.awk"

genrule(
    name = "unixLabels_mli_awk",
    outs = ["unixLabels.mli"],
    srcs = ["unixLabels.raw.mli",
            "//stdlib:expand_module_aliases.awk"],
    cmd_bash  = " ".join([
        "awk -f $(location //stdlib:expand_module_aliases.awk)",
        "$(location :unixLabels.raw.mli)",
        "> $@"
    ]),
)

################################################################
filegroup(
    name = "common_c_sources",
    srcs = [
        "access.c", "addrofstr.c", "chdir.c", "chmod.c",
        "cst2constr.c", "cst2constr.h",
        "cstringv.c", "execv.c", "execve.c",
        "execvp.c", "fsync.c", "mkdir.c", "exit.c",
        "getaddrinfo.c", "getcwd.c", "gethost.c", "gethostname.c",
        "getnameinfo.c", "getproto.c", "getserv.c", "gmtime.c",
        "mmap_ba.c", "putenv.c", "rmdir.c", "socketaddr.c",
        "strofaddr.c", "time.c", "unlink.c"
    ]
)

filegroup(
    name = "unix_sources",
    srcs = glob(["*_unix.c"]) + [
        "nanosecond_stat.h",
        "alarm.c", "chown.c", "chroot.c", "closedir.c", "dup2.c",
        "fchmod.c", "fchown.c", "fcntl.c", "fork.c", "ftruncate.c",
        "getegid.c", "geteuid.c", "getgid.c", "getgr.c",
        "getgroups.c", "getlogin.c", "getppid.c", "getpw.c",
        "getuid.c", "initgroups.c", "itimer.c", "kill.c",
        "mkfifo.c", "nice.c", "opendir.c", "readdir.c",
        "rewinddir.c", "setgid.c", "setgroups.c", "setsid.c",
        "setuid.c", "signals.c", "spawn.c", "termios.c",
        "umask.c", "wait.c"
    ]
)

filegroup(
    name = "win32_sources",
    srcs = glob(["*_win32.c"]) + [
        "close_on.c", "createprocess.c", "nonblock.c",
        "startup.c", "system.c", "windbug.c", "windir.c",
        "winlist.c", "winwait.c", "winworker.c"
    ]
)

## make log:
# gcc -c -O2 -fno-strict-aliasing -fwrapv -pthread -g -Wall -Werror -fno-common -g
# -I../../runtime
# -D_FILE_OFFSET_BITS=64  -DCAML_BUILDING_UNIX
# -o chown.o chown.c

## WARNING: on macos, this produces libunix.a; on linux: libunix.a,
## libunix.so
cc_library(
    name = "unix",
    linkstatic = True, # for now
    # features = ["-pic"],  ## no effect?
    srcs = [
        "common_c_sources",
        "unix_sources"
    ],
    hdrs = ["unixsupport.h", "socketaddr.h"],
    deps = [
        "//runtime/caml:hdrs",
        "//runtime/caml:domain_state_h",
        "//runtime/caml:fail_h",
    ],
    copts= [
        "-Iruntime",
        "-Iruntime/caml",
        "-I$(GENDIR)/runtime",
        "-I$(GENDIR)/runtime/caml",
        # "$(FILE_OFFSET_BITS)" ## FIXME
    ],
    defines = ["CAML_BUILDING_UNIX"],
    linkopts = ["-lm"],
    toolchains = ["//profile/system/local"],
    visibility = [
        "//debugger:__pkg__",
        "//ocamltest:__pkg__"
    ]
)
