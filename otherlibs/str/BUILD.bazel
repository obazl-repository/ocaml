load("//bzl:rules.bzl",
     # "boot_archive",
     "compiler_library",
     "compiler_module",
     "compiler_signature",
)

MODULE_OPTS = []
SIG_OPTS    = []

## CAVEAT! on mac, bazel sets -DDEBUG for fastbuild but not opt and
## this controls caml_failed_assert in runtime/caml/misc.h so if you
## build otherlibs/[unix|str] and runtime:camlrun in different modes you may
## see this:
# Undefined symbols for architecture x86_64:
#   "_caml_failed_assert", referenced from:
#       _caml_run_command in librun_stubs.a(run_stubs.o)
#       _caml_unix_accept in libunix.a(accept_unix.o)

# or for otherlibs/str:
# Undefined symbols for architecture x86_64:
#   "_caml_failed_assert", referenced from:
#       _re_replacement_text in libcamlstr.a(strstubs.o)

## this can happen because we always build the runtimes with compile
## mode opt.


# LIBNAME=str
# COBJS=strstubs.$(O)
# CLIBNAME=camlstr
# CAMLOBJS=str.cmo

compiler_library(  ## mklib -o
    name = "str",
    opts = ["-linkall"],
    manifest = [
        ":Str",
    ],
    # cc_deps = {":camlstr" : "shared"},
    visibility = ["//tools:__pkg__"]
)

# ../../ocamlc.opt -nostdlib -I ../../stdlib -c -absname -w +a-4-9-41-42-44-45-48 -warn-error +A -bin-annot -g -safe-string -strict-sequence -strict-formats  str.ml

compiler_module(
    name   = "Str",
    struct = "str.ml",
    sig    = "Str_cmi",
    opts = MODULE_OPTS,
    deps = [":camlstr"],
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Domain",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.String",
    ],
    visibility = ["//tools:__pkg__"]
)

# ../../ocamlc.opt -nostdlib -I ../../stdlib -c -absname -w +a-4-9-41-42-44-45-48 -warn-error +A -bin-annot -g -safe-string -strict-sequence -strict-formats  str.mli

compiler_signature(
    name = "Str_cmi",
    src  = "str.mli",
    opts = SIG_OPTS,
    stdlib_deps = ["//stdlib:Stdlib_cmi"]
)

################################################################
# gcc -c -O2 -fno-strict-aliasing -fwrapv -pthread -Wall -Wdeclaration-after-statement -Werror -fno-common -g    -D_FILE_OFFSET_BITS=64 -DCAML_NAME_SPACE  -I../../runtime   \
# 	  -o strstubs.o strstubs.c

## WARN: for shared lib, ocaml wants 'dllcamlstr.so' but bazel only
## does 'libcamlstr.so.
cc_library(
    name = "camlstr",
    srcs = [
        "strstubs.c",
        "//runtime/caml:alloc.h",
        "//runtime/caml:camlatomic.h",
        "//runtime/caml:config.h",
        "//runtime/caml:domain.h",
        "//runtime/caml:domain_state.h",
        "//runtime/caml:fail.h",
        "//runtime/caml:m.h",
        "//runtime/caml:memory.h",
        "//runtime/caml:misc.h",
        "//runtime/caml:mlvalues.h",
        "//runtime/caml:s.h",
        "//runtime/caml:signals.h",
    ],
    copts = [
        "-I", "runtime",
        "-I", "runtime/caml",
        "-I$(GENDIR)",
        "-I$(GENDIR)/runtime",
        "-I$(GENDIR)/runtime/caml",
    ] + select({
        # DO NOT FORGET THIS! Without it we get
        # Undefined symbol "_caml_failed_assert",
        # because libasmrun.a is always built with -c opt,
        # which does NOT define -DDEBUG,
        # and this file may be compiled with -c fastbuild, and
        # Bazel adds -DDEBUG on macos under fastbuild (a bug)
        "//config:macos_fastbuild?": ["-UDEBUG"],
        "//conditions:default":  []
    }),
    hdrs = ["//runtime/caml:domain_state.h"],
    deps= [
        # "//runtime/caml:hdrs",
        "//runtime/caml:domain_state_h",
        # "//runtime/caml:fail_h",
        # "//runtime/caml:instruct_h",
        # "//runtime/caml:jumptbl_h",
        # ":primitives_h"
    ],
)
