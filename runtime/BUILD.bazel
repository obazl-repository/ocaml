load("@bazel_skylib//rules:write_file.bzl", "write_file")

load("//bzl:rules.bzl",
     "bootstrap_executable",
     "bootstrap_module",
     "ocamlc_runtime",
     "ocamlrun")

load("//config:BUILD.bzl",
     "ARCH", "MODEL", "SYSTEM",
     "HOST", "ROOTDIR", "LIBDIR",
     "OC_CFLAGS", "CFLAGS",
     "OC_CPPFLAGS", "CPPFLAGS",
     "OC_LDFLAGS", "LDFLAGS",
     "OC_DEBUG_CPPDEFINES", "OC_INSTR_CPPDEFINES",
     "OC_CPPDEFINES", "OC_NATIVE_CPPDEFINES",
     "OUTPUTEXE", "MKEXE_FLAGS",
     "BYTECCLIBS"
     )

load("@bazel_skylib//rules:common_settings.bzl",
     "string_flag", "string_setting")

string_flag(
    name = "runtime",
    build_setting_default = "s",
    values = [
        "s", # standard
        "d", # debug
        "i"  # instrumented
    ],
    visibility = ["//visibility:public"]
)

## NB: BYTECCLIBS == syslibs needed, e.g. -lm, -lpthread

# load("//bzl/transitions:ocamlc_boot.bzl",
#      "cc_in_transition",
#      "cc_out_transition")

### //runtime:ocamlc moved to //compilers:ocamlc
## root Makefile:
# The bytecode compiler
# ocamlc$(EXE): compilerlibs/ocamlcommon.cma \
#               compilerlibs/ocamlbytecomp.cma $(BYTESTART)
# 	$(CAMLC) $(LINKFLAGS) -compat-32 -o $@ $^
## level 0 - uses //boot:ocamlc
# ocamlc_runtime(
# bootstrap_executable(
#     name = "ocamlc",
#     # exe  = "ocamlc",
#     opts = ["-compat-32"],
#     deps = [
#         "//compilerlibs:ocamlcommon",
#         "//bytecomp:ocamlbytecomp"
#     ],
#     visibility = ["//visibility:public"]
# )

# ifeq "$(TOOLCHAIN)" "msvc"
# ASM_EXT := asm
# ASM_SOURCES := $(ARCH)nt.$(ASM_EXT)
# else
# ASM_EXT := S
# ASM_SOURCES := $(ARCH).$(ASM_EXT)
# endif

ASM_SOURCES = select({
    # "//config/host:win": [$(ARCH)nt.$(ASM_EXT)]
    "//conditions:default": [ARCH + ".S"] # e.g. amd64.S
})

COMMON_C_SOURCES = [
    "misc.c",
    "startup_aux.c",
    "freelist.c",
    "major_gc.c",
    "minor_gc.c",
    "memory.c",
    "alloc.c",
    "globroots.c",
    "signals.c",
    "printexc.c",
    "backtrace.c",
    "compare.c",
    "ints.c",
    "floats.c",
    "str.c",
    "eventlog.c",
    "array.c", "io.c", "extern.c", "intern.c", "hash.c", "sys.c",
    "meta.c",
    "parsing.c",
    "gc_ctrl.c",
    "md5.c", "obj.c",
    "lexing.c",
    "callback.c",
    "debugger.c",
    "weak.c", "compact.c", "finalise.c", "custom.c",
    "dynlink.c",
    "afl.c",
    "bigarray.c", "memprof.c", "domain.c", "skiplist.c", "codefrag.c"
] + select({
    "//config/host:linux": ["unix.c"],
    "//config/host:macos": ["unix.c"],
    # "//config/host:win32": ["win32.c"],
    "//conditions:default": []
})

BYTECODE_C_SOURCES = [
    "interp.c", "stacks.c", "fix_code.c", "startup_byt.c", "roots_byt.c",
    "fail_byt.c", "signals_byt.c", "backtrace_byt.c", "main.c",
]

NATIVE_C_SOURCES = [
    "startup_nat.c", "main.c", "fail_nat.c", "roots_nat.c", "signals_nat.c",
    "backtrace_nat.c", "dynlink_nat.c", "clambda_checks.c",
]

########
genrule(
    name = "build_config_h",
    tools = ["//runtime:sak.exe"],
    outs = ["build_config.h"],
    srcs = ["//:Makefile.config"],
    cmd  = " ".join([
        "OSD=`$(location //runtime:sak.exe) encode-C-literal {libdir}`;".format(
            libdir = LIBDIR),
        "echo OSD: $$OSD;",
	    "echo '/* This file is generated from {ROOTDIR}/Makefile.config */' > $@;".format(ROOTDIR = ROOTDIR),

        ## FIXME: may stdlib locn stage-dependend
	    "echo \"#define OCAML_STDLIB_DIR $$OSD\" >> $@;",
	    "echo '#define HOST \"{HOST}\"' >> $@".format(HOST=HOST)
    ])
)

# primitives: $(shell ./gen_primitives.sh > primitives.new; \
#                     cmp -s primitives primitives.new || echo primitives.new)
# 	cp $^ $@
## FIXME: do the cmp
genrule(
    name  = "primitives_dat",
    visibility = ["//visibility:public"],
    tools = [":gen_primitives.sh"],
    outs  = ["primitives"],
    ## cwd is proj root, but the script assumes it is runtime
    cmd   = " ".join([
        "echo PWD: $$(PWD);",
        "cd runtime && ",
        "../$(location :gen_primitives.sh) > ../$@;"
    ]),
    ## script depends on these:
    srcs  = [
        "alloc.c", "array.c", "compare.c", "extern.c", "floats.c",
        "gc_ctrl.c", "hash.c", "intern.c", "interp.c", "ints.c", "io.c",
        "lexing.c", "md5.c", "meta.c", "memprof.c", "obj.c", "parsing.c",
        "signals.c", "str.c", "sys.c", "callback.c", "weak.c",
        "finalise.c", "stacks.c", "dynlink.c", "backtrace_byt.c",
        "backtrace.c", "afl.c", "bigarray.c", "eventlog.c",
    ]
)

## TODO: obazl_rules_mustache
# mustache_lines(
#     name = "prims_c",
#     out  = "prims.c",
#     template = "prims.mustache",
#     data     = "prims.c",
# )

# prims.c : primitives
genrule(
    name  = "prims_c",
    outs  = ["prims.c"],
    srcs  = [":primitives"],
    cmd   = "\n".join([
        "PRIMS=`cat $(location primitives)`;",
        # "echo PRIMS: $$PRIMS;",
	    "echo '#define CAML_INTERNALS' > $@;",
        "echo '#include \"caml/mlvalues.h\"' >> $@;",
	    "echo '#include \"caml/prims.h\"' >> $@;",
        "sed -e 's/.*/extern value &();/' $(location :primitives) >> $@;",
        "echo 'c_primitive caml_builtin_cprim[] = {' >> $@;",
        "sed -e 's/.*/  &,/' $(location :primitives) >> $@;",
        "echo '  0 };' >> $@;",
        "echo 'char * caml_names_of_builtin_cprim[] = {' >> $@;",
        "sed -e 's/.*/  \"&\",/' $(location :primitives) >> $@;",
        "echo '  0 };' >> $@"
    ])
)

## FIXME: to build multiple "versions" (e.g. libcamlrun, libcamlrund,
## etc.) we can either support multiple targets, or one target
## parameterized by build settings.

## Either way, we will have to build each separately, one build cmd
## per output.

################  standard  ################
cc_binary(
    name = "ocamlrun",
    srcs = ["prims.c"], # , "instrtrace.c"],
    copts = OC_CFLAGS + CFLAGS + select({
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    linkopts = OC_LDFLAGS + LDFLAGS + BYTECCLIBS + MKEXE_FLAGS, # + ["-v"],
    deps= [":camlrun"],
    visibility = ["//visibility:public"]
)

cc_library(
    name = "camlrun",
    srcs = [
        ":build_config.h",
    ] + COMMON_C_SOURCES + BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime", # pick up build_config.h
    ] + OC_CPPFLAGS + select({
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"],
)

################  PIC  ################
## if unix and SUPPORTS_SHARED_LIBRARIES (i.e. has dlopen)
cc_library(
    name = "camlrun_pic",
    srcs = [
        ":build_config.h",
    ] + COMMON_C_SOURCES + BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime", # pick up build_config.h
    ] + OC_CPPFLAGS + select({
        "//config/debug:ocamlrun-debug": ["-g"],
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"],
)

################ shared
cc_binary(
    name       = "camlrun_shared",
    linkshared = True,
    srcs = [
        ":build_config.h",
    ] + COMMON_C_SOURCES + BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime", # pick up build_config.h
    ] + OC_CPPFLAGS + select({
        "//config/debug:ocamlrun-debug": ["-g"],
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"],
)

################ debug
cc_binary(
    name = "ocamlrund",
    srcs = ["prims.c"],
    copts = OC_CFLAGS + CFLAGS + ["-g"],
    linkopts = OC_LDFLAGS + LDFLAGS + BYTECCLIBS + MKEXE_FLAGS,
    deps= [":camlrun"],
    visibility = ["//visibility:public"]
)

cc_library(
    name = "camlrund",
    srcs = [
        ":build_config.h",
        "instrtrace.c"
    ] + COMMON_C_SOURCES + BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    defines = OC_CPPDEFINES + OC_DEBUG_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)

################ vm cmd, instrumented
## configure.ac says:
# The instrumented runtime is built by default
# if the proper clock source is found.
# If asked via --enable-instrumented-runtime, configuration fails if the proper
# clock source is missing.

# macos: has_monotonic_clock is true if:
# macos: HAS_MACH_ABSOLUTE_TIME if has mach_timebase_info, mach_absolute_time
# macos: HAS_POSIX_MONOTONIC_CLOCK if _POSIX_TIMERS etc. - see configure.ac

# linux: clock_gettime etc. - complicated, see configure.ac

cc_binary(
    name = "ocamlruni",
    srcs = ["prims.c"],
    copts = OC_CFLAGS + CFLAGS + select({
        "//config/debug:ocamlrun-debug": ["-g"],
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    linkopts = OC_LDFLAGS + LDFLAGS + BYTECCLIBS + MKEXE_FLAGS + select({
        # Makefile adds INSTRUMENTED_RUNTIME_LIBS, found by ./configure
        #FIXME: use this select to fail this target if no monnotonic clock
        "//conditions:default": []
    }),
    deps= [":camlrun"],
    visibility = ["//visibility:public"]
)

cc_library(  ## produces libcamlruni
    name = "camlruni",
    srcs = [
        ":build_config.h",
    ] + COMMON_C_SOURCES + BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)

################################################################
################  NATIVE  ################
###########
cc_library(
    name = "asmrun",
    srcs = [
        ":build_config.h",
        "signals_osdep.h"
    ] + COMMON_C_SOURCES + NATIVE_C_SOURCES + ASM_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    linkopts = LDFLAGS + OC_LDFLAGS,
    defines = OC_CPPDEFINES + OC_NATIVE_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)

##########
cc_binary(
    name = "sak.exe",
    srcs = ["sak.c"],
    copts = OC_CFLAGS + CFLAGS + CPPFLAGS,
    defines = OC_CPPDEFINES + OC_NATIVE_CPPDEFINES,
    linkopts = OC_LDFLAGS + LDFLAGS,
    deps= ["//runtime/caml:hdrs"],
    visibility = ["//runtime/caml:__pkg__"]
)
