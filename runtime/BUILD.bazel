load("@bazel_skylib//rules:write_file.bzl", "write_file")

load("//bzl:rules.bzl",
     "bootstrap_executable",
     "bootstrap_module",
     "ocamlc_runtime",
     "ocamlrun")

load("//config:BUILD.bzl",
     "ARCH", "MODEL", "SYSTEM",
     "HOST", "ROOTDIR", "LIBDIR",
     "OC_CFLAGS", "CFLAGS",
     "OC_CPPFLAGS", "CPPFLAGS",
     "OC_LDFLAGS", "LDFLAGS",
     "OC_DEBUG_CPPDEFINES", "OC_INSTR_CPPDEFINES",
     "OC_CPPDEFINES", "OC_NATIVE_CPPDEFINES",
     "OUTPUTEXE", "MKEXE_FLAGS",
     "BYTECCLIBS"
     )

load("@bazel_skylib//rules:common_settings.bzl",
     "string_flag", "string_setting")

string_flag(
    name = "runtime",
    build_setting_default = "s",
    values = [
        "s", # standard
        "d", # debug
        "i"  # instrumented
    ],
    visibility = ["//visibility:public"]
)

## NB: BYTECCLIBS == syslibs needed, e.g. -lm, -lpthread

# load("//bzl/transitions:ocamlc_boot.bzl",
#      "cc_in_transition",
#      "cc_out_transition")

### //runtime:ocamlc moved to //compilers:ocamlc
## root Makefile:
# The bytecode compiler
# ocamlc$(EXE): compilerlibs/ocamlcommon.cma \
#               compilerlibs/ocamlbytecomp.cma $(BYTESTART)
# 	$(CAMLC) $(LINKFLAGS) -compat-32 -o $@ $^
## level 0 - uses //boot:ocamlc
# ocamlc_runtime(
# bootstrap_executable(
#     name = "ocamlc",
#     # exe  = "ocamlc",
#     opts = ["-compat-32"],
#     deps = [
#         "//compilerlibs:ocamlcommon",
#         "//bytecomp:ocamlbytecomp"
#     ],
#     visibility = ["//visibility:public"]
# )

# ifeq "$(TOOLCHAIN)" "msvc"
# ASM_EXT := asm
# ASM_SOURCES := $(ARCH)nt.$(ASM_EXT)
# else
# ASM_EXT := S
# ASM_SOURCES := $(ARCH).$(ASM_EXT)
# endif

## Makefile.build_config.in:
## Platform-dependent assembler files to use to build the runtime
# runtime_ASM_OBJECTS = $(addprefix runtime/,@runtime_asm_objects@)

## configure.ac:
# AS_CASE([$ccomptype],
#   [msvc],
#     [runtime_asm_objects=${arch}nt.${OBJEXT}],
#   [runtime_asm_objects=${arch}.${OBJEXT}])

## configure:
# case $ccomptype in #(
#   msvc) :
#     runtime_asm_objects=${arch}nt.${OBJEXT} ;; #(
#   *) :
#     runtime_asm_objects=${arch}.${OBJEXT} ;;
# esac

## OBJEXT: set by configure, but only 2 possibilities: .S or .asm
## ARCH: arm | arm64 | i386 | amd64 | power | riscv | s390x
## Bazel: arch must be set, by config setting to be determined.
## For now it's hardcoded as amd64 since I'm using a legacy Mac for dev.
RUNTIME_ASM_OBJECTS = select({
    "//config/host:windows_x86_32": [ARCH + "nt.asm"],
    "//conditions:default": [ARCH + ".S"] # e.g. amd64.S
})

COMMON_C_SOURCES = [
  "addrmap.c",
  "afl.c",
  "alloc.c",
  "array.c",
  "backtrace.c",
  "bigarray.c",
  "callback.c",
  "codefrag.c",
  "compare.c",
  "custom.c",
  "debugger.c",
  "domain.c",
  "dynlink.c",
  "extern.c",
  "fiber.c",
  "finalise.c",
  "floats.c",
  "gc_ctrl.c",
  "gc_stats.c",
  "globroots.c",
  "hash.c",
  "intern.c",
  "ints.c",
  "io.c",
  "lexing.c",
  "lf_skiplist.c",
  "main.c",
  "major_gc.c",
  "md5.c",
  "memory.c",
  "memprof.c",
  "meta.c",
  "minor_gc.c",
  "misc.c",
  "obj.c",
  "parsing.c",
  "platform.c",
  "printexc.c",
  "prng.c",
  "roots.c",
  "runtime_events.c",
  "shared_heap.c",
  "signals.c",
  "skiplist.c",
  "startup_aux.c",
  "str.c",
  "sync.c", "sync_posix.h",
  "sys.c",
  "weak.c"
] + select({
    ## $(UNIX_OR_WIN32) = 'unix' or 'win32', from configure script
    "//config/host:linux": ["unix.c"],
    "//config/host:macos": ["unix.c"],
    "//config/host:windows_x86_32": ["win32.c"], # using bazel naming
    # "//config/host:windows_x86_64": [???]
    "//conditions:default": []
})

BYTECODE_ONLY_C_SOURCES = [
  "backtrace_byt.c",
  "fail_byt.c",
  "fix_code.c",
  "interp.c",
  "startup_byt.c"
]

RUNTIME_BYTECODE_C_SOURCES = COMMON_C_SOURCES + BYTECODE_ONLY_C_SOURCES

NATIVE_ONLY_C_SOURCES = [
  "backtrace_nat.c",
  "clambda_checks.c",
  "dynlink_nat.c",
  "fail_nat.c",
  "frame_descriptors.c",
  "startup_nat.c",
  "signals_nat.c"
]

RUNTIME_NATIVE_C_SOURCES = COMMON_C_SOURCES + NATIVE_ONLY_C_SOURCES

########
genrule(
    outs = ["build_config.h"],
    name = "build_config_h",
    tools = ["//runtime:sak.exe"],
    srcs = ["//:Makefile.config"],
    cmd  = " ".join([
        ## $(call C_LITERAL,$(LIBDIR)) ==
        "OSD=`$(location //runtime:sak.exe) encode-C-literal {libdir}`;".format(
            libdir = LIBDIR),
        "echo OSD: $$OSD;",
	    "echo '/* This file is generated from {ROOTDIR}/Makefile.config */' > $@;".format(ROOTDIR = ROOTDIR),

        ## FIXME: may stdlib locn stage-dependend
	    "echo \"#define OCAML_STDLIB_DIR $$OSD\" >> $@;",
	    "echo '#define HOST \"{HOST}\"' >> $@".format(HOST=HOST)
    ])
)

##//Makefile:
  # $(shell runtime/gen_primitives.sh > runtime/primitives.new; \
  #                   cmp -s runtime/primitives runtime/primitives.new || \
  #                   echo runtime/primitives.new)
  #   cp $^ $@

## FIXME: do the cmp
genrule(
    outs  = ["primitives"],
    name  = "primitives_dat",
    visibility = ["//visibility:public"],
    tools = [":gen_primitives.sh"],
    ## cwd is proj root, but the script assumes it is runtime
    cmd   = " ".join([
        # "echo PWD: $$(PWD);",
        # "cd runtime && ",
        "$(location :gen_primitives.sh) > $@;"
    ]),
    ## script depends on these (Bazel: runfiles):
    srcs  = [
        "alloc.c", "array.c", "compare.c", "extern.c", "floats.c",
        "gc_ctrl.c", "hash.c", "intern.c", "interp.c", "ints.c", "io.c",
        "lexing.c", "md5.c", "meta.c", "memprof.c", "obj.c", "parsing.c",
        "signals.c", "str.c", "sys.c", "callback.c", "weak.c",
        "finalise.c", "domain.c", "platform.c", "fiber.c", "memory.c",
        "startup_aux.c", "runtime_events.c", "sync.c", "dynlink.c",
        "backtrace_byt.c", "backtrace.c", "afl.c", "bigarray.c", "prng.c",
    ]
)

## TODO: obazl_rules_mustache
# mustache_lines(
#     name = "prims_c",
#     out  = "prims.c",
#     template = "prims.mustache",
#     data     = "prims.c",
# )

# prims.c : primitives
genrule(
    outs  = ["prims.c"],
    name  = "prims_c",
    srcs  = [":primitives"],
    cmd   = "\n".join([
        "PRIMS=`cat $(location primitives)`;",
        # "echo PRIMS: $$PRIMS;",
	    "echo '#define CAML_INTERNALS' > $@;",
        "echo '#include \"caml/mlvalues.h\"' >> $@;",
	    "echo '#include \"caml/prims.h\"' >> $@;",
        "sed -e 's/.*/extern value &();/' $(location :primitives) >> $@;",
        "echo 'c_primitive caml_builtin_cprim[] = {' >> $@;",
        "sed -e 's/.*/  &,/' $(location :primitives) >> $@;",
        "echo '  0 };' >> $@;",
        "echo 'char * caml_names_of_builtin_cprim[] = {' >> $@;",
        "sed -e 's/.*/  \"&\",/' $(location :primitives) >> $@;",
        "echo '  0 };' >> $@"
    ])
)

## FIXME: to build multiple "versions" (e.g. libcamlrun, libcamlrund,
## etc.) we can either support multiple targets, or one target
## parameterized by build settings.

## Either way, we will have to build each separately, one build cmd
## per output.

################  standard  ################
cc_binary(
    name = "ocamlrun",
    srcs = ["prims.c"], # , "instrtrace.c"],
    copts = OC_CFLAGS + CFLAGS + select({
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    linkopts = OC_LDFLAGS + LDFLAGS + BYTECCLIBS + MKEXE_FLAGS, # + ["-v"],
    deps= [":camlrun"],
    visibility = ["//visibility:public"]
)

cc_library(
    name = "camlrun",
    srcs = [
        ":build_config.h",
    ] + RUNTIME_BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime", # pick up build_config.h
    ] + OC_CPPFLAGS + select({
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"],
)

################  PIC  ################
## if unix and SUPPORTS_SHARED_LIBRARIES (i.e. has dlopen)
cc_library(
    name = "camlrun_pic",
    srcs = [
        ":build_config.h",
    ] + RUNTIME_BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime", # pick up build_config.h
    ] + OC_CPPFLAGS + select({
        "//config/debug:ocamlrun-debug": ["-g"],
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"],
)

################ shared
cc_binary(
    name       = "camlrun_shared",
    linkshared = True,
    srcs = [
        ":build_config.h",
    ] + RUNTIME_BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime", # pick up build_config.h
    ] + OC_CPPFLAGS + select({
        "//config/debug:ocamlrun-debug": ["-g"],
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"],
)

################ debug
cc_binary(
    name = "ocamlrund",
    srcs = ["prims.c"],
    copts = OC_CFLAGS + CFLAGS + ["-g"],
    linkopts = OC_LDFLAGS + LDFLAGS + BYTECCLIBS + MKEXE_FLAGS,
    deps= [":camlrun"],
    visibility = ["//visibility:public"]
)

cc_library(
    name = "camlrund",
    srcs = [
        ":build_config.h",
        "instrtrace.c"
    ] + RUNTIME_BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    defines = OC_CPPDEFINES + OC_DEBUG_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)

################ vm cmd, instrumented
## configure.ac says:
# The instrumented runtime is built by default
# if the proper clock source is found.
# If asked via --enable-instrumented-runtime, configuration fails if the proper
# clock source is missing.

# macos: has_monotonic_clock is true if:
# macos: HAS_MACH_ABSOLUTE_TIME if has mach_timebase_info, mach_absolute_time
# macos: HAS_POSIX_MONOTONIC_CLOCK if _POSIX_TIMERS etc. - see configure.ac

# linux: clock_gettime etc. - complicated, see configure.ac

cc_binary(
    name = "ocamlruni",
    srcs = ["prims.c"],
    copts = OC_CFLAGS + CFLAGS + select({
        "//config/debug:ocamlrun-debug": ["-g"],
        #FIXME: on mac bazel always adds -DDEBUG for fastbuild
        "//conditions:default": ["-UDEBUG"]
    }),
    linkopts = OC_LDFLAGS + LDFLAGS + BYTECCLIBS + MKEXE_FLAGS + select({
        # Makefile adds INSTRUMENTED_RUNTIME_LIBS, found by ./configure
        #FIXME: use this select to fail this target if no monnotonic clock
        "//conditions:default": []
    }),
    deps= [":camlrun"],
    visibility = ["//visibility:public"]
)

cc_library(  ## produces libcamlruni
    name = "camlruni",
    srcs = [
        ":build_config.h",
    ] + RUNTIME_BYTECODE_C_SOURCES,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    defines = OC_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)

################################################################
################  NATIVE  ################
###########
cc_library(
    name = "asmrun",
    srcs = [
        ":build_config.h",
        # "signals_osdep.h"
    ] + RUNTIME_NATIVE_C_SOURCES + RUNTIME_ASM_OBJECTS,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    linkopts = LDFLAGS + OC_LDFLAGS,
    defines = OC_CPPDEFINES + OC_NATIVE_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)

## debug native runtime:
# runtime/%.nd.$(O): OC_CPPFLAGS += $(OC_NATIVE_CPPFLAGS) $(ocamlrund_CPPFLAGS)
# $(DEPDIR)/runtime/%.nd.$(D): \
#   OC_CPPFLAGS += $(OC_NATIVE_CPPFLAGS) $(ocamlrund_CPPFLAGS)

cc_library(
    name = "asmrund",
    srcs = [
        ":build_config.h",
        # "signals_osdep.h"
    ] + RUNTIME_NATIVE_C_SOURCES + RUNTIME_ASM_OBJECTS,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    linkopts = LDFLAGS + OC_LDFLAGS,
    defines = OC_CPPDEFINES + OC_NATIVE_CPPDEFINES + OC_DEBUG_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)

## instrumented native runtime
cc_library(
    name = "asmruni",
    srcs = [
        ":build_config.h",
        # "signals_osdep.h"
    ] + RUNTIME_NATIVE_C_SOURCES + RUNTIME_ASM_OBJECTS,
    copts = [
        "-I$(GENDIR)/runtime" # to pick up build_config.h
    ] + OC_CPPFLAGS,
    linkopts = LDFLAGS + OC_LDFLAGS,
    defines = OC_CPPDEFINES + OC_NATIVE_CPPDEFINES,
    deps = ["//runtime/caml:hdrs"]
)


##########
cc_binary(
    name = "sak.exe",
    srcs = ["sak.c"],
    copts = OC_CFLAGS + CFLAGS + CPPFLAGS,
    defines = OC_CPPDEFINES + OC_NATIVE_CPPDEFINES,
    linkopts = OC_LDFLAGS + LDFLAGS,
    deps= ["//runtime/caml:hdrs"],
    visibility = ["//runtime/caml:__pkg__"]
)
