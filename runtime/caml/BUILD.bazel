load("//vendor/mustach:BUILD_RULES.bzl", "mustache")
load("//vendor/mustach:cc_mustache.bzl", "cc_mustache")

exports_files(glob(["**"]))

cc_mustache(
    name = "domain_state_h",
    out  = "domain_state.h",
    json = "domain_state.json",
    template = "domain_state.mustache.h",
    visibility = [
        "//boot:__pkg__",
        "//runtime:__subpackages__",
        "//otherlibs:__subpackages__",
        "//testsuite/tests:__subpackages__",
        "//yacc:__pkg__"
    ]
)

cc_mustache(
    name = "instruct_h",
    out  = "instruct.h",
    json = "//bytecomp:opcodes.json",
    template = "instruct.mustache.h",
    visibility = [
        "//boot:__pkg__",
        "//runtime:__subpackages__",
        "//tools:__pkg__"
    ]
)

cc_mustache(
    name = "fail_h",
    out  = "fail.h",
    json = "//runtime:primitives.json",
    template = "fail.mustache.h",
    visibility = [
        "//boot:__pkg__",
        "//lambda:__pkg__",
        "//otherlibs:__subpackages__",
        "//runtime:__subpackages__"
    ]
)

cc_mustache(
    name = "jumptbl_h",
    out  = "jumptbl.h",
    json = "//bytecomp:opcodes.json",
    template = "jumptbl.mustache.h",
    visibility = [
        "//boot:__pkg__",
        "//runtime:__pkg__",
    ]
)

cc_mustache(
    name = "opnames_h",
    out  = "opnames.h",
    json = "//bytecomp:opcodes.json",
    template = "opnames.mustache.h",
    visibility = [
        "//boot:__pkg__",
        "//runtime:__pkg__",
    ]
)

## FIXME: to eliminate the need for a genrule, rename files
## to linux/s.h, macos/s.h
genrule(
    name = "s_h",
    outs = ["s.h"],
    srcs = select({
        # FIXME: if targethost = buildhost, use s.local.h
        "//platform/os:linux?": ["//runtime/caml:s.linux.h"],
        "//platform/os:macos?": ["//runtime/caml:s.macos.h"]
        # "//conditions:default": [],
    }),
    cmd  = "cp $(SRCS) $@", #FIXME: symlink?
    visibility = [
        "//boot:__pkg__",
        "//otherlibs:__subpackages__",
        "//runtime:__pkg__",
        "//testsuite/tests:__subpackages__",
        "//utils:__pkg__"
    ]
)

cc_library(
    name = "hdrs",
    # srcs = [":domain_state_h"],
    hdrs = glob(
        ["*.h"]
    ) + [
        # ":domain_state.h",
        # ":fail.h",
        # ":instruct.h",
        # ":jumptbl.h",
        # ":opnames.h",
        ":s.h"
    ],
    # ] + select({
    #     "//platform/os:linux?": ["//runtime/caml/linux:s.h"],
    #     "//platform/os:macos?": ["//runtime/caml/macos:s.h"]
    # }),
    # strip_include_prefix = "",
    include_prefix = "caml",
    visibility = ["//visibility:public"]
)
