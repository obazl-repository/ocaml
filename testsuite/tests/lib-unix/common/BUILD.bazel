## GENERATED FILE ##

load("//bzl:rules.bzl",
     "ocaml_library",
     "ocaml_module",
)

MODULE_OPTS = ["-nostdlib"]

ocaml_library(
    name = "testsuite_tests_lib-unix_common_lib",
    modules  = [
        ":Channel_of",
        ":Cloexec",
        ":Cmdline_prog",
        ":Dup",
        ":Dup2",
        ":Fdstatus_main",
        ":Getaddrinfo",
        ":Pipe_eof",
        ":Process_pid",
        ":Redirections",
        ":Reflector",
        ":Rename",
        ":Test_unix_cmdline",
        ":Test_unixlabels",
        ":Truncate",
        ":Uexit",
        ":Utimes",
        ":Wait_nohang",
    ],
)

ocaml_module(
    name   = "Channel_of",
    struct = "channel_of.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Cloexec",
    struct = "cloexec.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Cmdline_prog",
    struct = "cmdline_prog.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Dup",
    struct = "dup.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Dup2",
    struct = "dup2.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Fdstatus_main",
    struct = "fdstatus_main.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Getaddrinfo",
    struct = "getaddrinfo.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pipe_eof",
    struct = "pipe_eof.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Process_pid",
    struct = "process_pid.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Redirections",
    struct = "redirections.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Reflector",
    struct = "reflector.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Rename",
    struct = "rename.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Test_unix_cmdline",
    struct = "test_unix_cmdline.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Test_unixlabels",
    struct = "test_unixlabels.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Truncate",
    struct = "truncate.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Uexit",
    struct = "uexit.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Utimes",
    struct = "utimes.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Wait_nohang",
    struct = "wait_nohang.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

