load("//bzl:rules.bzl",
     "test_archive",
     "test_executable",
     "test_library",
     "test_module",
     "test_signature",
     "ocaml_test",
)

MODULE_OPTS = []

test_library(
    name = "testsuite_tests_basic_lib",
    manifest = [
        ":Arrays",
        ":Bigints",
        ":Boxedints",
        ":CamlCase",
        ":Divint",
        ":Equality",
        ":Eval_order_1",
        ":Eval_order_2",
        ":Eval_order_3",
        ":Eval_order_4",
        ":Eval_order_6",
        ":Eval_order_7",
        ":Eval_order_pr10283",
        ":Float",
        ":Float_physical_equality",
        ":Includestruct",
        ":Localexn",
        ":Localfunction",
        ":Maps",
        ":Min_int",
        ":Opt_variants",
        ":Patmatch",
        ":Patmatch_for_multiple",
        ":Patmatch_incoherence",
        ":Patmatch_split_no_or",
        ":Pr7253",
        ":Pr7533",
        ":Pr7657",
        ":Recvalues",
        ":Sets",
        ":Stringmatch",
        ":Switch_opts",
        ":Tailcalls",
        ":Trigraph",
        ":Tuple_match",
        ":Unit_naming",
        ":Zero_divided_by_n",
    ],
)

ocaml_test(
    name = "arrays_test",
    main = ":Arrays",
    timeout = "short"
)

test_module(
    name   = "Arrays",
    struct = "arrays.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Gc"
    ]
)

test_module(
    name   = "Bigints",
    struct = "bigints.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Boxedints",
    struct = "boxedints.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "CamlCase",
    struct = "camlCase.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Divint",
    struct = "divint.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Equality",
    struct = "equality.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Eval_order_1",
    struct = "eval_order_1.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Eval_order_2",
    struct = "eval_order_2.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Eval_order_3",
    struct = "eval_order_3.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Eval_order_4",
    struct = "eval_order_4.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Eval_order_6",
    struct = "eval_order_6.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Eval_order_7",
    struct = "eval_order_7.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Eval_order_pr10283",
    struct = "eval_order_pr10283.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Float",
    struct = "float.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Float_physical_equality",
    struct = "float_physical_equality.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Includestruct",
    struct = "includestruct.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Localexn",
    struct = "localexn.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Localfunction",
    struct = "localfunction.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Maps",
    struct = "maps.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Min_int",
    struct = "min_int.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Opt_variants",
    struct = "opt_variants.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Patmatch",
    struct = "patmatch.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Patmatch_for_multiple",
    struct = "patmatch_for_multiple.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Patmatch_incoherence",
    struct = "patmatch_incoherence.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Patmatch_split_no_or",
    struct = "patmatch_split_no_or.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Pr7253",
    struct = "pr7253.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Pr7533",
    struct = "pr7533.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Pr7657",
    struct = "pr7657.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Recvalues",
    struct = "recvalues.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Sets",
    struct = "sets.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Stringmatch",
    struct = "stringmatch.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Switch_opts",
    struct = "switch_opts.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Tailcalls",
    struct = "tailcalls.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Trigraph",
    struct = "trigraph.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Tuple_match",
    struct = "tuple_match.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Unit_naming",
    struct = "unit_naming.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Zero_divided_by_n",
    struct = "zero_divided_by_n.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

