package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("//bzl/rules:COMPILER.bzl", "OCAML_COMPILER_OPTS")
load("//bzl:rules.bzl", "cc_preprocess")
load("//config:WARNINGS.bzl", "w")

load("//test:rules.bzl",
     "test_executable",
     "test_vv_executable",
     "test_vs_executable",
     "test_ss_executable",
     "test_sv_executable",

     "test_library",
     "test_module",
     "test_signature",

     "inline_expect_module",
     # "inline_expect_test",

     "batch_test_macro",
     "batch_vv_test",
     "batch_vs_test",
     "batch_ss_test",
     "batch_sv_test",

     "compile_fail_test",
     # "ocaml_test",
)

test_suite(
    name = "basic",
    tests = [
        ":Arrays_test",
        ":Bigints_test",
        ":Boxedints_test",
        ":Constprop_test",
        ":Divint_test",
        ":Equality_test",
        ":Eval_order_1_test",
        ":Eval_order_2_test",
        ":Eval_order_3_test",
        ":Eval_order_4_test",
        ":Eval_order_6_test",
        ":Eval_order_7_test",
        ":Eval_order_pr10283_test",
        ":Float_test",
        ":Float_physical_equality_test",
        ":Includestruct_test",
        ":Localexn_test",
        ":Localfunction_test",
        ":Maps_test",
        ":Min_int_test",
        ":Opt_variants_test",
        ":Patmatch_test",
        ":Patmatch_for_multiple_test",
        ":Patmatch_incoherence_test",
        ":Patmatch_split_no_or_test",
        ":Pr7253_test",
        ":Pr7533_test",
        ":Pr7657_test",
        ":Recvalues_test",
        ":Sets_test",
        ":Stringmatch_test",
        ":Switch_opts_test",
        ":Tailcalls_test",
        ":Trigraph_test",
        ":Tuple_match_test",
        # ":unit_naming_test",
        ":Zero_divided_by_n_test",
    ],
)

############
## batch_test_macro expands to: test_suite,
## batch_vv_test, batch_vs_test,
## batch_ss_test, batch_sv_test

# batch_test(
# )
# test_batch_runner(
# )
# test_batch_executable(
# )
# test_batch_module(
# )

batch_test_macro(
    name    = "Arrays_test",
    test_module = ":Arrays",
    stdout_actual  = "arrays.stdout",
    stdout_expected = "arrays.reference",
)

test_module(
    name   = "Arrays",
    struct = "arrays.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Gc",
    ]
)

############
## For demo purposes we include the explicit expansion of macros.

## batch_test_macro expands to:
## * batch_xx_test targets, where <x> = vv | vs | ss | sv indicates the compiler used to build the code.
## * one test_executable target, which links the executable run by batch_xx_test
## * one test_suite target that runs all the batch_xx_test tests

## NB: the arrays test emits nothing to stdout, so we demonstrate the
## expansion for bigints.ml, which does write to stdout.

# batch_test_macro(
#     name    = "bigints_test",
#     test_module = ":Bigints",
#     stdout_actual  = "bigints.stdout",
#     stdout_expected = "bigints.reference",
# )

## to run tests selectively pass --test_tag_filters=...

## batch_test_macro macro expansion:
test_suite(
    name = "Bigints_test",
    tests = [
        ":Bigints_vv_test",
        ":Bigints_vs_test",
        ":Bigints_ss_test",
        ":Bigints_sv_test",
    ]
)

#####################
batch_vv_test(
    name    = "Bigints_vv_test",
    test_executable = ":Bigints.exe",
    stdout_actual  = "bigints.stdout",
    stdout_expected = "bigints.reference",
    # diff_args = ["-w", "-y"],
    timeout  = "short",
    tags     = ["vv"],
)

batch_vs_test(
    name    = "Bigints_vs_test",
    test_executable = ":Bigints.exe",
    stdout_actual  = "bigints.stdout",
    stdout_expected = "bigints.reference",
    timeout  = "short",
    tags     = ["vs"],
    opts  = OCAML_COMPILER_OPTS
)

batch_ss_test(
    name    = "Bigints_ss_test",
    test_executable = ":Bigints.exe",
    stdout_actual  = "bigints.stdout",
    stdout_expected = "bigints.reference",
    timeout  = "short",
    tags     = ["ss"],
    opts  = OCAML_COMPILER_OPTS
)

batch_sv_test(
    name    = "Bigints_sv_test",
    test_executable = ":Bigints.exe",
    stdout_actual = "bigints.stdout",
    stdout_expected = "bigints.reference",
    timeout  = "short",
    tags     = ["sv"],
    opts  = OCAML_COMPILER_OPTS
)

# run 'bazel run testsuite/tests/basic:Bigints.exe' to see stdout/stderr
test_executable(
    name    = "Bigints.exe",
    main    = ":Bigints",
)

test_module(
    name   = "Bigints",
    struct = "bigints.ml",
    stdlib_deps = [
        # "//stdlib",
        "//stdlib:Stdlib.Sys"
    ]
)

################################################################
#################
batch_test_macro(
    name        = "Boxedints_test",
    test_module = ":Boxedints",
    stdout_actual   = "boxedints.stdout",
    stdout_expected = "boxedints.reference",
    # opts = ["-custom"],
)

test_module(
    name   = "Boxedints",
    struct = "boxedints.ml",
    # open   = ["//stdlib:Stdlib"],
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Hashtbl",
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf"
        ]
    }),
    warnings = [w.OPEN_SHADOW_IDENTIFIER_44, w.UNUSED_MODULE_60]
)

################################################################
test_module( # not a test, used by unit_naming_test
    name   = "CamlCase",
    struct = "camlCase.ml",
)
################################################################

################################################################
## with C Preprocessing
# (* TEST
#    flags = "-pp '${c_preprocessor}'"
#    ocaml_filetype_flag = "-impl"
#    * bytecode
#      compare_programs = "false"
#    * native
# *)

#################
batch_test_macro(
    name        = "Constprop_test",
    test_module = ":Constprop",
    stdout_actual = "constprop.stdout",
    stdout_expected    = "constprop.ml.reference",
)

test_module(
    name   = "Constprop",
    struct = "constprop.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Int64",
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf",
        ]
    })
)

cc_preprocess(
    name = "constprop.pp",
    src  = "constprop.ml.c",
    out  = "constprop.ml"
)

################################################################

#################
batch_test_macro(
    name        = "Divint_test",
    test_module = ":Divint",
    stdout_actual = "divint.stdout",
    stdout_expected    = "divint.reference",
)

test_module(
    name        = "Divint",
    struct      = "divint.ml",
    open        = ["//stdlib:Stdlib"],
    stdlib_deps = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf"
        ]
    }),
    warnings = [w.OPEN_SHADOW_IDENTIFIER_44, w.UNUSED_FOR_INDEX_35]
)

#################
batch_test_macro(
    name        = "Equality_test",
    test_module = ":Equality",
    stdout_actual = "equality.stdout",
    stdout_expected    = "equality.reference",
)

test_module(
    name        = "Equality",
    struct      = "equality.ml",
    open        = ["//stdlib:Stdlib"],
    stdlib_deps = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Fun"]
    })
)

#################
batch_test_macro(
    name    = "Eval_order_1_test",
    stdout_actual = "eval_order_1.stdout",
    stdout_expected = "eval_order_1.reference",
    test_module    = ":Eval_order_1",
)

test_module(
    name   = "Eval_order_1",
    struct = "eval_order_1.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Printf"]
    })
)

#################
batch_test_macro(
    name    = "Eval_order_2_test",
    stdout_actual = "eval_order_2.stdout",
    stdout_expected = "eval_order_2.reference",
    test_module    = ":Eval_order_2",
)

test_module(
    name   = "Eval_order_2",
    struct = "eval_order_2.ml",
    stdlib_deps   = ["//stdlib:Primitives"],
    warnings = [w.UNUSED_VAR_STRICT_27]
)

#################
batch_test_macro(
    name    = "Eval_order_3_test",
    stdout_actual = "eval_order_3.stdout",
    stdout_expected = "eval_order_3.reference",
    test_module    = ":Eval_order_3",
)

test_module(
    name   = "Eval_order_3",
    struct = "eval_order_3.ml",
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Printf"]
    }),
    warnings = [w.UNUSED_VAR_STRICT_27]
)

#################
batch_test_macro(
    name    = "Eval_order_4_test",
    stdout_actual = "eval_order_4.stdout",
    stdout_expected = "eval_order_4.reference",
    test_module    = ":Eval_order_4",
)

test_module(
    name   = "Eval_order_4",
    struct = "eval_order_4.ml",
    stdlib_deps   = ["//stdlib:Primitives"],
    warnings = [w.UNUSED_VAR_STRICT_27]
)

#################
batch_test_macro(
    name    = "Eval_order_6_test",
    stdout_actual = "eval_order_6.stdout",
    stdout_expected = "eval_order_6.reference",
    test_module    = ":Eval_order_6",
)

test_module(
    name   = "Eval_order_6",
    struct = "eval_order_6.ml",
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Int"]
    }),
    warnings = [
        w.MISSING_RECORD_FIELD_PATTERN_9,
        w.MATCH_ON_MUTABLE_STATE_PREVENT_UNCURRY_68
    ]
)

#################
batch_test_macro(
    name    = "Eval_order_7_test",
    stdout_actual = "eval_order_7.stdout",
    stdout_expected = "eval_order_7.reference",
    test_module    = ":Eval_order_7",
)

test_module(
    name   = "Eval_order_7",
    struct = "eval_order_7.ml",
    stdlib_deps   = ["//stdlib:Primitives"],
    open   = ["//stdlib:Stdlib"],
)

#################
batch_test_macro(
    name    = "Eval_order_pr10283_test",
    stdout_actual = "eval_order_pr10283.stdout",
    stdout_expected = "eval_order_pr10283.reference",
    test_module    = ":Eval_order_pr10283",
)
test_module(
    name   = "Eval_order_pr10283",
    struct = "eval_order_pr10283.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Printf"]
    })
)

#################
batch_test_macro(
    name    = "Float_test",
    stdout_actual = "float.stdout",
    stdout_expected = "float.reference",
    test_module    = ":Float",
)

test_module(
    name   = "Float",
    struct = "float.ml",
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Printf"]
    })
)

#################
batch_test_macro(
    name    = "Float_physical_equality_test",
    stdout_actual = "float_physical_equality.stdout",
    stdout_expected = "float_physical_equality.reference",
    test_module    = ":Float_physical_equality",
)

test_module(
    name   = "Float_physical_equality",
    struct = "float_physical_equality.ml",
    stdlib_deps   = ["//stdlib:Primitives"]
)

#################
batch_test_macro(
    name    = "Includestruct_test",
    stdout_actual = "includestruct.stdout",
    stdout_expected = "includestruct.reference",
    test_module    = ":Includestruct",
)

test_module(
    name   = "Includestruct",
    struct = "includestruct.ml",
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:CamlinternalOO",
            "//stdlib:Stdlib.Printexc",
            "//stdlib:Stdlib.Printf",
        ]
    }),
    warnings = [w.UNUSED_VALUE_DECLARATION_32,
                w.UNUSED_MODULE_60,
                w.UNUSED_VAR_STRICT_27]
)

#################
batch_test_macro(
    name    = "Localexn_test",
    stdout_actual = "localexn.stdout",
    stdout_expected = "localexn.reference",
    test_module    = ":Localexn",
)

test_module(
    name   = "Localexn",
    struct = "localexn.ml",
    stdlib_deps   = ["//stdlib:Primitives"]
)

#################
batch_test_macro(
    name    = "Localfunction_test",
    stdout_actual = "localfunction.stdout",
    stdout_expected = "localfunction.reference",
    test_module    = ":Localfunction",
)

test_module(
    name   = "Localfunction",
    struct = "localfunction.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Gc"]
    })
)

#################
batch_test_macro(
    name    = "Maps_test",
    stdout_actual = "maps.stdout",
    stdout_expected = "maps.reference",
    test_module    = ":Maps",
)

test_module(
    name   = "Maps",
    struct = "maps.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Map",
            "//stdlib:Stdlib.Printf",
        ]
    })
)

#################
batch_test_macro(
    name        = "Min_int_test",
    test_module = ":Min_int",
    stdout_actual = "min_int.stdout",
    stdout_expected = "min_int.reference",
)

test_module(
    name        = "Min_int",
    struct      = "min_int.ml",
    stdlib_deps = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Int"]
    })
)

#################
batch_test_macro(
    name    = "Opt_variants_test",
    stdout_actual = "opt_variants.stdout",
    stdout_expected = "opt_variants.reference",
    test_module    = ":Opt_variants",
)

test_module(
    name   = "Opt_variants",
    struct = "opt_variants.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Queue",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Stack",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Weak",
    ]
)

#################
batch_test_macro(
    name    = "Patmatch_test",
    stdout_actual = "patmatch.stdout",
    stdout_expected = "patmatch.reference",
    test_module    = ":Patmatch",
)

test_module(
    name   = "Patmatch",
    struct = "patmatch.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf",
        ]
    }),
    warnings = [
        w.AMBIGUOUS_NAME_41,
        w.DISAMBIGUATED_NAME_42,
        w.FRAGILE_MATCH_4,
        w.OPEN_SHADOW_LABEL_CONSTRUCTOR_45,
        w.UNUSED_VAR_STRICT_27]
)

###################
diff_test(
    name = "Patmatch_for_multiple_test",
    file1 = "patmatch_for_multiple.ml",
    file2 = "Patmatch_for_multiple_expect",
    timeout = "short",
    tags = ["inline_expect"]
)

inline_expect_module(
    name = "Patmatch_for_multiple_expect",
    struct = "patmatch_for_multiple.ml",
    opts = ["-drawlambda", "-dlambda"],
    # nocopts = True,
    stdlib_deps = ["//stdlib"],
)

###################
diff_test(
    name = "Patmatch_incoherence_test",
    file1 = "patmatch_incoherence.ml",
    file2 = "Patmatch_incoherence_expect2",
    timeout = "short",
    tags = ["inline_expect"]
)

inline_expect_module(
    name = "Patmatch_incoherence_expect2",
    struct = ":Patmatch_incoherence_expect",
    opts = ["-no-principal"]
)

inline_expect_module(
    name = "Patmatch_incoherence_expect",
    struct = "patmatch_incoherence.ml",
    opts = ["-no-principal"]
    # warnings = [w.PARTIAL_MATCH_8],
)

###################
diff_test(
    name = "Patmatch_split_no_or_test",
    file1 = "patmatch_split_no_or.ml",
    file2 = ":Patmatch_split_no_or_expect",
    timeout = "short",
    tags = ["inline_expect"]
)

inline_expect_module(
    name = "Patmatch_split_no_or_expect",
    struct = "patmatch_split_no_or.ml",
    opts   = ["-dlambda"]
)

#################
batch_test_macro(
    name    = "Pr7253_test",
    stdout_actual = "pr7253.stdout",
    stdout_expected = "pr7253.reference",
    test_module    = ":Pr7253",
)

test_module(
    name   = "Pr7253",
    struct = "pr7253.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Printexc",
        ]
    }),
    warnings = [w.UNUSED_VAR_STRICT_27]
)

#################
batch_test_macro(
    name    = "Pr7533_test",
    stdout_actual = "pr7533.stdout",
    stdout_expected = "pr7533.reference",
    test_module    = ":Pr7533",
)

test_module(
    name   = "Pr7533",
    struct = "pr7533.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Sys",
        ]
    })
)

#################
batch_test_macro(
    name    = "Pr7657_test",
    stdout_actual = "pr7657.stdout",
    stdout_expected = "pr7657.reference",
    test_module    = ":Pr7657",
    opts  = OCAML_COMPILER_OPTS
)

test_module(
    name   = "Pr7657",
    struct = "pr7657.ml",
    # stdlib_deps    = ["//stdlib:Primitives"]
    opts   = [
        "-no-strict-sequence",
        # "-w", "-21-5"
    ],
    stdlib_deps  =["//stdlib:Primitives"],
    warnings = [
        w.ELIMINATED_OPTIONAL_ARGUMENTS_48,
        w.UNUSED_VAR_STRICT_27
    ]
)

#################
batch_test_macro(
    name    = "Recvalues_test",
    stdout_actual = "recvalues.stdout",
    stdout_expected = "recvalues.reference",
    test_module    = ":Recvalues",
)

test_module(
    name   = "Recvalues",
    struct = "recvalues.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Gc",
            "//stdlib:Stdlib.List",
        ]
    }),
    warnings = [w.UNUSED_FOR_INDEX_35]
)

#################
batch_test_macro(
    name    = "Sets_test",
    stdout_actual = "sets.stdout",
    stdout_expected = "sets.reference",
    test_module    = ":Sets",
)

test_module(
    name   = "Sets",
    struct = "sets.ml",
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ],
    warnings = [w.UNUSED_MODULE_60]
)

#################
batch_test_macro(
    name    = "Stringmatch_test",
    stdout_actual = "stringmatch.stdout",
    stdout_expected = "stringmatch.reference",
    test_module    = ":Stringmatch",
)

test_module(
    name   = "Stringmatch",
    struct = "stringmatch.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib.String",

    ],
    warnings = [w.UNUSED_REC_FLAG_39]
)

#################
batch_test_macro(
    name    = "Switch_opts_test",
    stdout_actual = "switch_opts.stdout",
    stdout_expected = "switch_opts.reference",
    test_module    = ":Switch_opts",
)

test_module(
    name   = "Switch_opts",
    struct = "switch_opts.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
    ],
    warnings = [w.UNUSED_VAR_STRICT_27]
)

#################
batch_test_macro(
    name    = "Tailcalls_test",
    stdout_actual = "tailcalls.stdout",
    stdout_expected = "tailcalls.reference",
    test_module    = ":Tailcalls",
)

test_module(
    name   = "Tailcalls",
    struct = "tailcalls.ml",
    stdlib_deps   = ["//stdlib:Primitives"]
)

#################
batch_test_macro(
    name    = "Trigraph_test",
    test_module = ":Trigraph",
    stdout_actual = "trigraph.stdout",
    stdout_expected = "trigraph.reference",
)

test_module(
    name   = "Trigraph",
    struct = "trigraph.ml",
    stdlib_deps = ["//stdlib:Stdlib"]
)

#################
batch_test_macro(
    name    = "Tuple_match_test",
    stdout_actual = "tuple_match.stdout",
    stdout_expected = "tuple_match.reference",
    test_module    = ":Tuple_match",
    # prologue = ["//stdlib:Primitives"],
    opts = ["-open", "Stdlib"]
)

test_module(
    name   = "Tuple_match",
    struct = "tuple_match.ml",
    opts   = ["-open", "Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Printf"
    ]
)

compile_fail_test(
    name   = "unit_naming_test",
    struct = "unit_naming.ml",
    stdout_expected = "unit_naming.compilers.reference",
    stdlib_deps   = [
        ":CamlCase"
    ],
)

#################
batch_test_macro(
    name    = "Zero_divided_by_n_test",
    stdout_actual = "zero_divided_by_n.stdout",
    stdout_expected = "zero_divided_by_n.reference",
    test_module    = ":Zero_divided_by_n",
)

test_module(
    name   = "Zero_divided_by_n",
    struct = "zero_divided_by_n.ml",
    opts   = ["-nopervasives"],
    stdlib_deps   = ["//stdlib:Stdlib"],
)

