package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

load("//bzl:rules.bzl", "cc_preprocess")

load("//test:rules.bzl",
     "compile_module_tests",
     "inline_expect_module",
     "module_program_tests",
     "ocamlcc_diff_test",
     "ocamlcc_diff_tests",
     "test_program",
     "test_program_outputs",
     "test_module",

     "inline_assertion_vv_test",
     "inline_assertion_tests"
)
load("//test/rules:inline_expect_module.bzl", "inline_expect_test")

################################################################
test_suite(
    name = "basic",
    tests = [
        ":Arrays_tests",
        ":Bigints_tests",
        ":Boxedints_tests",
        ":Constprop_tests",
        ":Divint_tests",
        ":Equality_tests",
        ":Eval_order_1_tests",
        ":Eval_order_2_tests",
        ":Eval_order_3_tests",
        ":Eval_order_4_tests",
        ":Eval_order_6_tests",
        ":Eval_order_7_tests",
        ":Eval_order_pr10283_tests",
        ":Float_tests",
        ":Float_physical_equality_tests",
        ":Includestruct_tests",
        ":Localexn_tests",
        ":Localfunction_tests",
        ":Maps_tests",
        ":Min_int_tests",
        ":Opt_variants_tests",
        ":Patmatch_tests",
        ":Patmatch_for_multiple_test",
        ":Patmatch_incoherence_test",
        ":Patmatch_split_no_or_test",
        ":Pr7253_tests",
        ":Pr7533_tests",
        ":Pr7657_tests",
        ":Recvalues_tests",
        ":Sets_tests",
        ":Stringmatch_tests",
        ":Switch_opts_tests",
        ":Tailcalls_tests",
        ":Trigraph_tests",
        ":Tuple_match_tests",
        ":Unit_naming_tests",
        ":Zero_divided_by_n_tests",
    ],
)

############
## WARNING: arrays.ml is kind of fake assertion_test; it writes fail
## msgs to stdout instead of returning non-zero, so empty std means pass
module_program_tests(
    name              = "Arrays_tests",
    structfile        = "arrays.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Gc",
    ],
    stdout_expected   = "arrays.reference", ## empty file for diffing
)

############
## For demo purposes we include the explicit expansion of macros for
## bigints.ml. To see the expansion for one of the
## module_program_tests targets below, e.g. Boxedints_tests, run:

# bazel query 'attr(generator_name, Boxedints_tests, testsuite/tests/basic/...)' --output=build

# module_program_tests(
#     name        = "Bigints_tests",
#     # compilers   = ["ocamlc.byte", "ocamlc.opt"],
#     structfile  = "bigints.ml",
#     warnings = ["@A", "-open-shadow-identifier", "-unused-module"],
#     stdlib_deps = ["//stdlib:Stdlib.Sys"],
#     stdout_expected = "bigints.reference",
# )
# module_program_tests() expands to:
## ocamlcc_diff_tests()
## test_program_outputs()
## test_program()
## test_module()
## test_suite()

# ocamlcc_diff_tests is a macro, expanded from module_program_tests -
# since this is a macro, it is also expanded, so it will not show up
# as a query result:
# ocamlcc_diff_tests(
#     name          = "Bigints_diff_tests",
#     expected = "bigints.reference",
#     actual = "bigints.exe.stdout",
# )

# ocamlcc_diff_tests expands to one ocamlcc_diff_test per compiler:
ocamlcc_diff_test(
    name = "Bigints_ss_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamlopt.opt",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_sv_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamlc.opt",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_sx_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamloptx.opt",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_vs_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamlopt.byte",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_vv_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamlc.byte",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_vx_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamloptx.byte",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_xs_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamlopt.optx",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_xv_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamlc.optx",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)
ocamlcc_diff_test(
    name = "Bigints_xx_test",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    timeout = "short",
    compiler = "ocamloptx.optx",
    expected = "//testsuite/tests/basic:bigints.reference",
    actual = "//testsuite/tests/basic:Bigints.exe.stdout",
)

## expanded from module_program_tests:
test_program_outputs(
    name = "Bigints.exe.outputs",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    test_executable = "//testsuite/tests/basic:Bigints.exe",
    stdout = "//testsuite/tests/basic:Bigints.exe.stdout",
    stderr = "//testsuite/tests/basic:Bigints.exe.stderr",
)

## expanded from module_program_tests:
test_program(
    name = "Bigints.exe",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    main = "//testsuite/tests/basic:Bigints",
)

## expanded from module_program_tests:
test_module(
    name = "Bigints",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    opts = [],
    warnings = ["@A", "-open-shadow-identifier", "-unused-module"],
    struct = "//testsuite/tests/basic:bigints.ml",
    stdlib_deps = ["//stdlib:Stdlib.Sys"],
    sig_deps = [],
    alerts = [],
    dump = [],
)

## expanded from ocamlcc_diff_tests; lists all ocamlcc_diff_test targets:
test_suite(
    name = "Bigints_tests",
    generator_name = "Bigints_tests",
    generator_function = "module_program_tests",
    generator_location = "testsuite/tests/basic/BUILD.bazel:108:21",
    tests = ["//testsuite/tests/basic:Bigints_ss_test", "//testsuite/tests/basic:Bigints_sv_test", "//testsuite/tests/basic:Bigints_sx_test", "//testsuite/tests/basic:Bigints_vs_test", "//testsuite/tests/basic:Bigints_vv_test", "//testsuite/tests/basic:Bigints_vx_test", "//testsuite/tests/basic:Bigints_xs_test", "//testsuite/tests/basic:Bigints_xv_test", "//testsuite/tests/basic:Bigints_xx_test"],
)

################################################################
module_program_tests(
    name        = "Boxedints_tests",
    # compilers   = ["ocamlc.byte", "ocamlc.opt"],
    structfile  = "boxedints.ml",
    warnings = ["@A", "-open-shadow-identifier", "-unused-module"],
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Hashtbl",
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf"
        ]
    }),
    stdout_expected = "boxedints.reference",
    # stderr_expected = None,
)

################################################################
## with C Preprocessing
# (* TEST
#    flags = "-pp '${c_preprocessor}'"
#    ocaml_filetype_flag = "-impl"
#    * bytecode
#      compare_programs = "false"
#    * native
# *)

#################
module_program_tests(
    name              = "Constprop_tests",
    structfile        = "constprop.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Int64",
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf",
        ]
    }),
    stdout_expected   = "constprop.ml.reference",
)

cc_preprocess(
    name = "constprop.pp",
    src  = "constprop.ml.c",
    out  = "constprop.ml"
)

################################################################
module_program_tests(
    name              = "Divint_tests",
    structfile        = "divint.ml",
    stdlib_deps = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf"
        ]
    }),
    warnings = ["-open-shadow-identifier", "-unused-for-index"],
    stdout_expected   = "divint.reference",
)

#################
module_program_tests(
    name              = "Equality_tests",
    structfile        = "equality.ml",
    stdlib_deps = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Fun"]
    }),
    stdout_expected   = "equality.reference",
)

#################
module_program_tests(
    name              = "Eval_order_1_tests",
    structfile        = "eval_order_1.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Printf"]
    }),
    stdout_expected   = "eval_order_1.reference",
)

#################
module_program_tests(
    name              = "Eval_order_2_tests",
    structfile        = "eval_order_2.ml",
    stdlib_deps   = ["//stdlib:Primitives"],
    warnings = ["-unused-var-strict"],
    stdout_expected   = "eval_order_2.reference",
)

#################
module_program_tests(
    name              = "Eval_order_3_tests",
    structfile        = "eval_order_3.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Printf"]
    }),
    warnings = ["-unused-var-strict"],
    stdout_expected   = "eval_order_3.reference",
)

#################
module_program_tests(
    name              = "Eval_order_4_tests",
    structfile        = "eval_order_4.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Primitives"]
    }),
    warnings = ["-unused-var-strict"],
    stdout_expected   = "eval_order_4.reference",
)

#################
module_program_tests(
    name              = "Eval_order_6_tests",
    structfile        = "eval_order_6.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Int"]
    }),
    warnings = [
        "-missing-record-field-pattern",
        "-match-on-mutable-state-prevent-uncurry"
    ],
    stdout_expected   = "eval_order_6.reference",
)

#################
module_program_tests(
    name              = "Eval_order_7_tests",
    structfile        = "eval_order_7.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Primitives"]
    }),
    stdout_expected   = "eval_order_7.reference",
)

#################
module_program_tests(
    name              = "Eval_order_pr10283_tests",
    structfile        = "eval_order_pr10283.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Printf"]
    }),
    stdout_expected   = "eval_order_pr10283.reference",
)

#################
module_program_tests(
    name              = "Float_tests",
    structfile        = "float.ml",
    warnings          = [],
    stdlib_deps       = ["//stdlib:Stdlib.Printf"],
    stdout_expected   = "float.reference",
)

#################
## NB: this case uses assertions so we do not need to diff actual v.
## expected.
inline_assertion_tests(
    name = "Float_physical_equality_tests",
    structfile = "float_physical_equality.ml",
    stdlib_deps   = ["//stdlib:Primitives"],
    # stdout_expected   = "Float_physical_equality.reference", ## empty
)

#################
module_program_tests(
    name              = "Includestruct_tests",
    structfile        = "includestruct.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:CamlinternalOO",
            "//stdlib:Stdlib.Printexc",
            "//stdlib:Stdlib.Printf",
        ]
    }),
    warnings = ["-unused-value-declaration",
                "-unused-module",
                "-unused-var-strict"],
    stdout_expected   = "includestruct.reference",
)

#################
module_program_tests(
    name              = "Localexn_tests",
    structfile        = "localexn.ml",
    warnings          = [],
    stdlib_deps       = ["//stdlib:Primitives"],
    stdout_expected   = "localexn.reference",
)

#################
module_program_tests(
    name              = "Localfunction_tests",
    structfile        = "localfunction.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Gc"]
    }),
    stdout_expected   = "localfunction.reference",
)

#################
module_program_tests(
    name              = "Maps_tests",
    structfile        = "maps.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Map",
            "//stdlib:Stdlib.Printf",
        ]
    }),
    stdout_expected   = "maps.reference",
)

#################
module_program_tests(
    name              = "Min_int_tests",
    structfile        = "min_int.ml",
    stdlib_deps = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": ["//stdlib:Stdlib.Int"]
    }),
    stdout_expected   = "min_int.reference",
)

#################
module_program_tests(
    name              = "Opt_variants_tests",
    structfile        = "opt_variants.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Queue",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Stack",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Weak",
    ],
    stdout_expected   = "opt_variants.reference",
)

#################
module_program_tests(
    name              = "Patmatch_tests",
    structfile        = "patmatch.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Printf",
        ]
    }),
    warnings = ["-ambiguous-name",
                "-disambiguated-name",
                "-fragile-match",
                "-open-shadow-label-constructor",
                "-unused-var-strict"],
    stdout_expected   = "patmatch.reference",
)

################################################################
## WARNING WARNING WARNING

## ocamltest runs the inline expect tool twice for the following three
## patmatch cases. Output of first run is input to second run,
# plus second compile uses -principal.  Why?

###################
inline_expect_test(
    name = "Patmatch_for_multiple_test",
    struct = "patmatch_for_multiple.ml",
    opts = ["-drawlambda", "-dlambda"],
    # nocopts = True,
    stdlib_deps = ["//stdlib"],
)

###################
## FIXME: ocamltest runs twice, output of first as input of second - why?
## second compile uses -principal
# inline_expect_test(
#     name = "Patmatch_incoherence_test",
#     struct = "patmatch_incoherence.ml",
#     opts = ["-no-principal"],
# )

diff_test( #FIXME: ocamlcc_diff_test
    name = "Patmatch_incoherence_test",
    file1 = "patmatch_incoherence.ml",
    file2 = "Patmatch_incoherence_expect2", # = patmatch_incoherence.corrected.corrected
    timeout = "short",
    tags = ["inline_expect"]
)

diff_test( #FIXME: ocamlcc_diff_test
    name = "Patmatch_incoherence2_test",
    file1 = "Patmatch_incoherence_expect", # = .corrected
    file2 = "Patmatch_incoherence_expect2", # = .corrected.corrected
    timeout = "short",
    tags = ["inline_expect"]
)

inline_expect_module(
    name = "Patmatch_incoherence_expect2",
    struct = ":Patmatch_incoherence_expect",
    opts = ["-no-principal"]
)

inline_expect_module(
    name = "Patmatch_incoherence_expect",
    struct = "patmatch_incoherence.ml",
    opts = ["-no-principal"]
    # warnings = [w.PARTIAL_MATCH_8],
)

###################
inline_expect_test(
    name = "Patmatch_split_no_or_test",
    struct = "patmatch_split_no_or.ml",
    opts = ["-principal", "-dlambda"], # "-no-principal",
)

# diff_test( #FIXME: ocamlcc_diff_test
#     name = "Patmatch_split_no_or_test",
#     file1 = "patmatch_split_no_or.ml",
#     file2 = ":Patmatch_split_no_or_expect",
#     timeout = "short",
#     tags = ["inline_expect"]
# )

# inline_expect_module(
#     name = "Patmatch_split_no_or_expect",
#     struct = "patmatch_split_no_or.ml",
#     opts   = ["-dlambda"]
# )

#################
module_program_tests(
    name              = "Pr7253_tests",
    structfile        = "pr7253.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Printexc",
        ]
    }),
    warnings = ["-unused-var-strict"],
    stdout_expected   = "pr7253.reference",
)

#################
module_program_tests(
    name              = "Pr7533_tests",
    structfile        = "pr7533.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.List",
            "//stdlib:Stdlib.Sys",
        ]
    }),
    stdout_expected   = "pr7533.reference",
)

#################
module_program_tests(
    name              = "Pr7657_tests",
    structfile        = "pr7657.ml",
    opts   = ["-no-strict-sequence"],
    stdlib_deps  =["//stdlib:Primitives"],
    warnings = [
        "-eliminated-optional-arguments",
        "-unused-var-strict"
    ],
    stdout_expected   = "pr7657.reference",
)

#################
module_program_tests(
    name              = "Recvalues_tests",
    structfile        = "recvalues.ml",
    stdlib_deps   = select({
        "//testsuite/tests:with-stdlib?":["//stdlib"],
        "//conditions:default": [
            "//stdlib:Stdlib.Gc",
            "//stdlib:Stdlib.List",
        ]
    }),
    warnings = ["-unused-for-index"],
    stdout_expected   = "recvalues.reference",
)

#################
module_program_tests(
    name              = "Sets_tests",
    structfile        = "sets.ml",
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ],
    warnings = ["-unused-module"],
    stdout_expected   = "sets.reference",
)

#################
module_program_tests(
    name              = "Stringmatch_tests",
    structfile        = "stringmatch.ml",
    stdlib_deps       = ["//stdlib:Stdlib.String"],
    warnings          = ["-unused-rec-flag"],
    stdout_expected   = "stringmatch.reference",
)

#################
module_program_tests(
    name              = "Switch_opts_tests",
    structfile        = "switch_opts.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
    ],
    warnings = ["-unused-var-strict"],
    stdout_expected   = "switch_opts.reference",
)

#################
module_program_tests(
    name              = "Tailcalls_tests",
    structfile        = "tailcalls.ml",
    stdlib_deps   = ["//stdlib:Primitives"],
    stdout_expected   = "tailcalls.reference",
)

#################
module_program_tests(
    name              = "Trigraph_tests",
    structfile        = "trigraph.ml",
    stdlib_deps = ["//stdlib:Stdlib"],
    stdout_expected   = "trigraph.reference",
)

#################
module_program_tests(
    name              = "Tuple_match_tests",
    structfile        = "tuple_match.ml",
    stdlib_deps   = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Printf"
    ],
    stdout_expected   = "tuple_match.reference",
)

################
compile_module_tests(
    name            = "Unit_naming_tests",
    structfile      = "unit_naming.ml",
    deps            = [":CamlCase"],
    stdlib_deps     = ["//stdlib:Stdlib"],
    rc_expected     = 2,
    stderr_expected = "unit_naming.compilers.reference",
    stderr_actual   = "unit_naming.ml.stderr",
)
############
test_module( # not a test, used by unit_naming_test
    name   = "CamlCase",
    struct = "camlCase.ml",
)

#################
module_program_tests(
    name              = "Zero_divided_by_n_tests",
    structfile        = "zero_divided_by_n.ml",
    stdlib_deps   = ["//stdlib:Stdlib"],
    stdout_expected   = "zero_divided_by_n.reference",
)
