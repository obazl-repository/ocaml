load("//test:rules.bzl", "test_module")
load("//test/rules:batch_test.bzl", "batch_native_tests")
# load("//test/rules:inline_test.bzl", "inline_native_tests")

MODULE_OPTS = []

# test_suite(
#     name = "testsuite_tests_asmcomp_lib",
#     tests  = [
#         ":0001-test",
#         ":Bind_tuples",
#         ":Compare",
#         ":Func_sections",
#         ":Is_static",
#         ":Is_static_flambda",
#         ":Is_static_flambda_dep",
#         ":Lift_mutable_let_flambda",
#         ":Optargs",
#         ":Polling_insertion",
#         ":Register_typing",
#         ":Register_typing_switch",
#         ":Simple_float_const",
#         ":Simple_float_const_opaque",
#         ":Static_float_array_flambda",
#         ":Static_float_array_flambda_opaque",
#         ":Staticalloc",
#         ":Try_checkbound",
#         ":Unrolling_flambda",
#         ":Unrolling_flambda2",
#     ],
# )

test_module(
    name   = "0001-test",
    struct = "0001-test.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

# test_module(
# inline_native_tests(
#     name   = "Bind_tuples",
#     struct = "bind_tuples.ml",
#     opts = MODULE_OPTS,
#     stdlib_deps   = ["//stdlib:Stdlib.Gc"],
#     stdout_actual = "eval_order_6.stdout",
#     stdout_expected = "eval_order_6.reference",
# )

batch_native_tests(
    name   = "Compare",
    struct = "compare.ml",
    stdlib_deps   = ["//stdlib:Stdlib"],
    stdout_expected = ":compare.reference",
)

# batch_native_tests(
#     name   = "Func_sections",
#     struct = "func_sections.ml",
#     opts = MODULE_OPTS,
#     deps   = [
#     ]
# )

test_module(
    name   = "Lift_mutable_let_flambda",
    struct = "lift_mutable_let_flambda.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

# inline_native_tests(
#     name   = "Optargs",
#     struct = "optargs.ml",
# )

# compile_module_native_tests(
#     name   = "Poll_attr_both",
#     struct = "poll_attr_both.ml",
# )

test_module(
    name   = "Polling_insertion",
    struct = "polling_insertion.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Register_typing",
    struct = "register_typing.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Register_typing_switch",
    struct = "register_typing_switch.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Simple_float_const",
    struct = "simple_float_const.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Simple_float_const_opaque",
    struct = "simple_float_const_opaque.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Static_float_array_flambda",
    struct = "static_float_array_flambda.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Static_float_array_flambda_opaque",
    struct = "static_float_array_flambda_opaque.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Staticalloc",
    struct = "staticalloc.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Try_checkbound",
    struct = "try_checkbound.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Unrolling_flambda",
    struct = "unrolling_flambda.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

test_module(
    name   = "Unrolling_flambda2",
    struct = "unrolling_flambda2.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

