## GENERATED FILE ##

load("//bzl:rules.bzl",
     "ocaml_library",
     "ocaml_module",
)

MODULE_OPTS = ["-nostdlib"]

ocaml_library(
    name = "testsuite_tests_typing-modules_lib",
    modules  = [
        ":Test",
        ":Aliases",
        ":Anonymous",
        ":Applicative_functor_type",
        ":Extension_constructors_errors_test",
        ":Firstclass",
        ":Functors",
        ":Generative",
        ":Illegal_permutation",
        ":Inclusion_errors",
        ":Merge_constraint",
        ":Module_type_substitution",
        ":Nondep",
        ":Nondep_private_abbrev",
        ":Normalize_path",
        ":Pr10298",
        ":Pr10399",
        ":Pr5911",
        ":Pr6394",
        ":Pr6633",
        ":Pr7207",
        ":Pr7348",
        ":Pr7726",
        ":Pr7787",
        ":Pr7818",
        ":Pr7851",
        ":Pr8810",
        ":Pr9384",
        ":Pr9695",
        ":Printing",
        ":Private",
        ":Records_errors_test",
        ":Recursive",
        ":Unroll_private_abbrev",
        ":Variants_errors_test",
        ":With_ghosts",
    ],
)

ocaml_module(
    name   = "Test",
    struct = "Test.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Aliases",
    struct = "aliases.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Anonymous",
    struct = "anonymous.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Applicative_functor_type",
    struct = "applicative_functor_type.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Extension_constructors_errors_test",
    struct = "extension_constructors_errors_test.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Firstclass",
    struct = "firstclass.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Functors",
    struct = "functors.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Generative",
    struct = "generative.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Illegal_permutation",
    struct = "illegal_permutation.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Inclusion_errors",
    struct = "inclusion_errors.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Merge_constraint",
    struct = "merge_constraint.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Module_type_substitution",
    struct = "module_type_substitution.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Nondep",
    struct = "nondep.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Nondep_private_abbrev",
    struct = "nondep_private_abbrev.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Normalize_path",
    struct = "normalize_path.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr10298",
    struct = "pr10298.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr10399",
    struct = "pr10399.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr5911",
    struct = "pr5911.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr6394",
    struct = "pr6394.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr6633",
    struct = "pr6633.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr7207",
    struct = "pr7207.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr7348",
    struct = "pr7348.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr7726",
    struct = "pr7726.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr7787",
    struct = "pr7787.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr7818",
    struct = "pr7818.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr7851",
    struct = "pr7851.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr8810",
    struct = "pr8810.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr9384",
    struct = "pr9384.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Pr9695",
    struct = "pr9695.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Printing",
    struct = "printing.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Private",
    struct = "private.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Records_errors_test",
    struct = "records_errors_test.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Recursive",
    struct = "recursive.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Unroll_private_abbrev",
    struct = "unroll_private_abbrev.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Variants_errors_test",
    struct = "variants_errors_test.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "With_ghosts",
    struct = "with_ghosts.ml",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

