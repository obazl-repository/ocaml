load("//bzl:rules.bzl",
     "test_archive",
     "test_executable",
     "test_library",
     "test_module",
     "test_signature",
     "ocaml_test",
     "expect_test",
     "inline_expect_test",
     "lambda_expect_test"
)

test_library(
    name = "testsuite_tests_basic-modules_lib",
    manifest = [
        ":Anonymous",
        ":Main",
        ":Offset",
        ":Pr4008",
        ":Pr6726",
        ":Pr7427",
        ":Recursive_module_evaluation_errors",
        ":Recursive_module_init",
    ],
)

# ocaml_test just compiles and runs executable
ocaml_test(
    name = "anonymous_test",
    main = ":Anonymous",
    prologue = [
    ],
    timeout = "short"
)

lambda_expect_test(
    name   = "Anonymous_test",
    struct   = "anonymous.ml",
    expected = "anonymous.ocamlc.reference",
    deps = ["//stdlib"]         # FIXME: make this implicit?
)

test_module(
    name   = "Anonymous",
    struct   = "anonymous.ml",
    dump = [
        "lambda",
        # "rawlambda",
        # "clambda",
        # "rawclambda",
        # "cmm",
        # "parsetree",
        # "instr"
        # "instruction-selection"
    ],
    opts   = [
        "-nostdlib",
        "-nopervasives",
        # "-dno-locations",
        # "-dno-unique-ids"
    ],
    deps = ["//stdlib"]
)

ocaml_test(
    name = "main_test",
    main = ":Main",
    prologue = [
        ":Offset",
        ":Pr4008",
        ":Pr7427",
        ":Pr6726"
    ],
    timeout = "short"
)

expect_test(
    name     = "Main_test",
    stdout   = "Main.stdout",
    expected = "main.reference",
    prologue = [
        # "//stdlib",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
        ":Offset",
        ":Pr4008",
        ":Pr7427",
        ":Pr6726"
    ],
    main     = ":Main",
    epilogue = [],
    timeout = "short"
)

test_module(
    name   = "Main",
    struct = "main.ml",
    sig    = "Main_cmi",
    deps   = [
        # "//stdlib",
        # "//stdlib:Stdlib",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
        ":Offset",
        ":Pr4008",
        ":Pr7427",
        ":Pr6726"
    ]
)

test_signature(
    name = "Main_cmi",
    src  = "main.mli",
    deps = ["//stdlib:Stdlib"]
)

test_module(
    name   = "Offset",
    struct = "offset.ml",
    deps   = [
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        ":Pr6726"
    ]
)

test_module(
    name   = "Pr4008",
    struct = "pr4008.ml",
    deps   = [
        "//stdlib:primitives",
        # "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
    ]
)

test_module(
    name   = "Pr6726",
    struct = "pr6726.ml",
    deps = ["//stdlib:Stdlib"]
)

test_module(
    name   = "Pr7427",
    struct = "pr7427.ml",
    deps = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name = "Recursive_module_evaluation_errors",
    src  = "recursive_module_evaluation_errors.ml",
)

test_module(
    name   = "Recursive_module_init",
    struct = "recursive_module_init.ml",
    deps = [
        # "//stdlib"

        "//stdlib:primitives",
        # "//stdlib:CamlinternalOO",
        # "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

