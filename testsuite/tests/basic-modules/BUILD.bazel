load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("//test:rules.bzl",
     "test_library",
     "test_module",
     "test_signature",
     "batch_tests",
     "batch_vv_test",
     "inline_expect_module",
     "ocamlcc_diff_test",
     "ocamlcc_diff_tests",
     # "compile_dump_diff_test_macro",
)
load("//test/rules:normalizers.bzl", "test_stdlog_normalize")

load("//config:WARNINGS.bzl", "w")

################################################################
test_suite(
    name = "basic-modules",
    tests = [
        ":Anonymous_tests",
        ":Main_expect_test",
        ":Recursive_module_init_expect_test",
        ":Recursive_module_evaluation_errors_test",
    ],
)

###################
# diff_test(
#     name = "Anonymous_diff_test",
#     file1 = "anonymous.ocamlc.reference.norm",
#     file2 = ":anonymous.ml.stdlog.norm",
#     timeout = "short"
# )
ocamlcc_diff_test(
    name = "Anonymous_tests",
    expected = ":anonymous.ocamlc.reference.norm",
    actual = ":anonymous.ml.stdlog.norm",
    timeout = "short"
)
# ocamlcc_diff_tests(
#     name = "Anonymous_tests",
#     compilers = ["ocamlc.byte", "ocamlc.opt"],
#     expected = "anonymous.ocamlc.reference.norm",
#     actual   = ":anonymous.ml.stdlog.norm",
#     tags = ["warnings"],
# )

test_stdlog_normalize(
    name = "Anonymous_norm",
    expected     = "anonymous.ocamlc.reference",
    expected_out = ":anonymous.ocamlc.reference.norm",
    actual     = ":anonymous.ml.stdlog",
    actual_out = ":anonymous.ml.stdlog.norm",
    verbose = True
)

test_module(
    name   = "Anonymous",
    struct   = "anonymous.ml",
    stdlib_deps = ["//stdlib:CamlinternalMod"],
    opts   = ["-dno-unique-ids"],
    dump = ["lambda"], ##FIXME:  dump => log
    warnings = [ # do not report (write to stderr)
        "-unused-type-declaration", # 34
        "-unused-value-declaration" #_32
    ],
    stdlog_actual = "anonymous.ml.stdlog",
)

batch_tests(
    name     = "Main_expect_test",
    test_module = ":Main",
    stdout_actual   = "Main.stdout",
    stdout_expected = "main.reference",
    timeout = "short"
)

test_module(
    name   = "Main",
    struct = "main.ml",
    sig    = "Main_cmi",
    deps   = [
        ":Offset",
        ":Pr4008",
        ":Pr7427",
        ":Pr6726"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ],
    warnings = [w.UNUSED_MODULE_60, w.UNUSED_VALUE_DECLARATION_32]
)

test_signature(
    name = "Main_cmi",
    src  = "main.mli",
    stdlib_deps = ["//stdlib:Stdlib_cmi"]
)

test_module(
    name   = "Offset",
    struct = "offset.ml",
    deps   = [
        ":Pr6726"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ],
    warnings = [w.UNUSED_VALUE_DECLARATION_32, w.UNUSED_VAR_STRICT_27]
)

test_module(
    name   = "Pr4008",
    struct = "pr4008.ml",
    stdlib_deps   = [
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
    ]
)

test_module(
    name   = "Pr6726",
    struct = "pr6726.ml",
    stdlib_deps = ["//stdlib:Stdlib"],
    warnings = [w.UNUSED_VAR_STRICT_27]
)

test_module(
    name   = "Pr7427",
    struct = "pr7427.ml",
    stdlib_deps = ["//stdlib:Stdlib"]
)

################################################################
diff_test(
    name = "Recursive_module_evaluation_errors_test",
    file1 = "recursive_module_evaluation_errors.ml",
    file2 = ":Recursive_module_evaluation_errors",
    timeout = "short",
    tags = ["inline_expect"]
)

inline_expect_module(
    name = "Recursive_module_evaluation_errors",
    struct  = "recursive_module_evaluation_errors.ml",
    stdlib_deps = [
        ## FIXME: deps ordering not working, these must be listed in
        ## this order. This should happen automatically.
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib",
    ],
)

################################################################
batch_tests(
    name     = "Recursive_module_init_expect_test",
    test_module = ":Recursive_module_init",
    stdout_actual   = "Recursive_module_init.stdout",
    stdout_expected = "recursive_module_init.reference",
    timeout = "short"
)

test_module(
    name   = "Recursive_module_init",
    struct = "recursive_module_init.ml",
    # dump = ["lambda"],
    stdlib_deps = [
        # "//stdlib:Primitives",
        "//stdlib:CamlinternalOO",
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

