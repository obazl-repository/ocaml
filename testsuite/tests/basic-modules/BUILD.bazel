load("//test:rules.bzl",
     "test_executable",
     "test_library",
     "test_module",
     "test_signature",
     "ocaml_test",
     "expect_test",
     "inline_expect_test",
     "lambda_expect_test"
)

test_suite(
    name = "tests",
    tests = [
        # ":anonymous_test",
        ":Main_expect_test",
        ":Recursive_module_init_expect_test",
        ":Recursive_module_evaluation_errors",
    ],
)

# test_executable(
#     name    = "anonymous",
#     main    = ":Anonymous",
# )

# ocaml_test(
#     name = "anonymous_test",
#     main = ":Anonymous",
#     prologue = [
#     ],
#     timeout = "short"
# )

# flags = "-c -nostdlib -nopervasives -dlambda -dno-unique-ids"

lambda_expect_test(  ## ocamlc.byte
    name   = "Anonymous_test",
    test_module = ":Anonymous",
    expected = "anonymous.ocamlc.reference",
)

# lambda_expect_vs_test(  ## ocamlopt.byte
#     name   = "Anonymous_test",
#     struct   = "anonymous.ml",
#     expect   = "anonymous.ocamlc.reference",
#     deps = ["//stdlib"]         # FIXME: make this implicit?
# )

# lambda_expect_xx_test(  ## ocamloptx.optx
#     name   = "Anonymous_test",
#     struct   = "anonymous.ml",
#     expect   = "anonymous.ocamlc.reference",
#     deps = ["//stdlib"]         # FIXME: make this implicit?
# )

test_module(
    name   = "Anonymous",
    struct   = "anonymous.ml",
    dump = [
        "lambda",
        # "rawlambda",
        # "cmm",
        # "parsetree",
        # "instr",
        # "clambda",     ## native
        # "rawclambda",  ## native
        # "instruction-selection" # native?
    ],
    opts   = [
    #     "-nostdlib",
    #     "-nopervasives",
    #     # "-dno-locations",
        "-dno-unique-ids"
    ],
    stdlib_deps = ["//stdlib:CamlinternalMod"]
)

# ocaml_test(
#     name = "main_test",
#     main = ":Main",
#     prologue = [
#         ":Offset",
#         ":Pr4008",
#         ":Pr7427",
#         ":Pr6726"
#     ],
#     timeout = "short"
# )

expect_test(
    name     = "Main_expect_test",
    test_module = ":Main",
    stdout   = "Main.stdout",
    expected   = "main.reference",
    timeout = "short"
)

test_module(
    name   = "Main",
    struct = "main.ml",
    sig    = "Main_cmi",
    deps   = [
        ":Offset",
        ":Pr4008",
        ":Pr7427",
        ":Pr6726"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ],
)

test_signature(
    name = "Main_cmi",
    src  = "main.mli",
    stdlib_deps = ["//stdlib:Stdlib_cmi"]
)

test_module(
    name   = "Offset",
    struct = "offset.ml",
    deps   = [
        ":Pr6726"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ],
)

test_module(
    name   = "Pr4008",
    struct = "pr4008.ml",
    stdlib_deps   = [
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
    ]
)

test_module(
    name   = "Pr6726",
    struct = "pr6726.ml",
    stdlib_deps = ["//stdlib:Stdlib"]
)

test_module(
    name   = "Pr7427",
    struct = "pr7427.ml",
    stdlib_deps = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name = "Recursive_module_evaluation_errors",
    src  = "recursive_module_evaluation_errors.ml",
    deps = [
        ## FIXME: deps ordering not working, these must be listed in
        ## this order. This should happen automatically.
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib",
    ],
    timeout = "short",
    tags = ["inline_expect"]
)

expect_test(
    name     = "Recursive_module_init_expect_test",
    test_module = ":Recursive_module_init",
    stdout   = "Recursive_module_init.stdout",
    expected = "recursive_module_init.reference",
    timeout = "short"
)

test_module(
    name   = "Recursive_module_init",
    struct = "recursive_module_init.ml",
    # dump = ["lambda"],
    stdlib_deps = [
        # "//stdlib:Primitives",
        "//stdlib:CamlinternalOO",
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

