load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("//test:rules.bzl",
     "compile_module_tests",
     "module_program_tests",

     "test_library",
     "test_module",
     "test_signature",
     "batch_tests",
     "batch_vv_test",
     "ocamlcc_diff_test",
     "ocamlcc_diff_tests",
     # "compile_dump_diff_test_macro",
)
load("//test/rules:inline_expect_module.bzl", "inline_expect_test")

load("//test/rules:normalizers.bzl", "test_stdlog_normalize")

load("//config:WARNINGS.bzl", "w")

################################################################
test_suite(
    name = "basic-modules",
    tests = [
        ":Anonymous_tests",
        ":Main_tests",
        ":Recursive_module_init_tests",
        ":Recursive_module_evaluation_errors_test",
    ],
)

#####################
test_suite(
    name = "Anonymous_tests",
    tests = [
        ":Anonymous_vm_tests",
        ":Anonymous_sys_tests",
        ":Anonymous_flambda_tests",
    ]
)
compile_module_tests(
    name              = "Anonymous_vm_tests",
    compilers = ["ocamlc.byte", "ocamlc.opt", "ocamlc.optx"],
    structfile        = "anonymous.ml",
    stdlib_deps = ["//stdlib:CamlinternalMod"],
    opts   = ["-dno-unique-ids"],
    dump = ["lambda"], ##FIXME:  dump => log
    warnings = {"disable": [ # do not report (write to stderr)
        "unused-type-declaration", # 34
        "unused-value-declaration" #_32
    ]},
    stdlog_expected = "anonymous.ocamlc.reference",
    stdlog_actual = "anonymous.ml.stdlog",
)

compile_module_tests(
    name              = "Anonymous_sys_tests",
    compilers = ["ocamlopt.byte", "ocamlopt.opt", "ocamlopt.optx"],
    structfile        = "anonymous.ml",
    stdlib_deps = ["//stdlib:CamlinternalMod"],
    opts   = ["-dno-unique-ids"],
    dump = ["lambda"], ##FIXME:  dump => log
    warnings = {"disable": [ # do not report (write to stderr)
        "unused-type-declaration", # 34
        "unused-value-declaration" #_32
    ]},
    stdlog_expected = "anonymous.ocamlopt.reference",
    stdlog_actual = "anonymous.ml.sys.stdlog",
)

compile_module_tests(
    name              = "Anonymous_flambda_tests",
    compilers = ["ocamloptx.byte", "ocamloptx.opt", "ocamloptx.optx"],
    structfile        = "anonymous.ml",
    stdlib_deps = ["//stdlib:CamlinternalMod"],
    opts   = ["-dno-unique-ids"],
    dump = ["lambda"], ##FIXME:  dump => log
    warnings = {"disable": [ # do not report (write to stderr)
        "unused-type-declaration", # 34
        "unused-value-declaration" #_32
    ]},
    stdlog_expected = "anonymous.ocamlopt.flambda.reference",
    stdlog_actual = "anonymous.ml.flambda.stdlog",
)

#####################
module_program_tests(
    name            = "Main_tests",
    structfile      = "main.ml",
    cmi             = "Main_cmi",
    deps            = [
        ":Offset",
        ":Pr4008",
        ":Pr6726",
        ":Pr7427"
    ],
    stdlib_deps     = [
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ],
    warnings = {"disable": ["unused-module", "unused-value-declaration"]},
    stdout_expected = "main.reference",
)

test_signature(
    name = "Main_cmi",
    src  = "main.mli",
    stdlib_deps = ["//stdlib:Stdlib_cmi"]
)

test_module(
    name   = "Offset",
    struct = "offset.ml",
    deps   = [
        ":Pr6726"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ],
    warnings = {"disable": ["unused-var-strict", "unused-value-declaration"]},
)

test_module(
    name   = "Pr4008",
    struct = "pr4008.ml",
    stdlib_deps   = [
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
    ]
)

test_module(
    name   = "Pr6726",
    struct = "pr6726.ml",
    stdlib_deps = ["//stdlib:Stdlib"],
    warnings = {"disable": ["unused-var-strict"]}
)

test_module(
    name   = "Pr7427",
    struct = "pr7427.ml",
    stdlib_deps = ["//stdlib:Stdlib"]
)

################################################################
inline_expect_test(
    name   = "Recursive_module_evaluation_errors_test",
    struct = "recursive_module_evaluation_errors.ml",
    stdlib_deps = [
        ## FIXME: deps ordering not working, these must be listed in
        ## this order. This should happen automatically.
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib",
    ],
)

#####################
module_program_tests(
    name              = "Recursive_module_init_tests",
    structfile        = "recursive_module_init.ml",
    stdlib_deps = [
        # "//stdlib:Primitives",
        "//stdlib:CamlinternalOO",
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ],
    stdout_expected   = "recursive_module_init.reference",
)
