load("@bazel_skylib//rules:build_test.bzl", "build_test")

# load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

load("//test/rules:test_executable.bzl", "test_executable")
load("//test/rules:test_module.bzl", "test_module")

# load("//test/rules:compile_module_test.bzl", "compile_module_test")

load("//test/rules:inline_expect_module.bzl",
     # "inline_expect_module",
     "inline_expect_test",
)

test_suite(
    name = "typing-misc",
    tests  = [
        ":Build_as_type_test",
        ":Constraints_test",
        ":Deep_test",
        ":Disambiguate_principality_test",
        ":Empty_variant_test",
        ":Enrich_typedecl_test",
        ":Exotic_unifications_test",
        ":External_arity_test",
        ":Filter_params_test",
        ":Gpr2277_test",
        ":Includeclass_errors_test",
        ":Injectivity_test",
        ":Inside_out_test",
        ":Is_expansive_test",
        ":Labels_test",
        # ":Mapping_test",
        ":Normalize_type_test",
        ":Occur_check_test",
        ":Optbinders_test",
        ":Pat_type_sharing_test",
        ":Pattern_open_test",
        ":Polyvars_test",
        ":Pr6416_test",
        ":Pr6634_test",
        ":Pr6939-flat-float-array_test",
        #FIXME ":Pr6939-no-flat-float-array_test",
        ":Pr7103_test",
        ":Pr7228_test",
        #FIXME:  ":Pr7668_bad_test",
        ":Pr7712_test",
        ":Pr7937_test",
        ":Pr8548_test",
        ":Pr8548_split_test",
        ":Printing_test",
        # ":Range_test",
        # ":Range_intf_test",
        # ":Ranged_test",
        # ":Ranged_intf_test",
        ":Records_test",
        ":Scope_escape_test",
        # ":Typecore_empty_polyvariant_error_test",
        ":Typecore_errors_test",
        ":Typecore_nolabel_errors_test",
        ":Typetexp_errors_test",
        ":Unbound_type_variables_test",
        ":Unique_names_in_unification_test",
        ":Variance_test",
        ":Variant_test",
        ":Wellfounded_test",
        ":Wrong_kind_test",
    ],
)

inline_expect_test(
    name   = "Build_as_type_test",
    struct = "build_as_type.ml",
)

inline_expect_test(
    name   = "Constraints_test",
    struct = "constraints.ml",
    stdlib_deps   = ["//stdlib:CamlinternalOO", "//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Deep_test",
    struct = "deep.ml",
    stdlib_deps   = ["//stdlib:Stdlib", "//stdlib:Stdlib.List"]
)

inline_expect_test(
    name   = "Disambiguate_principality_test",
    struct = "disambiguate_principality.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Empty_variant_test",
    struct = "empty_variant.ml",
    stdlib_deps   = ["//stdlib:Stdlib.Printf"]
)

inline_expect_test(
    name   = "Enrich_typedecl_test",
    struct = "enrich_typedecl.ml",
)

inline_expect_test(
    name   = "Exotic_unifications_test",
    struct = "exotic_unifications.ml",
    stdlib_deps   = ["//stdlib:CamlinternalOO", "//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "External_arity_test",
    struct = "external_arity.ml",
    stdlib_deps   = ["//stdlib:Stdlib", "//stdlib:Stdlib.Obj"]
)

inline_expect_test(
    name   = "Filter_params_test",
    struct = "filter_params.ml",
)

inline_expect_test(
    name   = "Gpr2277_test",
    struct = "gpr2277.ml",
)

inline_expect_test(
    name   = "Includeclass_errors_test",
    struct = "includeclass_errors.ml",
)

inline_expect_test(
    name   = "Injectivity_test",
    struct = "injectivity.ml",
    stdlib_deps   = [
        "//stdlib:CamlinternalMod",
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Obj"]
)

inline_expect_test(
    name   = "Inside_out_test",
    struct = "inside_out.ml",
)

inline_expect_test(
    name   = "Is_expansive_test",
    struct = "is_expansive.ml",
)

inline_expect_test(
    name   = "Labels_test",
    struct = "labels.ml",
    stdlib_deps   = ["//stdlib:CamlinternalOO", "//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Normalize_type_test",
    struct = "normalize_type.ml",
)

inline_expect_test(
    name   = "Occur_check_test",
    struct = "occur_check.ml",
)

inline_expect_test(
    name   = "Optbinders_test",
    struct = "optbinders.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Pat_type_sharing_test",
    struct = "pat_type_sharing.ml",
)

inline_expect_test(
    name   = "Pattern_open_test",
    struct = "pattern_open.ml",
    stdlib_deps = ["//stdlib:Stdlib.Format"]
)

inline_expect_test(
    name   = "Polyvars_test",
    struct = "polyvars.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Pr6416_test",
    struct = "pr6416.ml",
    opts   = ["-no-alias-deps", "-w", "+40"],
    stdlib_deps = ["//stdlib:CamlinternalOO"]
)

inline_expect_test(
    name   = "Pr6634_test",
    struct = "pr6634.ml",
)

## FIXME: this will fail if compiler not configured with flat-float-array
inline_expect_test( #FIXME: ocamltest runs expect compiler twice
    name   = "Pr6939-flat-float-array_test",
    struct = "pr6939-flat-float-array.ml",
)

## FIXME: this will fail if compiler configured with flat-float-array
inline_expect_test(
    name   = "Pr6939-no-flat-float-array_test",
    struct = "pr6939-no-flat-float-array.ml",
)

inline_expect_test(
    name   = "Pr7103_test",
    struct = "pr7103.ml",
)

inline_expect_test(
    name   = "Pr7228_test",
    struct = "pr7228.ml",
)

inline_expect_test(
    name   = "Pr7668_bad_test",
    struct = "pr7668_bad.ml",
)

inline_expect_test(
    name   = "Pr7712_test",
    struct = "pr7712.ml",
)

inline_expect_test(
    name   = "Pr7937_test",
    struct = "pr7937.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Pr8548_test",
    struct = "pr8548.ml",
)

inline_expect_test(
    name   = "Printing_test",
    struct = "printing.ml",
    stdlib_deps   = ["//stdlib:CamlinternalOO",
                     "//stdlib:Stdlib",
                     "//stdlib:Stdlib.List"]
)

################################################################
# (* TEST
# readonly_files = "mapping.ml range_intf.ml ranged_intf.ml range.ml ranged.ml"
# * setup-ocamlc.byte-build-env
# ** ocamlc.byte
# flags = "-no-alias-deps -w -49 -o Pr8548__Mapping"
# module = "mapping.ml"
# ** ocamlc.byte
# flags = "-no-alias-deps -open Pr8548__Mapping -o pr8548__Range_intf.cmo"
# module = "range_intf.ml"
# *** ocamlc.byte
# flags = "-no-alias-deps -open Pr8548__Mapping -o pr8548__Range.cmo"
# module = "range.ml"
# *** ocamlc.byte
# flags = "-no-alias-deps -open Pr8548__Mapping -o pr8548__Ranged_intf.cmo"
# module = "ranged_intf.ml"
# **** ocamlc.byte
# flags = "-no-alias-deps -open Pr8548__Mapping -o pr8548__Ranged.cmo"
# module = "ranged.ml"
# ocamlc_byte_exit_status = "0"
# *)

# inline_expect_test(
#     name   = "Pr8548_split_test",
#     struct = "pr8548_split.ml",
# )

build_test(
    name = "Pr8548_split_test",
    targets = [
        ":Pr8548__Mapping",
        ":Pr8548__Range",
        ":Pr8548__Range_intf",
        ":Pr8548__Ranged",
        ":Pr8548__Ranged_intf",
    ],
)

# module_compile_test(
test_module(
    name   = "Pr8548__Mapping",
    module = "Pr8548__Mapping",
    struct = "mapping.ml",
    opts   = ["-no-alias-deps", "-w", "-49"],
    rc_expected = 0
)

test_module(
    name   = "Pr8548__Range",
    module = "Pr8548__Range",
    opts   = ["-no-alias-deps", "-open", "Pr8548__Mapping"],
    struct = "range.ml",
    deps   = [
        ":Pr8548__Mapping",
        ":Pr8548__Range_intf"
    ]
)

test_module(
    name   = "Pr8548__Range_intf",
    module = "Pr8548__Range_intf",
    struct = "range_intf.ml",
    opts   = ["-no-alias-deps", "-open", "Pr8548__Mapping"],
    deps   = [":Pr8548__Mapping"]
)

test_module(
    name   = "Pr8548__Ranged",
    module = "Pr8548__Ranged",
    struct = "ranged.ml",
    opts   = ["-no-alias-deps", "-open", "Pr8548__Mapping"],
    deps   = [
        ":Pr8548__Mapping",
        ":Pr8548__Ranged_intf",
        ":Pr8548__Range",
        ":Pr8548__Range_intf"
    ]
)

test_module(
    name   = "Pr8548__Ranged_intf",
    module = "Pr8548__Ranged_intf",
    struct = "ranged_intf.ml",
    opts   = ["-no-alias-deps", "-open", "Pr8548__Mapping"],
    deps   = [":Pr8548__Mapping", ":Pr8548__Range_intf"]
)

################################################################
inline_expect_test(
    name   = "Records_test",
    struct = "records.ml",
    stdlib_deps   = ["//stdlib:Stdlib",
                     "//stdlib:Stdlib.Complex"]
)

inline_expect_test(
    name   = "Scope_escape_test",
    struct = "scope_escape.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

# (* TEST
#   readonly_files = "empty_ppx.ml"
#   * setup-ocamlc.byte-build-env
#   ** ocamlc.byte with ocamlcommon
#   all_modules="empty_ppx.ml"
#   program="ppx.exe"
#   *** toplevel
#   all_modules="${test_file}"
#   flags="-ppx '${ocamlrun} ${test_build_directory_prefix}/ocamlc.byte/ppx.exe'"
# *)

## ocamltest cmd line:
## ocamlrun ocaml -noinit -no-version -noprompt -nostdlib -I ... -ppx ocamlrun ppx.exe ocamlcommon.cma
##   Redirecting stdin to typecore_empty_polyvariant_error.ml
##   redirecting stdout, stderr to ocamlc.byte.output

# genrule(
#     name = "ppx_runner",
#     outs = ["typecore_empty_polyvariant_error.ppx.ml"],
#     srcs = ["typecore_empty_polyvariant_error.ml",
#             ":ppx.exe"
#             ],
#     tools = [
#         # "@dev//bin:ocamlrun",
#         "//runtime:ocamlrun",
#     ],
#     cmd   = " ".join([
#         "$(execpath //runtime:ocamlrun)",
#         "$(location :ppx.exe)",
#         "$(location typecore_empty_polyvariant_error.ml)",
#         "$(location typecore_empty_polyvariant_error.ppx.ml)"
#     ])
# )
# test_executable(
#     name = "ppx.exe",
#     main = ":Empty_ppx",
#     # opts = ["-custom"]
# )
# test_module(
#     name   = "Empty_ppx",
#     struct = "empty_ppx.ml",
#     deps   = ["//parsing:Ast_helper",
#               "//parsing:Ast_mapper"],
#     sig_deps = ["//parsing:Parsetree_cmi"]
# )

################################################################
inline_expect_test(
    name   = "Typecore_errors_test",
    struct = "typecore_errors.ml",
    stdlib_deps   = [
        "//stdlib:CamlinternalOO",
        "//stdlib:Stdlib"
    ]
)

inline_expect_test(
    name   = "Typecore_nolabel_errors_test",
    struct = "typecore_nolabel_errors.ml",
    opts   = ["-nolabels"],
    stdlib_deps   = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Typetexp_errors_test",
    struct = "typetexp_errors.ml",
)

inline_expect_test(
    name   = "Unbound_type_variables_test",
    struct = "unbound_type_variables.ml",
)

inline_expect_test(
    name   = "Unique_names_in_unification_test",
    struct = "unique_names_in_unification.ml",
)

inline_expect_test(
    name   = "Variance_test",
    struct = "variance.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

inline_expect_test(
    name   = "Variant_test",
    struct = "variant.ml",
)

inline_expect_test(
    name   = "Wellfounded_test",
    struct = "wellfounded.ml",
)

# inline_expect_test expands to:
#   inline_expect_test > diff_test
###################
inline_expect_test(
    name   = "Wrong_kind_test",
    struct = "wrong_kind.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

# diff_test(
#     name = "Wrong_kind_test",
#     file1 = "wrong_kind.ml",
#     file2 = ":Wrong_kind",
#     timeout = "short",
#     tags = ["inline_expect"]
# )
# inline_expect_module(
#     name   = "Wrong_kind",
#     struct = "wrong_kind.ml",
#     stdlib_deps   = ["//stdlib:Stdlib"]
# )

