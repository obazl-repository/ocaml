exports_files(["BUILD.bazel"])

package(default_visibility = ["//visibility:public"])

################################################################
platform(name = "sys_runtime",
         constraint_values = ["@platforms//cpu:x86_64",
                              "@platforms//os:linux"])

platform(name = "sys_vm", parents = [":sys_runtime"],
         constraint_values = ["//platform/constraints/ocaml/executor:vm_executor"])

platform(name = "sys_vm_vm", parents = [":sys_vm"],
         constraint_values = ["//platform/constraints/ocaml/emitter:vm_emitter"])
platform(name = "sys_vm_sys", parents = [":sys_vm"],
         constraint_values = ["//platform/constraints/ocaml/emitter:sys_emitter"])

platform(name = "sys_sys", parents = [":sys_runtime"],
         constraint_values = ["//platform/constraints/ocaml/executor:sys_executor"])

platform(name = "sys_sys_vm", parents = [":sys_sys"],
         constraint_values = ["//platform/constraints/ocaml/emitter:vm_emitter"])
platform(name = "sys_sys_sys", parents = [":sys_sys"],
         constraint_values = ["//platform/constraints/ocaml/emitter:sys_emitter"])

# platform(name = "sys_vm_build", parents = [":sys"],
#          constraint_values = ["//platform/constraints/ocaml/build/executor:vm_executor"])
# platform(name = "sys_vm_target", parents = [":sys"],
#          constraint_values = ["//platform/constraints/ocaml/target/executor:vm_executor"])

# platform(name = "sys_sys_build", parents = [":sys"],
#          constraint_values = [
#              "//platform/constraints/ocaml/build/executor:sys_executor"])
# platform(name = "sys_sys_target", parents = [":sys"],
#          constraint_values = [
#              "//platform/constraints/ocaml/target/executor:sys_executor"])

# ocamlc.byte
# platform(name = "sys_vm_vm", parents = [":sys_vm"],
#          constraint_values = ["//platform/constraints/ocaml/emitter:vm_emitter"])

# platform(name = "sys_vm_vm_build", parents = [":sys_vm_build"],
#          constraint_values = ["//platform/constraints/ocaml/build/emitter:vm_emitter"])
# platform(name = "sys_vm_vm_target", parents = [":sys_vm_target"],
#          constraint_values = ["//platform/constraints/ocaml/target/emitter:vm_emitter"])

# ocamlopt.byte
# platform(name = "sys_vm_sys", parents = [":sys_vm"],
#          constraint_values = ["//platform/constraints/ocaml/emitter:sys_emitter"])

# platform(name = "sys_vm_sys_build", parents = [":sys_vm_build"],
#          constraint_values = [
#              "//platform/constraints/ocaml/build/emitter:sys_emitter"
#          ])
# platform(name = "sys_vm_sys_target", parents = [":sys_vm_target"],
#          constraint_values = ["//platform/constraints/ocaml/target/emitter:sys_emitter"])

################
# ocamlc.opt
# platform(name = "sys_sys_vm_build", parents = [":sys_sys_build"],
#          constraint_values = ["//platform/constraints/ocaml/build/emitter:vm_emitter"])

# platform(name = "sys_sys_vm_target", parents = [":sys_sys_target"],
#          constraint_values = ["//platform/constraints/ocaml/target/emitter:vm_emitter"])


################################################################
# dev stages: boot, baseline, dev, prod

## the boot platforms have six constraints: runtime (implicit),
## executor, emitter, role (build or target), and stage.
## role is encoded in the package label:
##   //platform/constraints/ocaml/build
##   //platform/constraints/ocaml/target

# platform(
#     name = "boot_build",
#     parents = [":sys_vm_vm_build"],
#     constraint_values = ["//platform/constraints/stage:boot"],
#     # exec_compatible_with  = [
#     #     "//platform/constraints/ocaml/build/executor:vm_executor",
#     #     "//platform/constraints/ocaml/build/emitter:vm_emitter",
#     #     "//platform/constraints/stage:boot"
#     # ]
# )

# platform(
#     name = "boot_target",
#     parents = [":sys_vm_vm_target"],
#     constraint_values = ["//platform/constraints/stage:boot"],
#     # exec_compatible_with  = [
#     #     "//platform/constraints/ocaml/target/executor:vm_executor",
#     #     "//platform/constraints/ocaml/target/emitter:vm_emitter",
#     #     "//platform/constraints/stage:boot"
#     # ]
# )

################################################################
# platform(name = "baseline_build", parents = [":sys_vm_vm_build"],
#          constraint_values = ["//platform/constraints/stage:baseline"])

# platform(name = "baseline_vm_vm_target", parents = [":sys_vm_vm_target"],
#          constraint_values = ["//platform/constraints/stage:baseline"])

# platform(name = "baseline_vm_sys_target", parents = [":sys_vm_sys_target"],
#          constraint_values = ["//platform/constraints/stage:baseline"])

################################################################
# platform(name = "sys_sys_sys",   # ocamlopt.opt
#          parents = ["@local_config_platform//:host"],
#          constraint_values = [
#              "//platform/constraints/ocaml/executor:sys_executor",
#              "//platform/constraints/ocaml/emitter:sys_emitter"])

# platform(name = "sys_sys_vm",   # ocamlc.opt
#          parents = ["@local_config_platform//:host"],
#          constraint_values = [
#              # "@platforms//os:linux", "@platforms//cpu:x86_64",
#              "//platform/constraints/ocaml/executor:sys_executor",
#              "//platform/constraints/ocaml/emitter:vm_emitter"])

################################################################
#### cross-platform cross-compilation
# targeting a system other than the local host

# platform(name = "linux_amd64_vm_vm", # ocamlc.byte on amd64 runtime
#          parents = ["@local_config_platform//:host"],
#          constraint_values = [
#              "@platforms//os:linux", "@platforms//cpu:x86_64",
#              "//platform/constraints/ocaml/executor:vm_executor",
#              "//platform/constraints/ocaml/emitter:vm_emitter"])
