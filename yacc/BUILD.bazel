load("//config:CONFIG.bzl",
     # "OC_CFLAGS",
     "CFLAGS", "OC_LDFLAGS", "LDFLAGS")

## WARNING: there's a bug in closure.c, the prototype is (void) but the defn is (int n)

## macos make.log:
# gcc -c -O2 -fno-strict-aliasing -fwrapv -pthread -g -Wall -Werror -fno-common  -I./runtime  -D_FILE_OFFSET_BITS=64 -o yacc/closure.o yacc/closure.c

# gcc -O2 -fno-strict-aliasing -fwrapv -pthread -g -Wall -Werror -fno-common  -Wl,-no_compact_unwind  -o yacc/ocamlyacc yacc/closure.o yacc/error.o yacc/lalr.o yacc/lr0.o yacc/main.o yacc/mkpar.o yacc/output.o yacc/reader.o yacc/skeleton.o yacc/symtab.o yacc/verbose.o yacc/warshall.o

cc_binary(
    name = "ocamlyacc",
    linkstatic = True,
    srcs = [
        "closure.c", "error.c", "lalr.c", "lr0.c",
        "main.c", "mkpar.c", "output.c", "reader.c",
        "skeleton.c", "symtab.c", "verbose.c", "warshall.c",
        "version.h", "defs.h",
    ],
    features = ["no_legacy_features"],
    copts = [
        "-x", "c",
        # "-fno-strict-aliasing",
        # "-fwrapv",
        "$(OC_CFLAGS)",
        "$(OC_CPPFLAGS)",
        "-I", "$(GENDIR)/yacc",
        "-Iruntime",  # expose caml/*.h
        "-I$(GENDIR)/runtime", # build_config.h
        "-I$(GENDIR)/runtime/caml/cross-compile", ##HACK for xcompile
    ] + select({
        # if -c opt, the clang toolchain inserts -DNDEBUG
        # which causes a macro-redefined error
        # "mac bazel clang": ["-Wno-error=macro-redefined"] ## NDEBUG
        "//conditions:default": []
    }),
    linkopts = ["$(OC_LDFLAGS)"],
    deps = ["//runtime/caml:hdrs"],
    toolchains = ["//profile/system/local"],
    visibility = [
        "//:__pkg__",  # :toolchain target
        "//boot:__subpackages__",
        "//lex:__pkg__",
        "//toolchain/adapters:__subpackages__"
    ]
)

genrule(
    name = "version_h",
    outs = ["version.h"],
    srcs = ["//:VERSION"],
    cmd  =  "echo \"#define OCAML_VERSION \\\"\"" +
            "`sed -e 1q $(location //:VERSION) | tr -d '\r'`\\\" > $@;"
)

