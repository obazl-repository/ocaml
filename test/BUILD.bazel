## compiler targets built by @baseline compilers

## intended as compiler deps of test rules e.g. expect_test

## not intended as direct cli build targets except to verify build protocol

exports_files(glob(["**"]))

package(default_visibility = ["//visibility:public"])

load("//test/rules:BUILD_RULES.bzl",
     # "tocaml_compilers",
     "t_ocamlc_byte",
     "t_ocamlopt_byte",
     "t_ocamlopt_opt",
     "t_ocamlc_opt")

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_setting")

bool_flag(name = "verbose", build_setting_default = False,
          visibility = ["//visibility:public"])
config_setting(name = "verbose?", flag_values = {":verbose": "True"})

OCAMLC_PROLOGUE = select({
    "//config/ocaml/compiler/libs:archived?": ["//stdlib"],
    "//conditions:default": []
}) + [
    "//compilerlibs:ocamlcommon",
    "//bytecomp:ocamlbytecomp"
]
OCAMLC_BYTE_MAIN = "//driver:Main"

OCAMLOPT_PROLOGUE = select({
    "//config/ocaml/compiler/libs:archived?": ["//stdlib"],
    "//conditions:default": []
}) + [
    "//compilerlibs:ocamlcommon",
    "//asmcomp:ocamloptcomp"
]
OCAMLOPT_BYTE_MAIN = "//driver:Optmain"

OCAML_COMPILER_OPTS = select({
    # ocamlc.byte: ["-compat-32"]
        "//conditions:default": []
}) + select({
    "//platform/target/os:linux?": [
        "-cclib", "-lm",
        "-cclib", "-ldl",
        "-cclib", "-lpthread",
    ],
    "//conditions:default": []
})

################################################################
#t_ocamlc_byte(name = "ocamlc.byte") # as a macro
t_ocamlc_byte(
    name       = "ocamlc.byte",
    prologue   = OCAMLC_PROLOGUE,
    main       = OCAMLC_BYTE_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

sh_binary(
    name = "ocamlc.byte.sh",
    srcs = ["@ocamlcc//bin:ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "true"}
    }),
    args = ["$(rootpath @ocamlcc//runtime:ocamlrun)",
            "$(rootpath :ocamlc.byte)",
            "$(rlocationpath @ocamlcc//stdlib:stdlib)"],
    data = [
        "@ocamlcc//runtime:ocamlrun",
        ":ocamlc.byte",
        "@ocamlcc//stdlib",
        "@ocamlcc//stdlib:Std_exit",
        "@ocamlcc//config/camlheaders",
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

################################################################
t_ocamlopt_byte(
    name = "ocamlopt.byte",
    prologue = OCAMLOPT_PROLOGUE,
    main = OCAMLOPT_BYTE_MAIN,
    opts = OCAML_COMPILER_OPTS,
    visibility             = ["//visibility:public"]
)

sh_binary(
    name = "ocamlopt.byte.sh",
    srcs = ["ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "false"}
    }),
    args = ["ocamlopt.byte"],
    data = [
        ":ocamlopt.byte",
        "@ocamlcc//runtime:asmrun",
        # "@ocamlcc//config/camlheaders",
        "@bazel_tools//tools/cpp:current_cc_toolchain"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ],
    toolchains = ["@bazel_tools//tools/cpp:current_cc_toolchain"]
)

################################################################
################
t_ocamlopt_opt(
    name = "ocamlopt.opt",
    prologue = [
        "//stdlib",
        "//compilerlibs:ocamlcommon",
        "//bytecomp:ocamlbytecomp"
    ],
    main = "//driver:Main",
    opts = [ ] + select({
        # ocamlc.byte: ["-compat-32"]
        "//conditions:default": []
    }) + [
    ] + select({
        "//platform/target/os:linux?": [
            "-cclib", "-lm",
            "-cclib", "-ldl",
            "-cclib", "-lpthread",
        ],
        "//conditions:default": []
    }),
    visibility             = ["//visibility:public"]
)

################################################################
################
t_ocamlc_opt(
    name = "ocamlc.opt",
    prologue = [
        "//stdlib",
        "//compilerlibs:ocamlcommon",
        "//bytecomp:ocamlbytecomp"
    ],
    main = "//driver:Main",
    opts = [ ] + select({
        # ocamlc.byte: ["-compat-32"]
        "//conditions:default": []
    }) + [
    ] + select({
        "//platform/target/os:linux?": [
            "-cclib", "-lm",
            "-cclib", "-ldl",
            "-cclib", "-lpthread",
        ],
        "//conditions:default": []
    }),
    visibility             = ["//visibility:public"]
)

