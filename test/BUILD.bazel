## compiler targets built by @dev compilers

## intended as compiler deps of test rules e.g. expect_test

## not intended as direct cli build targets except to verify build protocol

exports_files(glob(["**"]))

package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:build_test.bzl", "build_test")

load("//bzl/rules:COMPILER.bzl",
     "OCAMLC_PROLOGUE",
     "OCAMLC_MAIN",
     "OCAMLOPT_PROLOGUE",
     "OCAMLOPT_MAIN",
     "OCAML_COMPILER_OPTS")

load("//test/rules:TEST_RULES.bzl",
     # "test_repl",
     "test_ocamlc_byte",
     "test_ocamlopt_byte",
     "test_ocamlopt_opt",
     "test_ocamlc_opt")

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_setting")

bool_flag(name = "verbose", build_setting_default = False,
          visibility = ["//visibility:public"])
config_setting(name = "verbose?", flag_values = {":verbose": "True"})

################################################################
#test_ocamlc_byte(name = "ocamlc.byte") # as a macro
test_ocamlc_byte(
    name       = "ocamlc.byte",
    prologue   = OCAMLC_PROLOGUE,
    main       = OCAMLC_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

sh_binary(
    name = "ocamlc.byte.sh",
    srcs = ["@ocamlcc//bin:ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "true"}
    }),
    args = ["$(rootpath @ocamlcc//runtime:ocamlrun)",
            "$(rootpath :ocamlc.byte)",
            "$(rlocationpaths @ocamlcc//stdlib:stdlib)"],
    data = [
        "@ocamlcc//runtime:ocamlrun",
        ":ocamlc.byte",
        "@ocamlcc//stdlib",
        "@ocamlcc//stdlib:Std_exit",
        "@ocamlcc//config/camlheaders",
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

################################################################
test_ocamlopt_byte(
    name       = "ocamlopt.byte",
    prologue   = OCAMLOPT_PROLOGUE,
    main       = OCAMLOPT_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

sh_binary(
    name = "ocamlopt.byte.sh",
    srcs = ["@ocamlcc//bin:ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "false"}
    }),
    args = ["ocamlopt.byte"],
    data = [
        ":ocamlopt.byte",
        "@ocamlcc//runtime:asmrun",
        # "@ocamlcc//config/camlheaders",
        "@bazel_tools//tools/cpp:current_cc_toolchain"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ],
    toolchains = ["@bazel_tools//tools/cpp:current_cc_toolchain"]
)

################################################################
################
test_ocamlopt_opt(
    name       = "ocamlopt.opt",
    prologue   = OCAMLOPT_PROLOGUE,
    main       = OCAMLOPT_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

################################################################
################
test_ocamlc_opt(
    name       = "ocamlc.opt",
    prologue   = OCAMLC_PROLOGUE,
    main       = OCAMLC_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

## TODO: flambda rules

################################################################
################################################################
## skylib
build_test(
    name = "smoke",
    ## verify builds: compilers, tools, test rules
    targets = [
        # "//runtime:asmrun",
        # "//runtime:camlrun",
        # "//runtime:ocamlrun",

        "//bin:ocamlc.opt",
        "//bin:ocamlopt.opt",
        "//bin:ocamlopt.byte",
        "//bin:ocamlc.byte",

        "//test:ocamlc.opt",
        "//test:ocamlopt.opt",
        "//test:ocamlopt.byte",
        "//test:ocamlc.byte",

        "//testsuite/tests/basic:Boxedints_test",

        "//testsuite/tests/basic:Boxedints_vv_test",
        "//testsuite/tests/basic:Boxedints_sv_test",
        "//testsuite/tests/basic:Boxedints_ss_test",
        "//testsuite/tests/basic:Boxedints_vs_test",

        "//testsuite/tests/basic:Boxedints.vv.byte",
        "//testsuite/tests/basic:Boxedints.sv.byte",
        "//testsuite/tests/basic:Boxedints.ss.opt",
        "//testsuite/tests/basic:Boxedints.vs.opt",

        # "//lex:ocamllex",
        # "//yacc:ocamlyacc",
        # "//stdlib",


        # ":Caml_tex",
        # "//tools:cmpbyt",
        # # ":dumpobj",   ## sys target only
        # # ":Eqparsetree",
        # "//tools:ocamlobjinfo",
        # "//tools:ocamlcmt",
        # "//tools:ocamlcp",
        # "//tools:ocamldep",
        # "//tools:ocamlmklib",
        # "//tools:ocamlmktop",
        # "//tools:ocamloptp",
        # "//tools:ocamlprof",
        # "//tools:primreq",
        # "//tools:stripdebug",
    ]
)

