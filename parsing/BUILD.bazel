load("//bzl:rules.bzl",
     "bootstrap_module",
     "bootstrap_ocamllex",
     "bootstrap_signature",
     "bootstrap_library",
     "bootstrap_ocamlyacc",
)

load("//config:BUILD.bzl",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS"
     )

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS    = ROOT_MODULE_OPTS # + ["-nopervasives"]

STDLIB = [] #"//stdlib"]

bootstrap_library(
    name = "parsing",
    manifest  = [
        ":Ast_helper",
        ":Ast_invariants",
        ":Ast_iterator",
        ":Ast_mapper",
        ":Attr_helper",
        ":Builtin_attributes",
        ":CamlinternalMenhirLib",
        ":Depend",
        ":Docstrings",
        ":Lexer",
        ":Location",
        ":Longident",
        ":Parse",
        ":Parser",
        ":Pprintast",
        ":Printast",
        ":Syntaxerr",

        # ":Asttypes_cmi",
        # ":Parsetree_cmi",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

bootstrap_library(
    name = "ocamlcommon",
    manifest  = [
        ":Ast_helper",
        ":Ast_invariants",
        ":Ast_iterator",
        ":Ast_mapper",
        ":Attr_helper",
        ":Builtin_attributes",
        ":CamlinternalMenhirLib",
        ":Depend",
        ":Docstrings",
        ":Lexer",
        ":Location",
        ":Longident",
        ":Parse",
        ":Parser",
        ":Pprintast",
        ":Printast",
        ":Syntaxerr",

        # ":Asttypes_cmi",
        # ":Parsetree_cmi",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
bootstrap_module(
    name   = "Ast_helper",
    struct = "ast_helper.ml",
    sig    = "Ast_helper_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Syntaxerr",
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        ":Docstrings",
        ":Asttypes_cmi",
        "//stdlib:Stdlib.Nativeint",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int",
    ],
    visibility = [
        "//toplevel:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Ast_helper_cmi",
    src  = "ast_helper.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        ":Docstrings",
        ":Asttypes_cmi",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Ast_invariants",
    struct = "ast_invariants.ml",
    sig    = "Ast_invariants_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Syntaxerr",
        ":Parsetree_cmi",
        ":Longident",
        ":Builtin_attributes",
        ":Asttypes_cmi",
        ":Ast_iterator",
        "//stdlib:Stdlib.List",
    ],
    visibility = ["//driver:__pkg__"]
)

bootstrap_signature(
    name = "Ast_invariants_cmi",
    src  = "ast_invariants.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Ast_iterator",
    struct = "ast_iterator.ml",
    sig    = "Ast_iterator_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Location",
        "//stdlib:Stdlib.List",
    ],
    visibility = ["//typing:__pkg__"]
)

bootstrap_signature(
    name = "Ast_iterator_cmi",
    src  = "ast_iterator.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Ast_mapper",
    struct = "ast_mapper.ml",
    sig    = "Ast_mapper_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        ":Asttypes_cmi",
        ":Ast_helper",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Printexc",
        "//utils:Misc",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//utils:Config",
        "//utils:Clflags",
        "//stdlib:Stdlib.Array",
    ],
    visibility = [
        "//driver:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Ast_mapper_cmi",
    src  = "ast_mapper.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_signature(
    name = "Asttypes_cmi",
    src  = "asttypes.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Location",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)

bootstrap_module(
    name   = "Attr_helper",
    struct = "attr_helper.ml",
    sig    = "Attr_helper_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Location",
        ":Asttypes_cmi",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//typing:__pkg__"]
)

bootstrap_signature(
    name = "Attr_helper_cmi",
    src  = "attr_helper.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        ":Asttypes_cmi",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Builtin_attributes",
    struct = "builtin_attributes.ml",
    sig    = "Builtin_attributes_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        ":Asttypes_cmi",
        "//utils:Warnings",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Option",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = [
        "//driver:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Builtin_attributes_cmi",
    src  = "builtin_attributes.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//utils:Misc",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Depend",
    struct = "depend.ml",
    sig    = "Depend_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//utils:Clflags",
        "//utils:Misc",
        ":Asttypes_cmi",
        ":Builtin_attributes",
        ":Location",
        ":Longident",
        ":Parsetree_cmi",
    ],
    visibility = ["//driver:__pkg__"]
)

bootstrap_signature(
    name = "Depend_cmi",
    src  = "depend.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//utils:Misc",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Docstrings",
    struct = "docstrings.ml",
    sig    = "Docstrings_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Location",
        "//utils:Warnings",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Hashtbl",
    ]
)

bootstrap_signature(
    name = "Docstrings_cmi",
    src  = "docstrings.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "CamlinternalMenhirLib",
    struct = "camlinternalMenhirLib.ml",
    # struct = "//boot/menhir:menhirLib.ml",
    sig    = "CamlinternalMenhirLib_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

genrule(
    name = "camlinternalMenhirLib_ml",
    outs = ["camlinternalMenhirLib.ml"],
    srcs = ["//boot/menhir:menhirLib.ml"],
    cmd  = "\n".join([
	    "cp $(location //boot/menhir:menhirLib.ml) $@"
    ])
)

bootstrap_signature(
    name   = "CamlinternalMenhirLib_cmi",
    src    = "camlinternalMenhirLib.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.Lexing",
    ]
)

genrule(
    name = "camlinternalMenhirLib_mli",
    outs = ["camlinternalMenhirLib.mli"],
    srcs = ["//boot/menhir:menhirLib.mli"],
    cmd  = "\n".join([
        "echo '[@@@ocaml.warning \"-67\"]' > $@;",
	    "cat $(location //boot/menhir:menhirLib.mli) >> $@"
    ])
)

bootstrap_module(
    name   = "Lexer",
    struct = "lexer.ml",
    sig    = "Lexer_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//utils:Misc",
        ":Parser"
    ],
    visibility = [
        "//file_formats:__pkg__",
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_ocamllex(
    name = "lexer_ml",
    out  = "lexer.ml",
    src  = "lexer.mll"
)

bootstrap_signature(
    name = "Lexer_cmi",
    src  = "lexer.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parser_cmi"
    ]
)

bootstrap_module(
    name   = "Location",
    struct = "location.ml",
    sig    = "Location_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
        "//utils:Build_path_prefix_map",
        "//utils:Clflags",
        "//utils:Misc",
        "//utils:Terminfo",
        "//utils:Warnings",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ],
)

bootstrap_signature(
    name = "Location_cmi",
    src  = "location.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//utils:Warnings",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Buffer",
    ],
    visibility = ["//lambda:__pkg__"]
)

bootstrap_module(
    name   = "Longident",
    struct = "longident.ml",
    sig    = "Longident_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.String",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
    ],
    visibility = [
        "//lambda:__pkg__",
        "//toplevel:__pkg__",
        "//toplevel/byte:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Longident_cmi",
    src  = "longident.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format"
    ]
)

bootstrap_module(
    name   = "Parse",
    struct = "parse.ml",
    sig    = "Parse_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Syntaxerr",
        ":Pprintast",
        ":Location",
        ":Lexer",
        ":Docstrings",
        ":Parser",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Parse_cmi",
    src  = "parse.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Parser",
    struct = "parser.ml", ##FIXME: bug in rule
    sig    = "Parser_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Ast_helper",
        ":CamlinternalMenhirLib",
    ],
    visibility = ["//driver:__pkg__"]
)

# parsing/parser.ml: boot/menhir/parser.ml parsing/parser.mly \
#   tools/check-parser-uptodate-or-warn.sh
# 	@-tools/check-parser-uptodate-or-warn.sh
# 	sed "s/MenhirLib/CamlinternalMenhirLib/g" $< > $@

genrule(
    name = "parser_ml",
    outs  = ["parser.ml"],
    srcs  = [
        "//:VERSION",
        "//boot/menhir:parser.ml",
        "//tools:check-parser-uptodate-or-warn.sh",
        "parser.mly"
    ],
    cmd  = "\n".join([
        "$(location //tools:check-parser-uptodate-or-warn.sh) \\ ",
	    "sed \"s/MenhirLib/CamlinternalMenhirLib/g\" " +
        "$(location //boot/menhir:parser.ml) > $@"
    ])
)

bootstrap_signature(
    name = "Parser_cmi",
    src  = "parser.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":CamlinternalMenhirLib",
        ":Docstrings",
        ":Location"
    ]
)

genrule(
    name = "parser_mli",
    outs  = ["parser.mli"],
    srcs  = [
        "//boot/menhir:parser.mli",
    ],
    cmd  = "\n".join([
	    "sed \"s/MenhirLib/CamlinternalMenhirLib/g\" " +
        "$(location //boot/menhir:parser.mli) > $@"
    ])
)

bootstrap_signature(
    name = "Parsetree_cmi",
    src  = "parsetree.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Longident",
        ":Location",
        ":Asttypes_cmi",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//driver:__pkg__",
        "//lambda:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)

bootstrap_module(
    name   = "Pprintast",
    struct = "pprintast.ml",
    sig    = "Pprintast_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        ":Asttypes_cmi",
        ":Ast_helper",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Pprintast_cmi",
    src  = "pprintast.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Printast",
    struct = "printast.ml",
    sig    = "Printast_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Pprintast",
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        ":Asttypes_cmi",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Format",
        "//utils:Clflags",
        "//stdlib:Stdlib.Char",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Printast_cmi",
    src  = "printast.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Parsetree_cmi",
        ":Longident",
        ":Location",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Syntaxerr",
    struct = "syntaxerr.ml",
    sig    = "Syntaxerr_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Location",
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//toplevel:__pkg__"]
)

bootstrap_signature(
    name = "Syntaxerr_cmi",
    src  = "syntaxerr.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Location",
        "//stdlib:Stdlib.Format",
    ]
)

