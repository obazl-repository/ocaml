OCAML_DEVELOPMENT_VERSION = "@OCAML_DEVELOPMENT_VERSION@" == "true"
OCAML_VERSION_MAJOR = "@OCAML_VERSION_MAJOR@"
OCAML_VERSION_MINOR = "@OCAML_VERSION_MINOR@"
OCAML_VERSION_PATCHLEVEL = "@OCAML_VERSION_PATCHLEVEL@"
OCAML_VERSION_EXTRA = "@OCAML_VERSION_EXTRA@"

# Flags to use when compiling and linking OCaml programs

# The names of the variables below take the form XXX_YYY_ZZZ where
#
# XXX is one of OC, OCAML or the name of a module. The OC prefix
# is for private variables (i.e. reserved by the compiler's build system),
# the OCAML prefix is used for variables the user can define to add their
# own flags and the module-name prefix is for flags that apply only
# to one module.
#
# YYY refers to the backend. At the moment, it can take the values
# COMMON for the flags shared by all the backends, BYTECODE or NATIVE
# (other backends may be added in the future).
#
# ZZZ is either CFLAGS (compile-time flags) or LDFLAGS (link-time flags).
# However, contrary to what is done for C compilers, the flags in the
# CFLAGS category are not passed at link time, so if a flag is needed
# at both stages, like e.g. -g, it should be added to both XXX_YYY_CFLAGS and
# XXX_YYY_LDFLAGS.

# Bzl: the above is buried in Makefile.build_config.in. It's seems a
# little out if sync, not accounting for CFLAGS, CPPFLAGS, and
# *_CPPFLAGS, or the OCAMLOPT prefix, etc. Or is the OCAMLOPT prefix a
# "module" prefix?
# Note there are no OCAML_* flag vars.

# "Backend" evidently means target platform. The "common" flags - used
# in _every_ C compilation, whether debug or opt, etc.?

# bzl: WARNING - the makefiles may update these vars. For example, in
# otherlibs/Makefile.otherlibs.common we have "OC_CFLAGS += -g".
# Furthermore they include additional vars like COMPFLAGS with
# hardcoded values but do not use OC_COMMON_FLAGS.

## COMPFLAGS, OPTCOMPFLAGS: for compiling OCaml sources.
## COMPFLAGS is for targeting both the vm and sys;
## OPTCOMPFLAGS is for targeting sys.

# The notes below ignore uses of flags etc. to compute dependencies,
# since they're not need under Bazel.

################################################################
###  C Builds
TOOLPREF = "@ac_tool_prefix@"
CCOMPTYPE = "@ccomptype@"
ccomp_type = "@ccomptype@"
CC = "@CC@"
c_compiler = "@CC@"
   # bytecomp_c_compiler and native_c_compiler have been supported for a
   # long time and are retained for backwards compatibility.
   # For programs that don't need compatibility with older OCaml releases
   # the recommended approach is to use the constituent variables
   # c_compiler, ocamlc_cflags, ocamlc_cppflags etc., directly.
bytecomp_c_compiler = c_compiler + " " + ocamlc_cflags + " " + ocamlc_cppflags
native_c_compiler = c_compiler + " " + ocamlopt_cflags + " " + ocamlopt_cppflags
TOOLCHAIN = "@toolchain@"

CC_HAS_DEBUG_PREFIX_MAP = "@cc_has_debug_prefix_map@" == "true"
AS_HAS_DEBUG_PREFIX_MAP = "@as_has_debug_prefix_map@" == "true"
c_has_debug_prefix_map = "@cc_has_debug_prefix_map@" == "true"
as_has_debug_prefix_map = "@as_has_debug_prefix_map@" == "true"

#################################
## OC_CFLAGS in Makefile, for both vm and sys targets %.[b|n]pic.o
## also used to compile runtime/sak.exe
## Also used in Makefile.common for generic C compile rule:
# %.$(O): %.c $(REQUIRED_HEADERS)
# 	$(CC) -c $(OC_CFLAGS) $(CFLAGS) $(OC_CPPFLAGS) $(CPPFLAGS) \
# 	  $(OUTPUTOBJ)$@ $<
# mac: "-O2 -fno-strict-aliasing -fwrapv -pthread -g -Wall -Werror -fno-common"
# linux:
OC_CFLAGS = "@oc_cflags@"

# CFLAGS not used in Makefile. Used in Makefile.common, in the
# generic rule for compiling C sources. Also used in:
# - stdlib/Makefile to compile "HEADERPROGRAM" (header.c), which is
#     "The launcher for bytecode executables (if #! is not working)"
# - otherlibs/systhreads/Makefile, to compile st_stubs.[b|n].o
# mac: empty
CFLAGS = "@CFLAGS@"

# for compiling runtime files to sys target
# mac: empty
OC_NATIVE_CFLAGS = "@oc_native_cflags@"

## not used in any Makefiles. stored in fld in Config module:
## val ocamlc_cflags : string
## (** The flags ocamlc should pass to the C compiler *)
## IOW, these are not flags for building the compiler, they're flags
## the compiler uses to compile (e.g. when passed c source?)
# ocamlc_cflags = "@ocamlc_cflags@"

## Unused:
# OCAMLC_CFLAGS = "@ocamlc_cflags@"

# OC_CPPFLAGS used wherever OC_CFLAGS and CFLAGS used, in
# particular in the generic C compile rule in Makefile.common.
# Also use for all runtimes, summed w/others as noted above
# Also used in various otherlibs/[systhreads|unix]
# In otherlibs/unix: OC_CPPFLAGS += -DCAML_BUILDING_UNIX
# mac: oc_ccpflags == -D_FILE_OFFSET_BITS=64
OC_CPPFLAGS = ["-I$(ROOTDIR)/runtime", "@oc_cppflags@"]

# Used in generic C compile rule in Makefile.common,
# also in Makefile for runtime/sak.exe
# ocamltest/Makefile, summed with OC_CPPFLAGS
# Also used in otherlibs/systhreads, for st_stubs.[b|n].o
# mac: empty
CPPFLAGS = "@CPPFLAGS@"

# Makefile, for preprocessing %.S sources. Undefined
# OC_DEBUG_CPPFLAGS

# Makefile, for preprocessing %.S sources. Undefined
# OC_INSTR_CPPFLAGS

# OC_NATIVE_CPPFLAGS defined in Makefile.common (not by ./configure):
# OC_NATIVE_CPPFLAGS=\
#   -DNATIVE_CODE -DTARGET_$(ARCH) -DMODEL_$(MODEL) -DSYS_$(SYSTEM)
# We rename it since it only contains defines, for which Bazel
# has a dedicated attribute:
OC_NATIVE_DEFINES = [
    "NATIVE_CODE",
    "TARGET_" + ARCH,
    "MODEL_" + MODEL,
    "SYS_" + SYSTEM
]

# a field in the Config module in utils
# ocamlc_cppflags = "@ocamlc_cppflags@"

# Unused:
OCAMLC_CPPFLAGS = "@ocamlc_cppflags@"

## in Makefile. summed with OC_CPPFLAGS for the runtime .o files
## for native (%.n.o, OC_CPPFLAGS summed with OC_NATIVE_CPPFLAGS
# runtime_CPPFLAGS = -DCAMLDLLIMPORT= -DIN_CAML_RUNTIME
runtime_DEFINES = ["CAMLDLLIMPORT=", "IN_CAML_RUNTIME"]


## in Makefile, summed with OC_CPPFLAGS for .bd.o files
## for .nd.o files: sum w/OC_NATIVE_CPPFLAGS, OC_CPPFLAGS
## also used for windows amd64.nt.d.obj, i386.nt.d.obj
ocamlrund_CPPFLAGS = -DDEBUG

## in Makefile, summed with OC_CPPFLAGS for .bi.o files
## for .ni.o files: sum w/OC_NATIVE_CPPFLAGS, OC_CPPFLAGS
## also used for windows amd64.nt.i.obj, i386.nt.i.obj
ocamlruni_CPPFLAGS = -DCAML_INSTR

# bzl: ocamlopt v. native?
# "module" prefix? but there is no ocamlopt module?
## bzl: ocamlopt_cflags not found in makefiles
ocamlopt_cflags = "@ocamlc_cflags@"
OCAMLOPT_CFLAGS = "@ocamlc_cflags@"
# #7678: ocamlopt uses these only to compile .c files, and the
# #behaviour for the two drivers should be identical.
# bzl: "drivers"?
## bzl: ocamlopt_cppflags not found in makefiles
OCAMLOPT_CPPFLAGS = "@ocamlc_cppflags@"
ocamlopt_cppflags = "@ocamlc_cppflags@"
## no OC_BYTE_CFLAGS?

## bzl: used to compile *.bpic.$(O) files
SHAREDLIB_CFLAGS = "@sharedlib_cflags@"

### Additional link-time options
# To support dynamic loading of shared libraries (they need to look at
# our own symbols):
OC_LDFLAGS = "@oc_ldflags@"


# standard env var:
LDFLAGS = "@LDFLAGS@"

################################################################
# Platform-dependent assembler files to use to build the runtime
runtime_ASM_OBJECTS = "@runtime_asm_objects@" ## in dir runtime/

# Platform-dependent module for ocamlyacc
ocamlyacc_WSTR_MODULE = "@ocamlyacc_wstr_module@"

################ ocaml compilers ################
## OPTCOMPILER=$(ROOTDIR)/ocamlopt
## CAMLOPT=$(OCAMLRUN) $(OPTCOMPILER)

## So OPTCOMPILER is ocamlopt.byte, of type (vm>sys)
## i.e. VMSYS_COMPILER.
## Instead of CAMLOPT, VMSYS_COMPILE_CMD or similar.

################################################################
## OC_COMMON_[C|LD]FLAGS: for OCaml sources
# OC_COMMON_CFLAGS used in Makefile, Makefile.menhir
# for default rules for .cmo, .cmi
# for .cmx, COMPILE_NATIVE_MODULE uses OC_COMMON_CFLAGS and
# OC_NATIVE_CFLAGS (which is empty)
OC_COMMON_CFLAGS = [  ## OCaml compile flags
    "-g", "-strict-sequence", "-principal", "-absname",
    "-w", "+a-4-9-40-41-42-44-45-48", "-warn-error", "+a", "-bin-annot",
    "-strict-formats"
]
## OC_COMMON_LDFLAGS used in Makefile to build ocamlc
OC_COMMON_LDFLAGS = ["-g"] ## default is always debug build


### Command and flags to use for assembling ocamlopt-generated code
ASM = "@AS@"
asm = "@AS@"
### Extension of assembler files
S = "@S@"
EXT_ASM= ".@S@"
ext_asm = "." + "@S@"
ASM_CFI_SUPPORTED = "@asm_cfi_supported@" == "true"
asm_cfi_supported = "@asm_cfi_supported@" == "true"

AFL_INSTRUMENT = "@afl@" == "true"
afl_instrument = "@afl@" == "true"
FLAT_FLOAT_ARRAY = "@flat_float_array@" == "true"
FUNCTION_SECTIONS = "@function_sections@" == "true"

SUPPORTS_SHARED_LIBRARIES = "@supports_shared_libraries@" == "true"
supports_shared_libraries = "@supports_shared_libraries@" == "true"

### Extension for shared libraries
SO = "@SO@"
EXT_DLL = ".@SO@"

# Compile-time option to $(CC) to add a directory to be searched
# at run-time for shared libraries
RPATH = "@rpath@"

MKSHAREDLIBRPATH = "@mksharedlibrpath@"
DYNLINKOPTS = "@DLLIBS@"
NATDYNLINK = "@natdynlink@" == "true"
NATDYNLINKOPTS = "@natdynlinkopts@"


### Command and flags to use for assembling .S files (often with preprocessing)
ASPP = "@ASPP@"


### Path to the libtool script
LIBTOOL = "@top_builddir@/libtool"

### How to invoke the C preprocessor through the C compiler
CPP = "@CPP@"

### How to invoke ar
ARCMD = "@AR@"
ar = "@AR@"

AWK = "@AWK@"

## native pack linker
PACKLD = "@PACKLD@$(EMPTY)"
native_pack_linker = "@PACKLD@"

################################################################

EMPTY=""
## Arguments passed to the configure script
CONFIGURE_ARGS = "@CONFIGURE_ARGS@"
TOP_BUILDDIR = "@top_builddir@"
## Installation directories
prefix = "@prefix@"
exec_prefix = "@exec_prefix@"
BINDIR = "@bindir@"
datarootdir = "@datarootdir@"
### Where to install the standard library
LIBDIR = "@libdir@"
### Where to install the stub code for the standard library
STUBLIBDIR = "@libdir@/stublibs"
### Where to install the man pages
# Man pages for commands go in $(MANDIR)/man1
# Man pages for the library go in $(MANDIR)/man3
MANDIR = "@mandir@"
PROGRAMS_MAN_DIR="@mandir@/man1"
LIBRARIES_MAN_DIR="@mandir@/man3"

### Do #! scripts work on your system?
### Beware: on some systems (e.g. SunOS 4), this will work only if
### the string "#!$(BINDIR)/ocamlrun" is less than 32 characters long.
### In doubt, set HASHBANGSCRIPTS to false.
SHEBANGSCRIPTS = "@shebangscripts@" == "true"
LONG_SHEBANG = "@long_shebang@" == "true"
# For compatibility
HASHBANGSCRIPTS = SHEBANGSCRIPTS

### Extension of object files
O = "@OBJEXT@"
EXT_OBJ = ".@OBJEXT@"
ext_obj = "." + "@OBJEXT@"

### How to tell the C compiler to output an object file
OUTPUTOBJ = "@outputobj@ " + EMPTY
c_output_obj = "@outputobj@"

### Extension of static libraries
A = "@libext@"
EXT_LIB= ".@libext@"
ext_lib = "." + "@libext@"

############# Configuration for the native-code compiler

### Whether the native compiler has been enabled or not
NATIVE_COMPILER = "@native_compiler@" == "true"

### Name of architecture for the native-code compiler
### Currently supported:
###
### i386        Intel Pentium PCs under Linux, *BSD*, NextStep
### power       Macintosh under Mac OS X and Linux
### arm         ARM under Linux
###
### Set ARCH=none if your machine is not supported
ARCH = "@arch@" == "true"

# Whether the architecture has 64 bits
ARCH64 = "@arch64@"

# Endianness for this architecture
ENDIANNESS = "@endianness@"

### Name of architecture model for the native-code compiler.
### Some architectures come in several slightly different flavors
### that share a common code generator. This variable tailors the
### behavior of the code generator to the particular flavor used.
### Currently needed only if ARCH=power; leave MODEL=default for
### other architectures.
### If ARCH=power: set MODEL=ppc
### For other architectures: leave MODEL=default
###
MODEL = "@model@"

### Name of operating system family for the native-code compiler.
SYSTEM = "@system@"

TARGET = "@target@"
HOST = "@host@"

### Set to "true" to install ".byte" executables (ocamlc.byte, etc.)
INSTALL_BYTECODE_PROGRAMS = "@install_bytecode_programs@" == "true"

############# Configuration for the contributed libraries

### Which libraries to compile and install
# Currently available:
#       dynlink           Dynamic linking (bytecode and native)
#       (win32)unix       Unix system calls
#       str               Regular expressions and high-level string processing
#       systhreads        Same as threads, requires POSIX threads
OTHERLIBRARIES = "@otherlibraries@"

UNIX_OR_WIN32 = "@unix_or_win32@"
INSTALL_SOURCE_ARTIFACTS = "@install_source_artifacts@" == "true"

BYTECCLIBS = "@bytecclibs@"
bytecomp_c_libraries = "@bytecclibs@"
NATIVECCLIBS = "@nativecclibs@"
native_c_libraries = "@nativecclibs@"

EXE = "@exeext@"
ext_exe = "@exeext@"

OUTPUTEXE = "@outputexe@$(EMPTY)"

SYSLIB = "@syslib@"
MKLIB = "@mklib@"
SYSTHREAD_SUPPORT = "@systhread_support@" == "true"
CMXS = "@cmxs@"

################################################################
##  Flexlink stuff
# On Windows, MKDLL, MKEXE and MKMAINDLL must ultimately be equivalent to
#   flexlink $(FLEXLINK_FLAGS) [-exe|-maindll]
# or OCAML_FLEXLINK overriding will not work (see utils/config.mlp)

# OC_DLL_LDFLAGS only in testsuite/Makefile, for flexlink
OC_DLL_LDFLAGS = "@oc_dll_ldflags@"
# OC_EXE_LDFLAGS only in testsuite/Makefile, for flexlink
OC_EXE_LDFLAGS = "@oc_exe_ldflags@"

FLEXDLL_CHAIN = "@flexdll_chain@"
FLEXLINK_FLAGS = "@flexlink_flags@"

## Bazel: we don't use these mk* vars. They start with the CC tool;
## Bazel rules handle that, we only need to construct the args.
mkdll, mkexe, mkmaindll = (
    "@mkdll_exp@",
    "@mkexe_exp@",
    "@mkmaindll_exp@"
)
MKEXE = "@mkexe@"
MKDLL = "@mkdll@"
MKMAINDLL = "@mkmaindll@"
MKEXEDEBUGFLAG = "@mkexedebugflag@"
MKEXE_VIA_CC= [CC, OC_EXE_LDFLAGS, OC_CFLAGS, CFLAGS]
MKEXE_VIA_CC_LDFLAGS = "@mkexe_via_cc_ldflags@"

RUNTIMED = "@debug_runtime@" == "true"
INSTRUMENTED_RUNTIME = "@instrumented_runtime@" == "true"
INSTRUMENTED_RUNTIME_LIBS = "@instrumented_runtime_libs@"
WITH_DEBUGGER = "@with_debugger@"
WITH_OCAMLDOC = "@ocamldoc@"
WITH_OCAMLTEST = "@ocamltest@"
WITH_FRAME_POINTERS = "@frame_pointers@" == "true"
WITH_PROFINFO = "@profinfo@" == "true"
PROFINFO_WIDTH = "@profinfo_width@"

LIBUNWIND_AVAILABLE = "@libunwind_available@"
LIBUNWIND_INCLUDE_FLAGS = "@libunwind_include_flags@"
LIBUNWIND_LINK_FLAGS = "@libunwind_link_flags@"

WITH_FPIC = "@fpic@" == "true"

FLAMBDA = "@flambda@" == "true"
WITH_FLAMBDA_INVARIANTS = "@flambda_invariants@" == "true"
flambda = "@flambda@" == "true"
with_flambda_invariants = "@flambda_invariants@" == "true"

WITH_CMM_INVARIANTS = "@cmm_invariants@" == "true"
with_cmm_invariants = "@cmm_invariants@" == "true"

FORCE_INSTRUMENTED_RUNTIME = "@force_instrumented_runtime@" == "true"
FORCE_SAFE_STRING = True
DEFAULT_SAFE_STRING = True

STDLIB_MANPAGES = "@stdlib_manpages@" == "true"
NAKED_POINTERS = False

# Deprecated variables

## Variables deprecated since OCaml 5.0

UNIXLIB = "unix"

## Variables renamed in OCaml 4.13

RUNTIMEI = "@instrumented_runtime@" == "true"

################################################################

## from utils/config.generated.ml.in
OCAML_BINDIR = "@ocaml_bindir@"
standard_library_default = "@ocaml_libdir@"

default_rpath = "@rpath@"
mksharedlibrpath = "@mksharedlibrpath@"

force_instrumented_runtime = "@force_instrumented_runtime@" == "true"

flat_float_array = "@flat_float_array@" == "true"

function_sections = "@function_sections@" == "true"

architecture = "@arch@"
model = "@model@"
system = "@system@"

with_frame_pointers = "@frame_pointers@" == "true"
profinfo = "@profinfo@" == "true"
profinfo_width = "@profinfo_width@"

ext_dll = "." + "@SO@"

host = "@host@"
target = "@target@"

systhread_supported = "@systhread_support@" == "true"

flexdll_dirs = [@flexdll_dir@]

WINDOWS_UNICODE = "@windows_unicode@" == "1"
windows_unicode = @windows_unicode@ != 0
