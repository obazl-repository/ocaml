
## NB: "Error: Unbound module Stdlib".
# When bootstrapping there is no std lib yet; we pass -nostdlib to
# avoid putting its path in the search path. But the (bootstrap)
# compiler opens Stdlib by default, so we will always get the
# above-noted error. Pass -nopervasives to prevent this.
# This applies to:
# * camlinternalAtomic.ml[i],
# * camlinternalFormatBasics.ml[i]
# * stdlib.ml[i]

# Special cases: camlinternal* are not namespaced:
#   * camlinternaAtomic and camlinternalFormatBasics are deps of Stdlib.
#     they themselve have no deps, so -nopervasives
#   * the other camlinternal* depend on Stdlib, and may depend on
#     submodules in Stdlib ns

#   * when obazl builds submodules, it passes -open Stdlib. That's
#     enough to resolve symbols in the ns, but not their bindings. We
#     get errors like "Error: Unbound type constructor ref" and
#     "Error: Unbound value >=". I *think* that means the sym was
#     resolved in an interface the impl is missing.


## ocaml toolchains

https://github.com/ocaml/ocaml

The main branch is `trunk`.

### code structure

#### runtime

Mostly C code, but a few `.asm` and `.S` files.

* `runtime` - contains C implementation code and headers.
* `runtime/caml` - public C API headers; in OPAM, this ends up in e.g. `~/.opam/4.11.1/lib/ocaml/caml`

**NOTE** `runtime/Makefile` is _not_ generated by `.configure`

#### Other C sources

Other dirs containing C sources:

```
$ fd -e c -x echo {//} | sort | uniq
ocamltest
otherlibs/bigarray
otherlibs/str
otherlibs/systhreads
otherlibs/unix
otherlibs/win32unix
runtime
stdlib
testsuite/tests/asmcomp
testsuite/tests/asmgen
testsuite/tests/basic
testsuite/tests/basic-manyargs
testsuite/tests/c-api
testsuite/tests/callback
testsuite/tests/compatibility
testsuite/tests/embedded
testsuite/tests/ephe-c-api
testsuite/tests/gc-roots
testsuite/tests/int64-unboxing
testsuite/tests/lib-bigarray-2
testsuite/tests/lib-dynlink-bytecode
testsuite/tests/lib-dynlink-csharp
testsuite/tests/lib-dynlink-native
testsuite/tests/lib-dynlink-pr9209
testsuite/tests/lib-marshal
testsuite/tests/lib-threads
testsuite/tests/lib-unix/common
testsuite/tests/lib-unix/win-env
testsuite/tests/lib-unix/win-stat
testsuite/tests/locale
testsuite/tests/manual-intf-c
testsuite/tests/output-complete-obj
testsuite/tests/regression/pr3612
testsuite/tests/runtime-C-exceptions
testsuite/tests/runtime-naked-pointers
testsuite/tests/statmemprof
testsuite/tests/tool-command-line
testsuite/tests/unboxed-primitive-args
testsuite/tests/unwind
tools
utils
yacc
```

#### stdlib

Sources in `stdlib`. OPAM: ends up at `~/.opam/4.11.1/lib/ocaml`

#### otherlibs

Small collection of libs involving C FFI: `bigarray`, `dynlink`,
`str`, `systhreads`, `unix`, `win32unix`.

### building

Prereqs:

* C toolchain
  * compiler
  * binutils: `ar`, `ran`, `strip`
* GNU Make
* Posix-compatible
  * sed
  * awk
  * diff (to run tests)
* Cygwin: `gcc-core`, `flexdll`

#### CC tools

Depends twice on C compiler: once to build the OCaml compilers, which
in turn may invoke the C compiler/assembler to compile OCaml source
code.

#### configure

Lots of feature-testing.

Source templates:
* Makefile.config.in
* Makefile.build_config.in
* runtime/caml/m.h.in
* runtime/caml/s.h.in

Uses standard env vars to discover compiler etc: `CC`, `CFLAGS`, `CPPFLAGS`, `LIBS`.  Also uses OCaml-specific vars `OC_CFLAGS`, `OC_LDFLAGS1`.

[aclocal.m4]
```
# The following macro figures out which C compiler is used.
# It does so by checking for compiler-specific predefined macros.
# A list of such macros can be found at
# https://sourceforge.net/p/predef/wiki/Compilers/
AC_DEFUN([OCAML_CC_VENDOR], [
  AC_REQUIRE([AC_PROG_CC])
  AC_REQUIRE([AC_PROG_CPP])
  AC_MSG_CHECKING([C compiler vendor])
  AC_PREPROC_IFELSE(
    [AC_LANG_SOURCE([
#if defined(_MSC_VER)
msvc _MSC_VER
#elif defined(__INTEL_COMPILER)
icc __INTEL_COMPILER
#elif defined(__clang_major__) && defined(__clang_minor__)
clang __clang_major__ __clang_minor__
#elif defined(__GNUC__) && defined(__GNUC_MINOR__)
gcc __GNUC__ __GNUC_MINOR__
#elif defined(__xlc__) && defined(__xlC__)
xlc __xlC__ __xlC_ver__
#elif defined(__SUNPRO_C)
sunc __SUNPRO_C __SUNPRO_C
#else
unknown
#endif]
    )],
    [AC_CACHE_VAL([ocaml_cv_cc_vendor],
      [ocaml_cv_cc_vendor=`grep ['^[a-z]'] conftest.i | tr -s ' ' '-' \
                                                      | tr -d '\r'`])],
    [AC_MSG_FAILURE([unexpected preprocessor failure])])
  AC_MSG_RESULT([$ocaml_cv_cc_vendor])
])
```

[configure.ac]
```
# Command to build executalbes
# In general this command is supposed to use the CFLAGs- and LDFLAGS-
# related variables (OC_CFLAGS and OC_LDFLAGS for ocaml-specific
# flags, CFLAGS and LDFLAGS for generic flags chosen by the user), but
# at the moment they are not taken into account on Windows, because
# flexlink, which is used to build executables on this platform, can
# not handle them.
mkexe="\$(CC) \$(OC_CFLAGS) \$(CFLAGS) \$(OC_LDFLAGS) \$(LDFLAGS)"
```
