## GENERATED FILE ##

load("//bzl:rules.bzl",
     "ocaml_library",
     "ocaml_module",
     "ocaml_signature",
)

MODULE_OPTS = ["-nostdlib"]
SIG_OPTS = ["-nostdlib"]

ocaml_library(
    name = "ocamldoc_lib",
    modules  = [
        ":Odoc",
        ":Odoc_analyse",
        ":Odoc_args",
        ":Odoc_ast",
        ":Odoc_class",
        ":Odoc_comments",
        ":Odoc_comments_global",
        ":Odoc_config",
        ":Odoc_control",
        ":Odoc_cross",
        ":Odoc_dag2html",
        ":Odoc_dep",
        ":Odoc_dot",
        ":Odoc_env",
        ":Odoc_exception",
        ":Odoc_extension",
        ":Odoc_gen",
        ":Odoc_global",
        ":Odoc_html",
        ":Odoc_info",
        ":Odoc_inherit",
        ":Odoc_latex",
        ":Odoc_latex_style",
        ":Odoc_man",
        ":Odoc_merge",
        ":Odoc_messages",
        ":Odoc_misc",
        ":Odoc_module",
        ":Odoc_name",
        ":Odoc_parameter",
        ":Odoc_print",
        ":Odoc_scan",
        ":Odoc_search",
        ":Odoc_sig",
        ":Odoc_str",
        ":Odoc_test",
        ":Odoc_texi",
        ":Odoc_text",
        ":Odoc_to_text",
        ":Odoc_type",
        ":Odoc_types",
        ":Odoc_value",
    ],
)

ocaml_module(
    name   = "Odoc",
    struct = "odoc.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":Odoc_analyse", ## (Ocamldoc Odoc_analyse)
        ":Odoc_args", ## (Ocamldoc Odoc_args)
        ":Odoc_config", ## (Ocamldoc Odoc_config)
        ":Odoc_gen", ## (Ocamldoc Odoc_gen)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ## (Dynlink)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Sys",
    ]
)

ocaml_module(
    name   = "Odoc_analyse",
    struct = "odoc_analyse.ml",
    sig    = "Odoc_analyse_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//driver:Compmisc",
        "//driver:Pparse",
        "//parsing:Lexer",
        "//parsing:Location",
        "//parsing:Parse",
        "//parsing:Syntaxerr",
        "//typing:Env",
        "//typing:Typedtree",
        "//typing:Typemod",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Warnings",
        ":Odoc_ast", ## (Ocamldoc Odoc_ast)
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_comments", ## (Ocamldoc Odoc_comments)
        ":Odoc_cross", ## (Ocamldoc Odoc_cross)
        ":Odoc_dep", ## (Ocamldoc Odoc_dep)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_merge", ## (Ocamldoc Odoc_merge)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_sig", ## (Ocamldoc Odoc_sig)
        ":Odoc_text", ## (Ocamldoc Odoc_text)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_analyse_cmi",
    src  = "odoc_analyse.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
    ]
)

ocaml_module(
    name   = "Odoc_args",
    struct = "odoc_args.ml",
    sig    = "Odoc_args_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//driver:Compenv",
        "//driver:Main_args",
        "//otherlibs/str:Str",
        ":Odoc_config", ## (Ocamldoc Odoc_config)
        ":Odoc_dot", ## (Ocamldoc Odoc_dot)
        ":Odoc_gen", ## (Ocamldoc Odoc_gen)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_html", ## (Ocamldoc Odoc_html)
        ":Odoc_latex", ## (Ocamldoc Odoc_latex)
        ":Odoc_man", ## (Ocamldoc Odoc_man)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_texi", ## (Ocamldoc Odoc_texi)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_args_cmi",
    src  = "odoc_args.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_gen", ## (Ocamldoc Odoc_gen)
    ]
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
    ]
)

ocaml_module(
    name   = "Odoc_ast",
    struct = "odoc_ast.ml",
    sig    = "Odoc_ast_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        "//typing:Btype",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Typedtree",
        "//typing:Types",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_env", ## (Ocamldoc Odoc_env)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_sig", ## (Ocamldoc Odoc_sig)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
        ## (Name)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_ast_cmi",
    src  = "odoc_ast.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Parsetree_cmi",
        "//typing:Typedtree",
        "//typing:Types",
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_sig", ## (Ocamldoc Odoc_sig)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl",
    ]
)

ocaml_module(
    name   = "Odoc_class",
    struct = "odoc_class.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Types",
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

ocaml_module(
    name   = "Odoc_comments",
    struct = "odoc_comments.ml",
    sig    = "Odoc_comments_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        ":Odoc_comments_global", ## (Ocamldoc Odoc_comments_global)
        ":Odoc_cross", ## (Ocamldoc Odoc_cross)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_merge", ## (Ocamldoc Odoc_merge)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_text", ## (Ocamldoc Odoc_text)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_comments_cmi",
    src  = "odoc_comments.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_comments_global",
    struct = "odoc_comments_global.ml",
    sig    = "Odoc_comments_global_cmi",
    opts = MODULE_OPTS,
)

ocaml_signature(
    name = "Odoc_comments_global_cmi",
    src  = "odoc_comments_global.mli",
    opts = SIG_OPTS,
)

ocaml_module(
    name   = "Odoc_config",
    struct = "odoc_config.ml",
    sig    = "Odoc_config_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
    ]
)

ocaml_signature(
    name = "Odoc_config_cmi",
    src  = "odoc_config.mli",
    opts = SIG_OPTS,
)

ocaml_module(
    name   = "Odoc_control",
    struct = "odoc_control.ml",
    opts = MODULE_OPTS,
)

ocaml_module(
    name   = "Odoc_cross",
    struct = "odoc_cross.ml",
    sig    = "Odoc_cross_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//utils:Misc",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_scan", ## (Ocamldoc Odoc_scan)
        ":Odoc_search", ## (Ocamldoc Odoc_search)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ]
)

ocaml_signature(
    name = "Odoc_cross_cmi",
    src  = "odoc_cross.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_dag2html",
    struct = "odoc_dag2html.ml",
    sig    = "Odoc_dag2html_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Odoc_info", ## (Ocamldoc Odoc_info)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ]
)

ocaml_signature(
    name = "Odoc_dag2html_cmi",
    src  = "odoc_dag2html.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_info", ## (Ocamldoc Odoc_info)
    ]
)

ocaml_module(
    name   = "Odoc_dep",
    struct = "odoc_dep.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//parsing:Parsetree_cmi",
        "//utils:Misc",
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_print", ## (Ocamldoc Odoc_print)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

ocaml_module(
    name   = "Odoc_dot",
    struct = "odoc_dot.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ]
)

ocaml_module(
    name   = "Odoc_env",
    struct = "odoc_env.ml",
    sig    = "Odoc_env_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Btype",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Printtyp",
        "//typing:Types",
        ":Odoc_name", ## (Ocamldoc Odoc_name)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

ocaml_signature(
    name = "Odoc_env_cmi",
    src  = "odoc_env.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        ":Odoc_name", ## (Ocamldoc Odoc_name)
    ]
)

ocaml_module(
    name   = "Odoc_exception",
    struct = "odoc_exception.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Types",
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_extension",
    struct = "odoc_extension.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Types",
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_gen",
    struct = "odoc_gen.ml",
    sig    = "Odoc_gen_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Odoc_dot", ## (Ocamldoc Odoc_dot)
        ":Odoc_html", ## (Ocamldoc Odoc_html)
        ":Odoc_latex", ## (Ocamldoc Odoc_latex)
        ":Odoc_man", ## (Ocamldoc Odoc_man)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_texi", ## (Ocamldoc Odoc_texi)
    ]
)

ocaml_signature(
    name = "Odoc_gen_cmi",
    src  = "odoc_gen.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_dot", ## (Ocamldoc Odoc_dot)
        ":Odoc_html", ## (Ocamldoc Odoc_html)
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_latex", ## (Ocamldoc Odoc_latex)
        ":Odoc_man", ## (Ocamldoc Odoc_man)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_texi", ## (Ocamldoc Odoc_texi)
    ]
)

ocaml_module(
    name   = "Odoc_global",
    struct = "odoc_global.ml",
    sig    = "Odoc_global_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Clflags",
        ":Odoc_config", ## (Ocamldoc Odoc_config)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
    ]
)

ocaml_signature(
    name = "Odoc_global_cmi",
    src  = "odoc_global.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_html",
    struct = "odoc_html.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//parsing:Asttypes_cmi",
        "//utils:Misc",
        ":Odoc_dag2html", ## (Ocamldoc Odoc_dag2html)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_text", ## (Ocamldoc Odoc_text)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ]
)

ocaml_module(
    name   = "Odoc_info",
    struct = "odoc_info.ml",
    sig    = "Odoc_info_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//typing:Printtyp",
        ":Odoc_analyse", ## (Ocamldoc Odoc_analyse)
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_comments", ## (Ocamldoc Odoc_comments)
        ":Odoc_config", ## (Ocamldoc Odoc_config)
        ":Odoc_dep", ## (Ocamldoc Odoc_dep)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_print", ## (Ocamldoc Odoc_print)
        ":Odoc_scan", ## (Ocamldoc Odoc_scan)
        ":Odoc_search", ## (Ocamldoc Odoc_search)
        ":Odoc_str", ## (Ocamldoc Odoc_str)
        ":Odoc_text", ## (Ocamldoc Odoc_text)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_info_cmi",
    src  = "odoc_info.mli",
    opts = SIG_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//typing:Types",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_search", ## (Ocamldoc Odoc_search)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ]
)

ocaml_module(
    name   = "Odoc_inherit",
    struct = "odoc_inherit.ml",
    opts = MODULE_OPTS,
)

ocaml_module(
    name   = "Odoc_latex",
    struct = "odoc_latex.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//parsing:Asttypes_cmi",
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_latex_style", ## (Ocamldoc Odoc_latex_style)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_to_text", ## (Ocamldoc Odoc_to_text)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ocaml_module(
    name   = "Odoc_latex_style",
    struct = "odoc_latex_style.ml",
    opts = MODULE_OPTS,
)

ocaml_module(
    name   = "Odoc_man",
    struct = "odoc_man.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//parsing:Asttypes_cmi",
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_print", ## (Ocamldoc Odoc_print)
        ":Odoc_str", ## (Ocamldoc Odoc_str)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_module(
    name   = "Odoc_merge",
    struct = "odoc_merge.ml",
    sig    = "Odoc_merge_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_module", ## (Ocamldoc Odoc_module),
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

ocaml_signature(
    name = "Odoc_merge_cmi",
    src  = "odoc_merge.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_messages",
    struct = "odoc_messages.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//otherlibs/str:Str",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ocaml_module(
    name   = "Odoc_misc",
    struct = "odoc_misc.ml",
    sig    = "Odoc_misc_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Longident",
        "//typing:Btype",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Types",
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

ocaml_signature(
    name = "Odoc_misc_cmi",
    src  = "odoc_misc.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident",
        "//typing:Types",
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_module",
    struct = "odoc_module.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Types",
        "//utils:Misc",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

ocaml_module(
    name   = "Odoc_name",
    struct = "odoc_name.ml",
    sig    = "Odoc_name_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//typing:Ident",
        "//typing:Path",
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_name_cmi",
    src  = "odoc_name.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident",
        "//typing:Ident",
        "//typing:Path",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Map",
    ]
)

ocaml_module(
    name   = "Odoc_parameter",
    struct = "odoc_parameter.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Types",
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_module(
    name   = "Odoc_print",
    struct = "odoc_print.ml",
    sig    = "Odoc_print_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Btype",
        "//typing:Printtyp",
        "//typing:Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Format",
    ]
)

ocaml_signature(
    name = "Odoc_print_cmi",
    src  = "odoc_print.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
    ]
)

ocaml_module(
    name   = "Odoc_scan",
    struct = "odoc_scan.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

ocaml_module(
    name   = "Odoc_search",
    struct = "odoc_search.ml",
    sig    = "Odoc_search_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ]
)

ocaml_signature(
    name = "Odoc_search_cmi",
    src  = "odoc_search.mli",
    opts = SIG_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ]
)

ocaml_module(
    name   = "Odoc_sig",
    struct = "odoc_sig.ml",
    sig    = "Odoc_sig_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//typing:Btype",
        "//typing:Ctype",
        "//typing:Ident",
        "//typing:Typedtree",
        "//typing:Types",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_env", ## (Ocamldoc Odoc_env)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_global", ## (Ocamldoc Odoc_global)
        ":Odoc_merge", ## (Ocamldoc Odoc_merge)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
        ## (Name)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_sig_cmi",
    src  = "odoc_sig.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        "//typing:Typedtree",
        "//typing:Types",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_env", ## (Ocamldoc Odoc_env)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl",
    ]
)

ocaml_module(
    name   = "Odoc_str",
    struct = "odoc_str.ml",
    sig    = "Odoc_str_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Printtyp",
        "//typing:Types",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_print", ## (Ocamldoc Odoc_print)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_str_cmi",
    src  = "odoc_str.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        ":Odoc_class", ## (Ocamldoc Odoc_class)
        ":Odoc_exception", ## (Ocamldoc Odoc_exception)
        ":Odoc_extension", ## (Ocamldoc Odoc_extension)
        ":Odoc_type", ## (Ocamldoc Odoc_type)
        ":Odoc_value", ## (Ocamldoc Odoc_value)
    ]
)

ocaml_module(
    name   = "Odoc_test",
    struct = "odoc_test.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":Odoc_args", ## (Ocamldoc Odoc_args)
        ":Odoc_gen", ## (Ocamldoc Odoc_gen)
        ":Odoc_info", ## (Ocamldoc Odoc_info)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
    ]
)

ocaml_module(
    name   = "Odoc_texi",
    struct = "odoc_texi.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        "//parsing:Asttypes_cmi",
        "//typing:Types",
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_to_text", ## (Ocamldoc Odoc_to_text)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_module(
    name   = "Odoc_text",
    struct = "odoc_text.ml",
    sig    = "Odoc_text_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_signature(
    name = "Odoc_text_cmi",
    src  = "odoc_text.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_to_text",
    struct = "odoc_to_text.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/str:Str",
        ":Odoc_info", ## (Ocamldoc Odoc_info)
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
        ":Odoc_module", ## (Ocamldoc Odoc_module)
        ":Odoc_str", ## (Ocamldoc Odoc_str)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

ocaml_module(
    name   = "Odoc_type",
    struct = "odoc_type.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Types",
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ]
)

ocaml_module(
    name   = "Odoc_types",
    struct = "odoc_types.ml",
    sig    = "Odoc_types_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        ":Odoc_messages", ## (Ocamldoc Odoc_messages)
    ]
)

ocaml_signature(
    name = "Odoc_types_cmi",
    src  = "odoc_types.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location",
    ]
)

ocaml_module(
    name   = "Odoc_value",
    struct = "odoc_value.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Printtyp",
        "//typing:Types",
        ":Odoc_misc", ## (Ocamldoc Odoc_misc)
        ":Odoc_name", ## (Ocamldoc Odoc_name)
        ":Odoc_parameter", ## (Ocamldoc Odoc_parameter)
        ":Odoc_types", ## (Ocamldoc Odoc_types)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ]
)

