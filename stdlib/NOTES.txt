##################################################################
##############  Main Resolver Module: Stdlib  ####################

# ../runtime/ocamlrun ../boot/ocamlc
# -use-prims ../runtime/primitives
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48-70
# -g -warn-error +A -bin-annot -nostdlib -principal
# -safe-string -strict-formats

## added to stdlib.cm[iox] only, by $(shell Comflags $@):
# -nopervasives -no-alias-deps -w -49
# -pp "$AWK -f ./expand_module_aliases.awk" -c stdlib.mli
## the awk script inserts the stdlib__ prefix in the module aliasing
## equations in stdlib.ml[i]


####################################################
####    The Standard Library    ####
####################################################
## NB: "Error: Unbound module Stdlib".
# When bootstrapping there is no std lib yet; we pass -nostdlib to
# avoid putting its path in the search path. But the (bootstrap)
# compiler opens Stdlib by default, so we will always get the
# above-noted error. Pass -nopervasives to prevent this.
# This applies to:
# * camlinternalAtomic.ml[i],
# * camlinternalFormatBasics.ml[i]
# * stdlib.ml[i]

# Special cases: camlinternal* are not namespaced:
#   * camlinternaAtomic and camlinternalFormatBasics are deps of Stdlib.
#     they themselve have no deps, so -nopervasives
#   * the other camlinternal* depend on Stdlib, and may depend on
#     submodules in Stdlib ns

#   * when obazl builds submodules, it passes -open Stdlib. That's
#     enough to resolve symbols in the ns, but not their bindings. We
#     get errors like "Error: Unbound type constructor ref" and
#     "Error: Unbound value >=". I *think* that means the sym was
#     resolved in an interface the impl is missing.


## flags generated by $(shell ./Compflags $@) are added to individual
## targets

# ../runtime/ocamlrun ../boot/ocamlc -use-prims ../runtime/primitives -strict-sequence -absname -w +a-4-9-41-42-44-45-48-70 -g -warn-error +A -bin-annot -nostdlib -principal -safe-string -strict-formats   \
# 	         -o stdlib__Bigarray.cmi -c bigarray.mli

# camlinternal: Atomic, Format, FormatBasics, Lazy, Mod, OO
# CAMLINTERNAL_OPTS = [
#     # "-use-prims", "../runtime/primitives",
#     # "-nopervasives"
#     # "-open", "Stdlib"
# ] + COMPFLAGS

# Atomic, FormatBasics:  ["-nopervasives"]
#Format: ["-w", "+A", "-w", "-fragile-match"]

# OCAMLRUN = boot/ocamlrun
# COMPILER = ocamlc built in root dir (i.e. stage1?)
# CAMLC=$(OCAMLRUN) $(COMPILER)
# %.cmi: %.mli
# 	$(CAMLC) $(COMPFLAGS) $(shell ./Compflags $@) -c $<

# stdlib__%.cmo:
# 	$(CAMLC) $(COMPFLAGS) $(shell ./Compflags $@) \
# 	         -o $@ -c $(filter %.ml, $^)

# %.cmo: %.ml
# 	$(CAMLC) $(COMPFLAGS) $(shell ./Compflags $@) -c $<

# %.cmx: %.ml
# 	$(CAMLOPT) $(COMPFLAGS) $(OPTCOMPFLAGS) $(shell ./Compflags $@) -c $<


## NB: ocamldep does not show deps on the Stdlib module. So files with
## no deps according to ocamldep may in fact have a dependency on the
## Stdlib module (only). E.g. sys.mli. Some files in fact have no
## deps, e.g. bool.mli.

## make log: flags same for >vm and >sys, except the former adds -use-prims

## NB: camlinternal files differ from public submodules:
# compiled twice for >vm, with and without -use-prims

## NB:
# -nopervasives used ONLY for camlinternalFormatBasics, stdlib
# this is added automatically by rules boot_module, boot_signature
# but not by stdlib_module, stdlib_signature

# -fragile-match only for camlinternalFormat, printf, format, scanf

# ../runtime/ocamlrun ../boot/ocamlc
# -use-prims ../runtime/primitives
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal -nopervasives
# -c camlinternalFormatBasics.mli  (and .ml)

# ../boot/ocamlrun ../ocamlc
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal -nopervasives
# -c camlinternalFormatBasics.mli

# ../boot/ocamlrun ../ocamlopt  (NB: does not recompile mli files)
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal -nopervasives
# -c camlinternalFormatBasics.ml

# uses ocamlc to run awk using -pp

## resolver Stdlib: uses awk preprocessing to expand the module aliasing equations, once with -use-prims, once w/o

# ../runtime/ocamlrun ../boot/ocamlc
# -use-prims ../runtime/primitives
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal
# -nopervasives -no-alias-deps -w -49
# -pp "$AWK -f ./expand_module_aliases.awk"
# -c stdlib.mli

# ../boot/ocamlrun ../ocamlc
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal
# -nopervasives -no-alias-deps -w -49
# -pp "$AWK -f ./expand_module_aliases.awk"
# -c stdlib.mli

# ../boot/ocamlrun ../ocamlopt
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal
# -nopervasives -no-alias-deps -w -49
# -pp "$AWK -f ./expand_module_aliases.awk"
# -c stdlib.ml

## submodules:
# ../runtime/ocamlrun ../boot/ocamlc
# -use-prims ../runtime/primitives
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal
# -o stdlib__Either.cmi -c either.mli  (ditto either.ml)

# ../boot/ocamlrun ../ocamlc
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal
# -o stdlib__Either.cmi -c either.mli  (ditto either.ml)

# load("//config:CONFIG.bzl", "ROOT_MODULE_OPTS", "ROOT_SIG_OPTS")

# to match the makefile log:
# COMPFLAGS = [
#     "-strict-sequence", "-absname",
#     "-w", "+a-4-9-41-42-44-45-48",
#     # "-g",
#     "-warn-error", "+A",
#     "-bin-annot",
#     "-nostdlib", "-principal",
#     # "-safe-string", "-strict-formats"
# ]

################################################################
  ################  Module: Std_exit    ################
################################################################
## Module Std_exit is an "executive" module - it exports no symbols,
## and is used in executables for its side-effects. The bytecode
## compiler inserts module Std_exit at the end of every executable.

## (I.e. it is not required for building native executables?)

## Its signature is empty (it exports no symbols), and its structfile
## contains a single line of code:

# (* Ensure that [at_exit] functions are called at the end of every program *)
# let _ = do_at_exit()

# The module itself has no external dependencies, but it does depend
# on the internal Pervasives module, so compiling with "-nopervasives"
# will fail with:

# 18 | let _ = do_at_exit()
#              ^^^^^^^^^^
# Error: Unbound value do_at_exit

# and stdlib.ml has:
# let _ = register_named_value "Pervasives.do_at_exit" do_at_exit

# The module itself has no dependencies, but the compilers induce a
# pseudo-dependency on the standard library archive and module Stdlib,
# so compilation does depend on Stdlib. Futhermore, if you
# bootstrap-link an executable with Std_exit at the end but omit
# stdlib.cm[x]a, you'll get:

#     Error: Module `Stdlib' is unavailable (required by `Std_exit')

# Compiling Std_exit with "-nostdlib" produces: "Error: Unbound module
# Stdlib". This is because this flag only tells OCaml to disregard its
# internal default path to Stdlib; it will still "-open Stdlib", which
# is what results in the error, and furthermore a dependency on the
# stdlib library (stdlib.cma, stdlib.cmxa) is hardcoded into the the
# compilers (bytelink.ml and asmlink.ml).

# So for a bootstrap compile we need to pass "-nostdlib" (so the
# compiler will not search its default stdlib path) and have a
# dependency on //stdlib:Stdlib.

## Make log below. Notice the ocamlc is not the boot version but the
## 1st gen version. This works with -nostdlib because it is run from
## within //stdlib. The other flags are not necessary, they're just an
## artifact of the Makefile build system.

# ../boot/ocamlrun ../ocamlc -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal   -c std_exit.mli
# ../boot/ocamlrun ../ocamlc -strict-sequence -absname -w +a-4-9-41-42-44-45-48 -g -warn-error +A -bin-annot -nostdlib -principal   -c std_exit.ml
