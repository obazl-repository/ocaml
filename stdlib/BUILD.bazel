load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_module",
     "bootstrap_signature")

load("//config:BUILD.bzl",
     ## stdlib overrides OCAMLC, does not use ROOT_OCAMLC_OPTS
     ## "ROOT_CAMLC_OPTS",

     ## make log indictates USE_PRIMS is inserted, no idea how
     "USE_PRIMS"
     )

exports_files(["expand_module_aliases.awk"])

COMPFLAGS = [
    "-strict-sequence", "-absname",
    "-w", "+a-4-9-41-42-44-45-48-70",
    "-g",
    "-warn-error", "+A",
    "-bin-annot",
    "-nostdlib", "-principal",
    "-safe-string", "-strict-formats"
]

MODULE_OPTS = USE_PRIMS + COMPFLAGS
SIG_OPTS = MODULE_OPTS

## flags generated by $(shell ./Compflags $@) are added to individual
## targets

# ../runtime/ocamlrun ../boot/ocamlc -use-prims ../runtime/primitives -strict-sequence -absname -w +a-4-9-41-42-44-45-48-70 -g -warn-error +A -bin-annot -nostdlib -principal -safe-string -strict-formats   \
# 	         -o stdlib__Bigarray.cmi -c bigarray.mli

# camlinternal: Atomic, Format, FormatBasics, Lazy, Mod, OO
CAMLINTERNAL_OPTS = [
    # "-use-prims", "../runtime/primitives",
    # "-nopervasives"
    # "-open", "Stdlib"
] + COMPFLAGS
# Atomic, FormatBasics:  ["-nopervasives"]
#Format: ["-w", "+A", "-w", "-fragile-match"]

# stdlib__%.cmo:
# 	$(CAMLC) $(COMPFLAGS) $(shell ./Compflags $@) \
# 	         -o $@ -c $(filter %.ml, $^)

# %.cmx: %.ml
# 	$(CAMLOPT) $(COMPFLAGS) $(OPTCOMPFLAGS) $(shell ./Compflags $@) -c $<

# %.cmx: %.ml
# 	$(CAMLOPT) $(COMPFLAGS) $(OPTCOMPFLAGS) $(shell ./Compflags $@) -c $<

## NB: we do not need to define an ocaml_ns_resolver (or rather
## bootstrap_ns_resolver), since Stdlib serves as our ns_resolver
## module. Each submodule includes itself by attribution ns=":Stdlib".
## This library target just aggregates the resolver and submodules.
## They can be listed in any order.
bootstrap_archive(
    name   = "stdlib",
    manifest   = [
        ":Stdlib", ## functions as the ns_resolver module
        ## Namespace submodules:
        ":CamlinternalFormatBasics",
        ":CamlinternalAtomic",
        ":Stdlib.Pervasives",
        ":Stdlib.Seq",
        ":Stdlib.Option",
        ":Stdlib.Either",
        ":Stdlib.Result",
        ":Stdlib.Bool",
        ":Stdlib.Char",
        ":Stdlib.Uchar",
        ":Stdlib.Sys",
        ":Stdlib.List",
        ":Stdlib.Int",
        ":Stdlib.Bytes",
        ":Stdlib.String",
        ":Stdlib.Unit",
        ":Stdlib.Marshal",
        ":Stdlib.Obj",
        ":Stdlib.Array",
        ":Stdlib.Float",
        ":Stdlib.Int32",
        ":Stdlib.Int64",
        ":Stdlib.Nativeint",
        ":Stdlib.Lexing",
        ":Stdlib.Parsing",
        ":Stdlib.Set",
        ":Stdlib.Map",
        ":Stdlib.Stack",
        ":Stdlib.Queue",
        ":CamlinternalLazy",
        ":Stdlib.Lazy",
        ":Stdlib.Stream",
        ":Stdlib.Buffer",
        ":CamlinternalFormat",
        ":Stdlib.Printf",
        ":Stdlib.Arg",
        ":Stdlib.Atomic",
        ":Stdlib.Printexc",
        ":Stdlib.Fun",
        ":Stdlib.Gc",
        ":Stdlib.Digest",
        ":Stdlib.Random",
        ":Stdlib.Hashtbl",
        ":Stdlib.Weak",
        ":Stdlib.Format",
        ":Stdlib.Scanf",
        ":Stdlib.Callback",
        ":CamlinternalOO",
        ":Stdlib.Oo",
        ":CamlinternalMod",
        ":Stdlib.Genlex",
        ":Stdlib.Ephemeron",
        ":Stdlib.Filename",
        ":Stdlib.Complex",
        ":Stdlib.ArrayLabels",
        ":Stdlib.ListLabels",
        ":Stdlib.BytesLabels",
        ":Stdlib.StringLabels",
        ":Stdlib.MoreLabels",
        ":Stdlib.StdLabels",
        ":Stdlib.Bigarray",
        ":Stdlib.In_channel",
        ":Stdlib.Out_channel",

        ":Std_exit",
    ],
    visibility = ["//visibility:public"],
)

##################################################################
##############  Main Resolver Module: Stdlib  ####################

# ../runtime/ocamlrun ../boot/ocamlc
# -use-prims ../runtime/primitives
# -strict-sequence -absname -w +a-4-9-41-42-44-45-48-70
# -g -warn-error +A -bin-annot -nostdlib -principal
# -safe-string -strict-formats

## added to stdlib.cm[iox] only, by $(shell Comflags $@):
# -nopervasives -no-alias-deps -w -49
# -pp "$AWK -f ./expand_module_aliases.awk" -c stdlib.mli
## the awk script inserts the stdlib__ prefix in the module aliasing
## equations in stdlib.ml[i]

# WARNING: if we run this as a separate task (instead of passing the
# cmd to the compiler via -pp) we must write to a subdir, since the
# input filename is the same as the output filename. Ditto for
# stdlib.mli.

genrule(
    name = "stdlib_ml_awk",
    outs = ["x/stdlib.ml"],
    srcs = ["stdlib.ml", "//stdlib:expand_module_aliases.awk"],
    cmd_bash  = " ".join([
        "awk -f $(location //stdlib:expand_module_aliases.awk) $(location :stdlib.ml)",
        "> $@"
    ]),
)

bootstrap_module(
    name   = "Stdlib",
    struct = "x/stdlib.ml",
    sig    = "Stdlib_cmi",
    opts = MODULE_OPTS + [
        "-nopervasives",
        "-no-alias-deps", "-w", "-49",
        # "-pp", "awk -f expand_module_aliases.awk",
        "-I", "stdlib",
        "-verbose"
    ],
    deps = [
        ":CamlinternalFormatBasics",
        ":CamlinternalAtomic",
    ],
    # pp_deps = ["//stdlib:expand_module_aliases.awk"],

    ## executables need camlheader. works here, dunno if this is the
    ## right place though
    deps_runtime = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

genrule(
    name = "stdlib_mli_awk",
    outs = ["x/stdlib.mli"],
    srcs = ["stdlib.mli", "//stdlib:expand_module_aliases.awk"],
    cmd_bash  = " ".join([
        "awk -f $(location //stdlib:expand_module_aliases.awk) $(location :stdlib.mli)",
        "> $@"
    ]),
)

bootstrap_signature(
    name = "Stdlib_cmi",
    src  = "x/stdlib.mli",
    opts = SIG_OPTS + [
        "-nopervasives",
        "-no-alias-deps", "-w", "-49",
    ],
    deps   = [
        ":CamlinternalFormatBasics",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

################################################################
############  Non-namespaced Components of Stdlib ##############

## camlinternal* modules:
# All are in the Stdlib archive but none are in the Stdlib ns.
# Atomic and FormatBasic are deps of the nslib but do not depend on
# any other modules.
# The other camlinternal* are submodules but they are not renamed.
# They depend on other subcomponents, but since they are not renamed
# such deps must not be listed; instead just list :Stdlib.

bootstrap_module(
    name   = "CamlinternalAtomic",
    struct = "camlinternalAtomic.ml",
    sig    = "CamlinternalAtomic_cmi",
    opts = CAMLINTERNAL_OPTS + ["-nopervasives"],
    # deps   = [],
    ## dunno if this is the right place for this, but we need to force
    ## it for now:
    deps_runtime = [":camlheader"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    name = "CamlinternalAtomic_cmi",
    src  = "camlinternalAtomic.mli",
    opts = CAMLINTERNAL_OPTS + ["-nopervasives"],
    # deps   = [],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    name   = "CamlinternalFormat",
    struct = "camlinternalFormat.ml",
    sig    = "CamlinternalFormat_cmi",
    opts = CAMLINTERNAL_OPTS + [
        "-w", "+A", "-w", "-fragile-match",
        "-I", "stdlib"
    ],
    deps   = [
        ":CamlinternalFormatBasics",
        ":Stdlib",
        ":Stdlib.Buffer", ## (Stdlib Buffer)
        ":Stdlib.Bytes", ## (Stdlib Bytes)
        ":Stdlib.Char", ## (Stdlib Char)
        ":Stdlib.Int", ## (Stdlib Int)
        ":Stdlib.Sys", ## (Stdlib Sys)
        ":Stdlib.String", ## (Stdlib String)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    name = "CamlinternalFormat_cmi",
    src  = "camlinternalFormat.mli",
    opts = CAMLINTERNAL_OPTS + [
        "-open", "Stdlib",
        "-w", "+A", "-w", "-fragile-match"
    ],
    deps   = [
        ":CamlinternalFormatBasics", ## (CamlinternalFormatBasics)

        # Depends on Buffer, but we need to go through the ns Stdlib.
        # The problem is we cannot express a dependency on an ns
        # submodule using a namespaced symbol like ":Stdlib.Buffer";
        # we can only depend on build targets.

        # Depending directly on :Buffer cause it (and its deps) to be
        # built w/o namespacing, so we'll have the same stuff built
        # with and without namespacing. Which is bad.
        ":Stdlib.Buffer",

        # :Stdlib (the resolver) itself is not renamed, but it
        # contains the alias for Buffer => Stdlib__Buffer. We get:
        ## "Error: The module Buffer is an alias for module
        ##  Stdlib__Buffer, which is missing."
        # ":Stdlib",

        # That's because the Stdlib (resolver) module, unlike the NS
        # lib, does not depend on the submodules, because it is
        # compiled with '-no-alias-deps'. So they do not get built
        # unless the NS target is built. But we cannot depend on
        # :ocaml-stdlib on pain of circularity.

        # What we need is to make CamlinternalFormat a component but
        # not a submodule of the namespace, without renaming. Then we
        # could list sibling deps directly.
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    name   = "CamlinternalFormatBasics",
    struct = "camlinternalFormatBasics.ml",
    sig    = "CamlinternalFormatBasics_cmi",
    opts = CAMLINTERNAL_OPTS + ["-nopervasives"],
    # deps   = [],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    name = "CamlinternalFormatBasics_cmi",
    src  = "camlinternalFormatBasics.mli",
    opts = CAMLINTERNAL_OPTS + ["-nopervasives"],
    # deps   = [],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    name   = "CamlinternalLazy",
    struct = "camlinternalLazy.ml",
    sig    = "CamlinternalLazy_cmi",
    opts = CAMLINTERNAL_OPTS,
    deps   = [
        ":Stdlib",
        ":Stdlib.Obj",
        ":Stdlib.Sys",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    name = "CamlinternalLazy_cmi",
    src  = "camlinternalLazy.mli",
    # does not refer to any modules, but Stdlib is opened
    # automatically, leading to "Error: Unbound module Stdlib".
    # -nopervasives prevents this.
    opts = CAMLINTERNAL_OPTS, # + ["-open", "Stdlib"],
    deps   = [
        ":Stdlib",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    name   = "CamlinternalMod",
    struct = "camlinternalMod.ml",
    sig    = "CamlinternalMod_cmi",
    opts = CAMLINTERNAL_OPTS,
    deps   = [
        ":CamlinternalOO", ## (CamlinternalOO)
        ":CamlinternalLazy", ## (CamlinternalOO)
        ":Stdlib",
        ":Stdlib.Obj", ## (Stdlib Obj)
        ":Stdlib.Lazy", ## (Stdlib Lazy)
        ":Stdlib.Array", ## (Stdlib Array)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    name = "CamlinternalMod_cmi",
    src  = "camlinternalMod.mli",
    opts = CAMLINTERNAL_OPTS,
    deps   = [
        # ":Stdlib",
        ":Stdlib.Obj",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    name   = "CamlinternalOO",
    struct = "camlinternalOO.ml",
    sig    = "CamlinternalOO_cmi",
    opts = CAMLINTERNAL_OPTS + ["-no-alias-deps"],
    deps   = [
        # ":Stdlib",
        ":Stdlib.Sys", ## (Stdlib Sys)
        ":Stdlib.String", ## (Stdlib String)
        ":Stdlib.Obj", ## (Stdlib Obj)
        ":Stdlib.List", ## (Stdlib List)
        ":Stdlib.Char", ## (Stdlib Char)
        ":Stdlib.Array", ## (Stdlib Array)
        ":Stdlib.Map"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    name = "CamlinternalOO_cmi",
    src  = "camlinternalOO.mli",
    opts = CAMLINTERNAL_OPTS + ["-no-alias-deps"],
    deps   = [
        # ":Stdlib",
        ":Stdlib.Obj"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    name   = "Std_exit",
    struct = "std_exit.ml",
    opts = MODULE_OPTS + [
        "-use-prims", "../runtime/primitives",
    ],
    deps   = [
        ## NB: this depends on Stdlib module, which is the resolver.
        ## Does not depend on entire stdlib archive (//stdlib).
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

#########################################################
################  Namespaced Submodules  ################

bootstrap_module(
    name   = "Stdlib.Arg",
    ns    = ":Stdlib",
    struct = "arg.ml",
    sig    = "Stdlib.Arg_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.String",
        ":Stdlib.Printf",
        ":Stdlib.List",
        ":Stdlib.Int",
        ":Stdlib.Buffer",
        ":Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Arg_cmi",
    src  = "arg.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.String",
        ":Stdlib.Printf",
        ":Stdlib.List",
        ":Stdlib.Int",
        ":Stdlib.Buffer",
        ":Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Array",
    struct = "array.ml",
    sig    = "Stdlib.Array_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Array_cmi",
    src  = "array.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.ArrayLabels",
    struct = "arrayLabels.ml",
    sig    = "Stdlib.ArrayLabels_cmi",
    opts = MODULE_OPTS + ["-nolabels", "-no-alias-deps"],
    deps   = [
        ":Stdlib.Array"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

## WARNING: output name same as input name, so write to tmp dir:
genrule(
    name = "array_labels_mli_awk",
    outs = ["x/arrayLabels.mli"],
    srcs = ["arrayLabels.mli", "//stdlib:expand_module_aliases.awk"],
    cmd_bash  = " ".join([
        "awk -f $(location //stdlib:expand_module_aliases.awk)",
        "$(location :arrayLabels.mli)",
        "> $@"
    ]),
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.ArrayLabels_cmi",
    src  = "x/arrayLabels.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Atomic",
    struct = "atomic.ml",
    sig    = "Stdlib.Atomic_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":CamlinternalAtomic"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Atomic_cmi",
    src  = "atomic.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib_cmi"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Bigarray",
    struct = "bigarray.ml",
    sig    = "Stdlib.Bigarray_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.Complex",
        ":Stdlib.Array",
        ## (Genarray)
        ## (Array3)
        ## (Array2)
        ## (Array1)
        ## (Array0)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Bigarray_cmi",
    src  = "bigarray.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Complex", ## (Stdlib Complex)
        ## (Genarray)
        ## (Array3)
        ## (Array2)
        ## (Array1)
        ## (Array0)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Bool",
    struct = "bool.ml",
    sig    = "Stdlib.Bool_cmi",
    opts = MODULE_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Bool_cmi",
    src  = "bool.mli",
    opts = SIG_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Buffer",
    struct = "buffer.ml",
    sig    = "Stdlib.Buffer_cmi",
    opts = MODULE_OPTS + ["-w", "+A"],
    # + select({
    #     mode:native :-inline 3
    #     mode:bc: ["-w" "+A"]
    # }),
    deps   = [
        ":Stdlib.Uchar",
        ":Stdlib.Sys",
        ":Stdlib.String",
        ":Stdlib.Seq",
        ":Stdlib.Char",
        ":Stdlib.Bytes",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Buffer_cmi",
    src  = "buffer.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Uchar",
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Bytes",
    struct = "bytes.ml",
    sig    = "Stdlib.Bytes_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.Seq",
        ":Stdlib.Int",
        ":Stdlib.Char",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Bytes_cmi",
    src  = "bytes.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Int",
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.BytesLabels",
    struct = "bytesLabels.ml",
    sig    = "Stdlib.BytesLabels_cmi",
    opts = MODULE_OPTS + ["-nolabels", "-no-alias-deps"],
    deps   = [
        ":Stdlib.Bytes",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.BytesLabels_cmi",
    src  = "bytesLabels.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Callback",
    struct = "callback.ml",
    sig    = "Stdlib.Callback_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Obj"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Callback_cmi",
    src  = "callback.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.In_channel"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    name   = "Stdlib.Char",
    ns    = ":Stdlib",
    struct = "char.ml",
    sig    = "Stdlib.Char_cmi",
    opts = MODULE_OPTS,
    deps   = [":Stdlib"],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Char_cmi",
    src  = "char.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib_cmi"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Complex",
    struct = "complex.ml",
    sig    = "Stdlib.Complex_cmi",
    opts = MODULE_OPTS,
    deps   = [":Stdlib"],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Complex_cmi",
    src  = "complex.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Digest",
    struct = "digest.ml",
    sig    = "Stdlib.Digest_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.String",
        ":Stdlib.Char",
        ":Stdlib.Bytes",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Digest_cmi",
    src  = "digest.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.In_channel"
        # ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Either",
    struct = "either.ml",
    sig    = "Stdlib.Either_cmi",
    opts = MODULE_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Either_cmi",
    src  = "either.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Ephemeron",
    struct = "ephemeron.ml",
    sig    = "Stdlib.Ephemeron_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.Seq",
        ":Stdlib.Random",
        ":Stdlib.Obj",
        ":Stdlib.Lazy",
        ":Stdlib.Int",
        ":Stdlib.Array",
        ":Stdlib.Hashtbl",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Ephemeron_cmi",
    src  = "ephemeron.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Hashtbl",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Filename",
    struct = "filename.ml",
    sig    = "Stdlib.Filename_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.String",
        ":Stdlib.Random",
        ":Stdlib.Printf",
        ":Stdlib.List",
        ":Stdlib.Lazy",
        ":Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Filename_cmi",
    src  = "filename.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Float",
    struct = "float.ml",
    sig    = "Stdlib.Float_cmi",
    opts = MODULE_OPTS + ["-nolabels", "-no-alias-deps"],
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib.List",
        ":Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Float_cmi",
    src  = "float.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Format",
    struct = "format.ml",
    sig    = "Stdlib.Format_cmi",
    opts = MODULE_OPTS + ["-w", "+A", "-w", "-fragile-match"],
    deps   = [
        ":Stdlib.String",
        ## ":Stdlib",
        ":Stdlib.Seq",
        ":Stdlib.List",
        ":Stdlib.Int",
        ":Stdlib.Either",
        ":CamlinternalFormatBasics",
        ":CamlinternalFormat",
        ":Stdlib.Bytes",
        ":Stdlib.Buffer",
        ":Stdlib.Stack",
        ":Stdlib.Queue"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Format_cmi",
    src  = "format.mli",
    opts = SIG_OPTS + ["-w", "+A", "-w", "-fragile-match"],
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib.Either",
        ":Stdlib.Buffer",
        ## (Stdlib)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Fun",
    struct = "fun.ml",
    sig    = "Stdlib.Fun_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Printexc",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Fun_cmi",
    src  = "fun.mli",
    opts = SIG_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Gc",
    struct = "gc.ml",
    sig    = "Stdlib.Gc_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.String",
        ":Stdlib.Printf",
        ":Stdlib.Printexc",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Gc_cmi",
    src  = "gc.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Printexc",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Genlex",
    struct = "genlex.ml",
    sig    = "Stdlib.Genlex_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.String",
        ":Stdlib.List",
        ":Stdlib.Char",
        ":Stdlib.Bytes",
        ## (Stream)
        ":Stdlib.Hashtbl"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Genlex_cmi",
    src  = "genlex.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib",
        ":Stdlib.Stream"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Hashtbl",
    struct = "hashtbl.ml",
    sig    = "Stdlib.Hashtbl_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Array",
        ":Stdlib.Int",
        ":Stdlib.Lazy",
        ":Stdlib.Obj",
        ":Stdlib.Random",
        ":Stdlib.Seq",
        ":Stdlib.String",
        ":Stdlib.Sys",
        # ":CamlinternalLazy",
        ## (MakeSeeded)
        ## (H)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Hashtbl_cmi",
    src  = "hashtbl.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ## (H)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.In_channel",
    struct = "in_channel.ml",
    sig    = "Stdlib.In_channel_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ## ":Stdlib",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.In_channel_cmi",
    src  = "in_channel.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Int",
    struct = "int.ml",
    sig    = "Stdlib.Int_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Int_cmi",
    src  = "int.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Int32",
    struct = "int32.ml",
    sig    = "Stdlib.Int32_cmi",
    opts = MODULE_OPTS + ["-no-alias-deps"],
    deps   = [
        # ":Stdlib_cmi",
        ":Stdlib.Sys",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Int32_cmi",
    src  = "int32.mli",
    opts = SIG_OPTS + ["-no-alias-deps"],
    deps   = [
        # ":Stdlib_cmi",
        ":Stdlib.Sys",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Int64",
    struct = "int64.ml",
    sig    = "Stdlib.Int64_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Int64_cmi",
    src  = "int64.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Lazy",
    struct = "lazy.ml",
    sig    = "Stdlib.Lazy_cmi",
    opts = MODULE_OPTS,
    # + select({
    #     mode:native : ["-afl-inst-ratio 0"]
    # })
    deps   = [
        ":Stdlib.Obj",
        ":CamlinternalLazy",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Lazy_cmi",
    src  = "lazy.mli",
    opts = SIG_OPTS,
    deps   = [
        ":CamlinternalLazy",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Lexing",
    struct = "lexing.ml",
    sig    = "Stdlib.Lexing_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.String",
        ":Stdlib.Int",
        ":Stdlib.Bytes",
        ":Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Lexing_cmi",
    src  = "lexing.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.List",
    struct = "list.ml",
    sig    = "Stdlib.List_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.Seq",
        ":Stdlib.Either",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.List_cmi",
    src  = "list.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib_cmi",
        ":Stdlib.Seq",
        ":Stdlib.Either",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.ListLabels",
    struct = "listLabels.ml",
    sig    = "Stdlib.ListLabels_cmi",
    opts = MODULE_OPTS + ["-nolabels", "-no-alias-deps"],
    deps   = [
        ":Stdlib.List",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.ListLabels_cmi",
    src  = "listLabels.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib.Either",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Map",
    struct = "map.ml",
    sig    = "Stdlib.Map_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib"
        ## (Ord)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Map_cmi",
    src  = "map.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ## (Ord)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Marshal",
    struct = "marshal.ml",
    sig    = "Stdlib.Marshal_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Bytes",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Marshal_cmi",
    src  = "marshal.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.MoreLabels",
    struct = "moreLabels.ml",
    sig    = "Stdlib.MoreLabels_cmi",
    opts = MODULE_OPTS + ["-nolabels", "-no-alias-deps"],
    deps   = [
        ":Stdlib.Set",
        ":Stdlib.Map",
        ":Stdlib.Hashtbl"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.MoreLabels_cmi",
    src  = "moreLabels.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Set",
        ":Stdlib.Seq",
        # ":Stdlib.Ord",
        ":Stdlib.Map",
        ":Stdlib.Hashtbl"
        # H
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Nativeint",
    struct = "nativeint.ml",
    sig    = "Stdlib.Nativeint_cmi",
    opts = MODULE_OPTS,
    deps   = [
        # ":Stdlib_cmi",
        ":Stdlib.Sys",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Nativeint_cmi",
    src  = "nativeint.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib_cmi",
        ":Stdlib.Sys",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Obj",
    struct = "obj.ml",
    sig    = "Stdlib.Obj_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.Nativeint",
        ":Stdlib.Int32",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Obj_cmi",
    src  = "obj.mli",
    opts = SIG_OPTS,
    deps   = [
        # ":Stdlib_cmi",
        ":Stdlib.Int32",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Oo",
    struct = "oo.ml",
    sig    = "Stdlib.Oo_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":CamlinternalOO",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Oo_cmi",
    src  = "oo.mli",
    opts = SIG_OPTS + ["-no-principal"],
    deps   = [
        ":CamlinternalOO",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Option",
    struct = "option.ml",
    sig    = "Stdlib.Option_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Option_cmi",
    src  = "option.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Out_channel",
    struct = "out_channel.ml",
    sig    = "Stdlib.Out_channel_cmi",
    opts = MODULE_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Out_channel_cmi",
    src  = "out_channel.mli",
    opts = SIG_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Parsing",
    struct = "parsing.ml",
    sig    = "Stdlib.Parsing_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Obj",
        ":Stdlib.Lexing",
        ":Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Parsing_cmi",
    src  = "parsing.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Obj",
        ":Stdlib.Lexing",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Pervasives",
    struct = "pervasives.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":CamlinternalFormatBasics",
        ## (LargeFile)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Printexc",
    struct = "printexc.ml",
    sig    = "Stdlib.Printexc_cmi",
    opts = MODULE_OPTS,
    deps   = [
        # ":Stdlib",
        ":Stdlib.Printf",
        ":Stdlib.Obj",
        ":Stdlib.Buffer",
        ":Stdlib.Atomic",
        ":Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Printexc_cmi",
    src  = "printexc.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Printf",
    struct = "printf.ml",
    sig    = "Stdlib.Printf_cmi",
    opts = MODULE_OPTS + ["-w", "+A", "-w", "-fragile-match"],
    deps   = [
        ":CamlinternalFormatBasics",
        ":CamlinternalFormat",
        ":Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Printf_cmi",
    src  = "printf.mli",
    opts = SIG_OPTS + ["-w", "+A", "-w", "-fragile-match"],
    deps   = [
        ":Stdlib.Buffer",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Queue",
    struct = "queue.ml",
    sig    = "Stdlib.Queue_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib",
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Queue_cmi",
    src  = "queue.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
        # ":Stdlib",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Random",
    struct = "random.ml",
    sig    = "Stdlib.Random_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.String",
        ## ":Stdlib",
        ":Stdlib.Nativeint",
        ":Stdlib.Int64",
        ":Stdlib.Int32",
        ":Stdlib.Int",
        ":Stdlib.Digest",
        ":Stdlib.Char",
        ":Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Random_cmi",
    src  = "random.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Nativeint",
        ":Stdlib.Int64",
        ":Stdlib.Int32",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Result",
    struct = "result.ml",
    sig    = "Stdlib.Result_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Seq",
        # ":Stdlib"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Result_cmi",
    src  = "result.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib",
        ":Stdlib.Seq"
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Scanf",
    struct = "scanf.ml",
    sig    = "Stdlib.Scanf_cmi",
    opts   = MODULE_OPTS + ["-w", "+A", "-w", "-fragile-match"],
    # + select({
    #     mode:native  ["-inline", 9]
    # })
    deps   = [
        ":CamlinternalFormatBasics",
        ":CamlinternalFormat",
        ":Stdlib.Buffer",
        ":Stdlib.Bytes",
        ":Stdlib.Int",
        ":Stdlib.List",
        ":Stdlib.Printf",
        ":Stdlib.String",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name  = "Stdlib.Scanf_cmi",
    src   = "scanf.mli",
    opts  = SIG_OPTS + [
        "-w", "+A", "-w", "-fragile-match"
    ],
    deps  = [
        ":Stdlib",
        ":CamlinternalFormatBasics",
        ## (Stdlib)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Seq",
    struct = "seq.ml",
    sig    = "Stdlib.Seq_cmi",
    opts = MODULE_OPTS,
    # deps   = [],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Seq_cmi",
    src  = "seq.mli",
    opts = SIG_OPTS,
    # deps   = [],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Set",
    struct = "set.ml",
    sig    = "Stdlib.Set_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib.List",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Set_cmi",
    src  = "set.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Stack",
    struct = "stack.ml",
    sig    = "Stdlib.Stack_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Seq",
        ":Stdlib.List",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Stack_cmi",
    src  = "stack.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.StdLabels",
    struct = "stdLabels.ml",
    sig    = "Stdlib.StdLabels_cmi",
    opts = MODULE_OPTS + ["-nolabels", "-no-alias-deps"],
    deps   = [
        ":Stdlib.StringLabels",
        ":Stdlib.ListLabels",
        ":Stdlib.BytesLabels",
        ":Stdlib.ArrayLabels",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.StdLabels_cmi",
    src  = "stdLabels.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.StringLabels",
        ":Stdlib.ListLabels",
        ":Stdlib.BytesLabels",
        ":Stdlib.ArrayLabels",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Stream",
    struct = "stream.ml",
    sig    = "Stdlib.Stream_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":CamlinternalLazy",
        ":Stdlib.String",
        ":Stdlib.List",
        ":Stdlib.Lazy",
        ":Stdlib.Bytes",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Stream_cmi",
    src  = "stream.mli",
    opts = SIG_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.String",
    struct = "string.ml",
    sig    = "Stdlib.String_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Bytes",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.String_cmi",
    src  = "string.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.StringLabels",
    struct = "stringLabels.ml",
    sig    = "Stdlib.StringLabels_cmi",
    opts = MODULE_OPTS + ["-nolabels", "-no-alias-deps"],
    deps   = [
        ":Stdlib.String",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.StringLabels_cmi",
    src  = "stringLabels.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Seq",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Sys",
    struct = "sys.ml",
    sig    = "Stdlib.Sys_cmi",
    opts = MODULE_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Sys_cmi",
    src  = "sys.mli",
    opts = SIG_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Uchar",
    struct = "uchar.ml",
    sig    = "Stdlib.Uchar_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Char",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Uchar_cmi",
    src  = "uchar.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Char",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Unit",
    struct = "unit.ml",
    sig    = "Stdlib.Unit_cmi",
    opts = MODULE_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Unit_cmi",
    src  = "unit.mli",
    opts = SIG_OPTS,
    deps   = [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_module(
    ns    = ":Stdlib",
    name   = "Stdlib.Weak",
    struct = "weak.ml",
    sig    = "Stdlib.Weak_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Stdlib.Sys",
        ":Stdlib.Obj",
        ":Stdlib.Int",
        ":Stdlib.Array",
        ":Stdlib.Hashtbl",
        ## (H)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    ns   = ":Stdlib",
    name = "Stdlib.Weak_cmi",
    src  = "weak.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Stdlib.Hashtbl",
        ## (H)
    ],
    data = ["//runtime:primitives"],
    visibility = ["//visibility:public"]
)

################################################################
# HEADERPROGRAM = header
# HEADER_PATH = $(BINDIR)/
# HEADER_TARGET_PATH = $(TARGET_BINDIR)/
# TARGETHEADERPROGRAM = target_$(HEADERPROGRAM)

## on systems that support hashbang scripts, emits a hashbang header,
## e.g. '#!/usr/local/bin/ocamlrun', or does something I don't
## understand involving ocamlrun.

## on systems that do not support hashbang shell scripts, Makefile
## compiles header.c to tmpheader.exe, etc...

## so for PoC purposes we just emit a hard-coded shebang

## camlheader is required for compiling a bytecode executable. to get
## it into the deps list we add it to deps_runtime of stdlib.ml, until we
## figure out how best to do this.

genrule(
    name = "header",
    outs = ["camlheader"],
    srcs = [],
    cmd  = "\n".join([
        "echo '#!/usr/local/bin/ocamlrun' > $@"
    ]),
    visibility = ["//visibility:public"]
)
