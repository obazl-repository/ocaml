load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:BUILD.bzl",
     "RUNTIME_OCAMLRUN",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS")

exports_files([
    "bytesections.mli", "bytesections.ml",
    "dll.mli", "dll.ml",
    "instruct.mli", "instruct.ml",
    "meta.mli", "meta.ml",
    ## genrule: "opcodes.ml"
    "symtable.mli", "symtable.ml"
])

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS = ROOT_SIG_OPTS

STDLIB = ["//stdlib"]

## dev/test: build everthing
bootstrap_library(
    name = "bytecomp",
    manifest  = [
        ":Bytegen",
        ":Bytelibrarian",
        ":Bytelink",
        ":Bytepackager",
        ":Bytesections",
        ":Dll",
        ":Emitcode",
        ":Instruct",
        ":Meta",
        ":Printinstr",
        ":Symtable",
    ],
)

################################################################
## compilerlibs/Makefile.compilerlibs
# compilerlibs/ocamlbytecomp.cma: $(BYTECOMP_CMI) $(BYTECOMP)
# 	$(CAMLC) -a -o $@ $(BYTECOMP)
# compilerlibs/ocamlbytecomp.cmxa: $(BYTECOMP_CMI) $(BYTECOMP:.cmo=.cmx)
# 	$(CAMLOPT) -a $(OCAML_NATDYNLINKOPTS) -o $@ $(BYTECOMP:.cmo=.cmx)

bootstrap_archive(
    name = "ocamlbytecomp",
    opts = select({
        "//bzl/toolchain:boot": [],
        "//bzl/toolchain:bc_bc": [],
        "//bzl/toolchain:n_bc": [],
        "//bzl/toolchain:bc_n": [],
        "//bzl/toolchain:n_n": []
    }),
    manifest  = [
        ":Bytegen",
        ":Bytelibrarian",
        ":Bytelink",
        ":Bytepackager",
        ":Emitcode",
        ":Instruct",
        ":Printinstr",

        "//driver:Errors",
        "//driver:Compile",
        "//driver:Maindriver"
    ],
    # manifest = [
    #     "//bytecomp:ocamlbytecomp",
    # ],
    visibility = [
        "//boot:__pkg__",
        "//compilers:__subpackages__",
        "//fixpoint:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
        "//utils:__pkg__",
    ]
)

##############
# bootstrap_library(
#     name = "ocamlbytecomp",
#     manifest  = [
#         ":Bytegen",
#         ":Bytelibrarian",
#         ":Bytelink",
#         ":Bytepackager",
#         ":Emitcode",
#         ":Instruct",
#         ":Printinstr",

#         "//driver:Errors",
#         "//driver:Compile",
#         "//driver:Maindriver"
#     ],
#     visibility = ["//compilerlibs:__pkg__"]
# )

################################################################
## for ocamlcommmon archive:
# defined in compilerlibs/Makefile.compilerlibs as COMP, COMP_CMI
bootstrap_library(
    name = "ocamlcommon",
    manifest  = [
        "//driver:Compenv",
        "//driver:Compile_common",
        "//driver:Compmisc",
        "//driver:Main_args",
        "//driver:Makedepend",
        "//driver:Pparse",
        ":Bytesections",
        ":Dll",
        ":Meta",
        ":Opcodes",
        ":Symtable",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
bootstrap_module(
    name   = "Bytegen",
    struct = "bytegen.ml",
    sig    = "Bytegen_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Debuginfo",
        "//lambda:Lambda",
        "//lambda:Matching",
        "//lambda:Switch",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Stack",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Primitive",
        "//typing:Subst",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Misc",
        ":Instruct",
        # "//stdlib:Stdlib",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_signature(
    name = "Bytegen_cmi",
    src  = "bytegen.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Instruct",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Bytelibrarian",
    struct = "bytelibrarian.ml",
    sig    = "Bytelibrarian_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Emitcode",
        ":Bytelink",
        "//stdlib:Stdlib.String",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//utils:Config",
        "//file_formats:Cmo_format_cmi",
        "//utils:Clflags",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//driver:__pkg__"]
)

bootstrap_signature(
    name = "Bytelibrarian_cmi",
    src  = "bytelibrarian.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Bytelink",
    struct = "bytelink.ml",
    sig    = "Bytelink_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Symtable",
        ":Instruct",
        ":Emitcode",
        ":Dll",
        ":Bytesections",
        "//utils:Warnings",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Option",
        "//bytecomp:Opcodes",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//stdlib:Stdlib.Marshal",
        ## (LongString)
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//utils:Consistbl",
        "//utils:Config",
        "//file_formats:Cmo_format_cmi",
        "//utils:Clflags",
        "//stdlib:Stdlib.Char",
        "//utils:Ccomp",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    ## "//stdlib:camlheader"
)

bootstrap_signature(
    name = "Bytelink_cmi",
    src  = "bytelink.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Symtable",
        "//utils:Misc",
        "//stdlib:Stdlib.Format",
        "//file_formats:Cmo_format_cmi",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Bytepackager",
    struct = "bytepackager.ml",
    sig    = "Bytepackager_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Instruct",
        ":Emitcode",
        ":Bytelink",
        ":Bytegen",
        "//typing:Typemod",
        "//lambda:Translmod",
        "//typing:Subst",
        "//lambda:Simplif",
        "//lambda:Printlambda",
        "//typing:Path",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//typing:Env",
        "//utils:Config",
        "//file_formats:Cmo_format_cmi",
        "//utils:Clflags",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//driver:__pkg__"]
)

bootstrap_signature(
    name = "Bytepackager_cmi",
    src  = "bytepackager.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//typing:Env_cmi"
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Bytesections",
    struct = "bytesections.ml",
    sig    = "Bytesections_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.List",
        "//utils:Config"
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_signature(
    name = "Bytesections_cmi",
    src  = "bytesections.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Dll",
    struct = "dll.ml",
    sig    = "Dll_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Filename",
        "//utils:Config",
        "//utils:Binutils",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__subpackages__"
    ]
)

bootstrap_signature(
    name = "Dll_cmi",
    src  = "dll.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Emitcode",
    struct = "emitcode.ml",
    sig    = "Emitcode_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmo_format_cmi",
        "//lambda:Translmod",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Marshal",
        "//stdlib:Stdlib.Sys",
        "//typing:Ident",
        "//typing:Primitive",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Misc",
        ":Bytegen",
        ":Instruct",
        ":Opcodes",
        "//typing:Btype",
        "//typing:Env",
        ## (LongString)
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_signature(
    name = "Emitcode_cmi",
    src  = "emitcode.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmo_format_cmi",
        "//typing:Ident",
        "//utils:Misc",
        ":Instruct",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Instruct",
    struct = "instruct.ml",
    sig    = "Instruct_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Lambda",
        # "//stdlib:Stdlib",
        "//typing:Types",
        "//typing:Subst",
        "//parsing:Location",
        "//typing:Ident",
        "//typing:Env",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//tools:__pkg__"]
)

bootstrap_signature(
    name = "Instruct_cmi",
    src  = "instruct.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        # "//stdlib:Stdlib",
        "//lambda:Lambda_cmi",
        "//typing:Types",
        "//typing:Subst",
        "//parsing:Location",
        "//typing:Ident",
        "//typing:Env",
    ],
    data = ["//runtime:primitives"],
    visibility = ["//driver:__pkg__"]
)

bootstrap_module(
    name   = "Meta",
    struct = "meta.ml",
    sig    = "Meta_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Instruct",
        "//stdlib:Stdlib.Obj",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__pkg__"
    ]
)

bootstrap_signature(
    name = "Meta_cmi",
    src  = "meta.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Instruct",
        "//stdlib:Stdlib.Obj",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Opcodes",
    struct = "opcodes.ml",
    # sig    = ":Opcodes_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//tools:__pkg__",
        "//toplevel:__pkg__"
    ]
)

## root Makefile:
# bytecomp/opcodes.ml: runtime/caml/instruct.h $(make_opcodes)
# 	$(NEW_OCAMLRUN) $(make_opcodes) -opcodes < $< > $@
## NEW_OCAMLRUN = //runtime:ocamlrun, we call it RUNTIME_OCAMLRUN
## make_opcodes is //tools:make_opcodes
genrule(
    name  = "opcodes_ml",
    srcs  = ["//runtime/caml:instruct.h", "//tools:make_opcodes"],
    tools = [RUNTIME_OCAMLRUN],
    outs  = ["opcodes.ml"],
    cmd   = " ".join([
        "$(execpath {NEW_OCAMLRUN})".format(
            NEW_OCAMLRUN = RUNTIME_OCAMLRUN),
        "$(location //tools:make_opcodes)",
        "-opcodes",
        "< $(location //runtime/caml:instruct.h)",
        "> $@"
    ]),
    visibility = ["//visibility:public"]
)

## NB: the makefile extracts the mli file using ocamlc -i
# the rules don't seem to work for that
# but we can just compile the ml file without an mli file, no?

# bootstrap_signature(
#     name = "opcodes_mli",
#     src  = "opcodes.ml",
#     opts = SIG_OPTS,
#     deps   = STDLIB + [
#     ],
#     data = ["//runtime:primitives"]
# )

# bytecomp/opcodes.mli: bytecomp/opcodes.ml
# 	$(CAMLC) -i $< > $@
# CAMLC=$(BOOT_OCAMLC) -g -nostdlib -I boot -use-prims runtime/primitives
# BOOT_OCAMLC = $(OCAMLRUN) $(ROOTDIR)/boot/ocamlc

# genrule(
#     name  = "opcodes_mli",
#     srcs  = ["opcodes.ml", "//boot:ocamlc", "//stdlib"],
#     outs  = ["opcodes.mli"],
#     tools = ["//runtime:ocamlrun"],
#     cmd   = " ".join([
#         # "STDLIB=echo `dirname $(location //stdlib)` &&",
#         "$(execpath //runtime:ocamlrun)",
#         "$(location //boot:ocamlc)",
#         "-g -nostdlib -I boot -use-prims runtime/primitives",
#         "-I bazel-out/darwin-fastbuild/bin/stdlib",
#         "-i $(location opcodes.ml)",
#         "> $@"
#     ])
# )

bootstrap_module(
    name   = "Printinstr",
    struct = "printinstr.ml",
    sig    = "Printinstr_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//lambda:Printlambda",
        "//lambda:Lambda",
        ":Instruct",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Array",
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_signature(
    name = "Printinstr_cmi",
    src  = "printinstr.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Instruct",
        "//stdlib:Stdlib.Format",
    ],
    data = ["//runtime:primitives"]
)

bootstrap_module(
    name   = "Symtable",
    struct = "symtable.ml",
    sig    = "Symtable_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmo_format_cmi",
        "//lambda:Runtimedef",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
        "//typing:Ident",
        "//typing:Predef",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Misc",
        ":Bytesections",
        ":Dll",
        ":Meta",
        #### (LongString)
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__"
    ]
)

bootstrap_signature(
    name = "Symtable_cmi",
    src  = "symtable.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Digest",
        "//file_formats:Cmo_format_cmi"
    ],
    data = ["//runtime:primitives"]
)

