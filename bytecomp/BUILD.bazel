load("//bzl:rules.bzl",
     "boot_archive",
     "boot_library",
     "compiler_library",
     "compiler_module",
     "compiler_signature",
)
load("//vendor/mustach:BUILD_RULES.bzl", "mustache")

package(default_visibility = ["//visibility:public"])

load("//config:WARNINGS.bzl", "w")

exports_files([
    "bytesections.mli", "bytesections.ml",
    "dll.mli", "dll.ml",
    "instruct.mli", "instruct.ml",
    "meta.mli", "meta.ml",
    ## genrule: "opcodes.ml"
    "symtable.mli", "symtable.ml",
    "opcodes.json"
])

MODULE_OPTS = []
SIG_OPTS    = []

## dev/test: build everthing
################################################################
# makefile target is in compilerlibs/Makefile.compilerlibs

compiler_library(
    name     = "ocamlbytecomp",
    # archive  = True,
    manifest = [
        ":Bytegen",
        ":Bytelibrarian",
        ":Bytelink",
        ":Bytepackager",
        ":Emitcode",
        ":Instruct",
        ":Printinstr",

        "//driver:Errors",
        "//driver:Compile",
        "//driver:Maindriver"
    ],
    visibility = [
        "@baseline//:__subpackages__",
        "//bin:__subpackages__",
        "//boot:__subpackages__",
        "//dev:__subpackages__",
        "//compilers:__subpackages__",
        "//fixpoint:__pkg__",
        "//ocamltest:__pkg__",
        "//test:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
        "//utils:__pkg__",
        "//testsuite:__subpackages__",
    ]
)

##############
# boot_library(
#     name = "ocamlbytecomp",
#     manifest  = [
#         ":Bytegen",
#         ":Bytelibrarian",
#         ":Bytelink",
#         ":Bytepackager",
#         ":Emitcode",
#         ":Instruct",
#         ":Printinstr",

#         "//driver:Errors",
#         "//driver:Compile",
#         "//driver:Maindriver"
#     ],
#     visibility = ["//compilerlibs:__pkg__"]
# )

################################################################
## for //compilerlibs:ocamlcommmon archive:
# defined in compilerlibs/Makefile.compilerlibs as COMP, COMP_CMI
boot_library(
    name = "ocamlcommon",
    manifest  = [
        ## we could aggregate the driver modules here,
        ## but instead we define //driver:ocamlcommon,
        ## so //compilerlibs:ocamlcommon must depend on both.
        # "//driver:Compenv",
        # "//driver:Compile_common",
        # "//driver:Compmisc",
        # "//driver:Main_args",
        # "//driver:Makedepend",
        # "//driver:Pparse",
        ":Bytesections",
        ":Dll",
        ":Meta",
        ":Opcodes",
        ":Symtable",
    ],
    visibility = [
        "//visibility:public",
        # "//toolsuite:__pkg__",
        # "//compilerlibs:__pkg__"
    ]
)

################################################################
compiler_module(
    name   = "Bytegen",
    struct = "bytegen.ml",
    sig    = "Bytegen_cmi",
    opts = MODULE_OPTS + [
        # "-w", "+a-4-9-40-41-42-44-45-48",
        # "-w", "+a",
        # "-warn-error", "@a",
        # "-w", "-4-9-32-41-42-44"
    ],
    warnings = [
        w.AMBIGUOUS_NAME_41,
        w.DISAMBIGUATED_NAME_42,
        w.OPEN_SHADOW_IDENTIFIER_44,
        w.FRAGILE_MATCH_4,
        w.MISSING_RECORD_FIELD_PATTERN_9,
        w.UNUSED_VALUE_DECLARATION_32,
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Stack",
    ],
    deps   = [
        "//config:Config",
        "//lambda:Debuginfo",
        "//lambda:Lambda",
        "//lambda:Matching",
        "//lambda:Switch",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Primitive",
        "//typing:Subst",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Misc",
        ":Instruct",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

compiler_signature(
    name = "Bytegen_cmi",
    src  = "bytegen.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Instruct_cmi",
    ],
)

compiler_module(
    name   = "Bytelibrarian",
    struct = "bytelibrarian.ml",
    sig    = "Bytelibrarian_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//parsing:Location",
        "//utils:Clflags",
        "//utils:Load_path",
        "//utils:Misc",
        ":Bytelink",
        ":Emitcode",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//driver:__pkg__"
    ]
)

compiler_signature(
    name = "Bytelibrarian_cmi",
    src  = "bytelibrarian.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmo_format_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Bytelink",
    struct = "bytelink.ml",
    sig    = "Bytelink_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Opcodes",
        "//config:Config",
        "//parsing:Location",
        "//typing:Ident",
        "//utils:Ccomp",
        "//utils:Clflags",
        "//utils:Consistbl",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
        ":Bytesections",
        ":Dll",
        ":Emitcode",
        ":Instruct",
        ":Symtable",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Marshal",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

compiler_signature(
    name = "Bytelink_cmi",
    src  = "bytelink.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmo_format_cmi",
        "//utils:Misc_cmi",
        ":Symtable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Bytepackager",
    struct = "bytepackager.ml",
    sig    = "Bytepackager_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//lambda:Printlambda",
        "//lambda:Simplif",
        "//lambda:Translmod",
        "//parsing:Location",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Subst",
        "//typing:Typemod",
        "//utils:Clflags",
        "//utils:Load_path",
        "//utils:Misc",
        ":Bytegen",
        ":Bytelink",
        ":Emitcode",
        ":Instruct",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ],
    visibility = ["//driver:__pkg__"]
)

compiler_signature(
    name = "Bytepackager_cmi",
    src  = "bytepackager.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmo_format_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Bytesections",
    struct = "bytesections.ml",
    sig    = "Bytesections_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    deps   = [
        "//config:Config"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//debugger:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
    ]
)

compiler_signature(
    name = "Bytesections_cmi",
    src  = "bytesections.mli",
    opts = SIG_OPTS,
    stdlib_deps   = ["//stdlib:Stdlib_cmi"],
    visibility = [
        "//otherlibs/dynlink:__pkg__"
    ]
)

compiler_module(
    name   = "Dll",
    struct = "dll.ml",
    sig    = "Dll_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    deps   = [
        "//config:Config",
        "//utils:Binutils",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__subpackages__"
    ]
)

compiler_signature(
    name = "Dll_cmi",
    src  = "dll.mli",
    opts = SIG_OPTS,
    stdlib_deps   = ["//stdlib:Stdlib_cmi"],
    visibility = [
        "//otherlibs/dynlink:__pkg__"
    ]
)

compiler_module(
    name   = "Emitcode",
    struct = "emitcode.ml",
    sig    = "Emitcode_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//lambda:Translmod",
        "//parsing:Location",
        "//typing:Btype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Primitive",
        "//utils:Clflags",
        "//utils:Misc",
        ":Bytegen",
        ":Instruct",
        ":Opcodes",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Marshal",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

compiler_signature(
    name = "Emitcode_cmi",
    src  = "emitcode.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmo_format_cmi",
        "//parsing:Asttypes_cmi",
        "//typing:Ident_cmi",
        "//utils:Misc_cmi",
        ":Instruct_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Instruct",
    struct = "instruct.ml",
    sig    = "Instruct_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Lambda",
        "//parsing:Location",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Subst",
        "//typing:Types",
    ],
    stdlib_deps = [
        "//stdlib:Primitives",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__"
    ]
)

compiler_signature(
    name = "Instruct_cmi",
    src  = "instruct.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Lambda_cmi",
        "//parsing:Location_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
        "//typing:Subst_cmi",
        "//typing:Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//driver:__pkg__"
    ]
)

compiler_module(
    name   = "Meta",
    struct = "meta.ml",
    sig    = "Meta_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Instruct",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Obj",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__pkg__"
    ]
)

compiler_signature(
    name = "Meta_cmi",
    src  = "meta.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Instruct_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Obj_cmi",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__"
    ]
)

# ./boot/ocamlrun ./boot/ocamlc
# -nostdlib
# -use-prims runtime/primitives
# -g -strict-sequence -principal -absname
# -w +a-4-9-40-41-42-44-45-48
# -warn-error +a
# -bin-annot -strict-formats
compiler_module(
    name   = "Opcodes",
    struct = "opcodes_ml",
    # makefiles generate opcodes.mli from opcodes.ml - why bother?
    # sig    = ":Opcodes_cmi",
    opts = MODULE_OPTS + ["-open", "Stdlib"],
    warnings = [w.MISSING_MLI],
    stdlib_deps   = ["//stdlib:Stdlib"],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__"
    ]
)

## root Makefile:
# bytecomp/opcodes.ml: runtime/caml/instruct.h $(make_opcodes)
# 	$(NEW_OCAMLRUN) $(make_opcodes) -opcodes < $< > $@
## NEW_OCAMLRUN = //boot/baseline:ocamlrun, we call it RUNTIME_OCAMLRUN
## make_opcodes is //tools:make_opcodes

## macos make.log:
# ../boot/ocamlrun ../boot/ocamllex -q make_opcodes.mll
### Link make_opcodes program:
# ../boot/ocamlrun ../boot/ocamlc -nostdlib -I ../boot -g -use-prims ../runtime/primitives -I .. make_opcodes.ml -o make_opcodes

### Run make_opcodes pgm using "new" ocamlrun (why?)
# ./runtime/ocamlrun tools/make_opcodes -opcodes < runtime/caml/instruct.h > bytecomp/opcodes.ml

### Extract principal sig:
# ./boot/ocamlrun ./boot/ocamlc -nostdlib -I ./boot -use-prims runtime/primitives -i bytecomp/opcodes.ml > bytecomp/opcodes.mli
### Compile both:
# ./boot/ocamlrun ./boot/ocamlc -nostdlib -I ./boot -use-prims runtime/primitives -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats -I bytecomp -I utils -I parsing -I typing -I bytecomp -I file_formats -I lambda -I middle_end -I middle_end/closure -I middle_end/flambda -I middle_end/flambda/base_types -I asmcomp -I driver -I toplevel -c bytecomp/opcodes.mli
# ./boot/ocamlrun ./boot/ocamlc -nostdlib -I ./boot -use-prims runtime/primitives -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats -I bytecomp -I utils -I parsing -I typing -I bytecomp -I file_formats -I lambda -I middle_end -I middle_end/closure -I middle_end/flambda -I middle_end/flambda/base_types -I asmcomp -I driver -I toplevel -c bytecomp/opcodes.ml

mustache(
    name = "opcodes_ml",
    out  = "opcodes.ml",
    json = "opcodes.json",
    template = "opcodes.ml.mustache",
)

mustache(
    name = "opnames_ml",
    out  = "opnames.ml",
    json = "opcodes.json",
    template = "opnames.ml.mustache",
    visibility = ["//tools:__pkg__"]
)

## Run make_opcodes executable under "new" ocamlrun:
# genrule(
#     outs  = ["opcodes.ml"],
#     name  = "opcodes_ml",
#     srcs  = ["//runtime/caml:instruct.h", "//tools:make_opcodes"],
#     tools = [
#         "//runtime:ocamlrun"
#         # "//boot/baseline:ocamlrun", #  FIXME- makefile runs under runtime/ocamlrun
#         # "//tools:make_opcodes" # no need to transition to exec target
#     ],
#     cmd   = " ".join([
#         # "$(execpath {NEW_OCAMLRUN})".format(
#         #     NEW_OCAMLRUN = RUNTIME_OCAMLRUN),
#         "$(execpath //runtime:ocamlrun)",
#         "$(location //tools:make_opcodes)",
#         "-opcodes",
#         # "-opnames",
#         "< $(location //runtime/caml:instruct.h)",
#         "> $@"
#     ]),
#     visibility = ["//visibility:public"]
# )

## NB: the makefile extracts the mli file using ocamlc -i
# the rules don't seem to work for that
# but we can just compile the ml file without an mli file, no?

# compiler_signature(
#     name = "opcodes_mli",
#     src  = "opcodes.ml",
#     opts = SIG_OPTS,
#     deps   = [
#     ],
# # )

# bytecomp/opcodes.mli: bytecomp/opcodes.ml
# 	$(CAMLC) -i $< > $@
# CAMLC=$(BOOT_OCAMLC) -g -nostdlib -I boot -use-prims runtime/primitives
# BOOT_OCAMLC = $(OCAMLRUN) $(ROOTDIR)/boot/ocamlc

# genrule(
#     name  = "opcodes_mli",
#     srcs  = ["opcodes.ml", "//boot/baseline:ocamlc", "//stdlib"],
#     outs  = ["opcodes.mli"],
#     tools = ["//boot/baseline:ocamlrun"],
#     cmd   = " ".join([
#         # "STDLIB=echo `dirname $(location //stdlib)` &&",
#         "$(execpath //boot/baseline:ocamlrun)",
#         "$(location //boot/baseline:ocamlc)",
#         "-g -nostdlib -I boot -use-prims runtime/primitives",
#         "-I bazel-out/darwin-fastbuild/bin/stdlib",
#         "-i $(location opcodes.ml)",
#         "> $@"
#     ])
# )

compiler_module(
    name   = "Printinstr",
    struct = "printinstr.ml",
    sig    = "Printinstr_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//lambda:Lambda",
        "//lambda:Printlambda",
        "//parsing:Location",
        "//typing:Ident",
        ":Instruct",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

compiler_signature(
    name = "Printinstr_cmi",
    src  = "printinstr.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Instruct_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Symtable",
    struct = "symtable.ml",
    sig    = "Symtable_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//lambda:Runtimedef",
        "//parsing:Location",
        "//typing:Ident",
        "//typing:Predef",
        "//utils:Clflags",
        "//utils:Misc",
        ":Bytesections",
        ":Dll",
        ":Meta",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__"
    ]
)

compiler_signature(
    name = "Symtable_cmi",
    src  = "symtable.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmo_format_cmi",
        "//parsing:Asttypes_cmi",
        "//typing:Ident_cmi",
        "//utils:Misc_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Obj_cmi",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__"
    ]
)

################################################################
################
# make_opcodes, opnames.ml
# OCAMLRUN ?= $(ROOTDIR)/boot/ocamlrun$(EXE)
# NEW_OCAMLRUN ?= $(ROOTDIR)/runtime/ocamlrun$(EXE)
# opnames.ml: $(ROOTDIR)/runtime/caml/instruct.h $(make_opcodes)
# 	$(NEW_OCAMLRUN) $(make_opcodes) -opnames < $< > $@
compiler_module(
    name = "Opnames",
    struct = ":opnames.ml",
    opts = MODULE_OPTS,
    warnings = [w.MISSING_MLI],
    stdlib_deps = ["//stdlib:Stdlib"]
)

## moved to bytecode:opnames_ml
# genrule(
#     name = "gen_opnames",
#     outs = ["opnames.ml"],
#     srcs = ["//runtime/caml:instruct.h", ":make_opcodes"],
#     tools = ["//boot/baseline:ocamlrun"],
#     cmd   = " ".join([
#         "$(execpath //boot/baseline:ocamlrun) $(location :make_opcodes)",
#         "-opnames < $(location //runtime/caml:instruct.h)",
#         "> $@"
#     ])
# )
