## make log:

# ./boot/ocamlrun ./boot/ocamlc
# -nostdlib -use-prims -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats

# ./boot/ocamlrun ./ocamlopt
# -nostdlib -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats

load("//bzl:rules.bzl",
     "compiler_module",
     "compiler_library",
     "compiler_signature")

load("//config:WARNINGS.bzl", "w")

package(default_visibility = ["//visibility:public"])

exports_files([
    "btype.mli", "btype.ml",
    "datarepr.mli", "datarepr.ml",
    "env.mli", "env.ml",
    "ident.mli", "ident.ml",
    "outcometree.mli", # "outcometree.ml",
    "path.ml", "path.mli",
    "persistent_env.mli", "persistent_env.ml",
    "predef.mli", "predef.ml",
    "primitive.mli", "primitive.ml",
    "shape.mli", "shape.ml",
    "subst.mli", "subst.ml",
    "type_immediacy.mli", "type_immediacy.ml",
    "types.mli", "types.ml",
])

##FIXME: -nostdlib in global
MODULE_OPTS = []
SIG_OPTS    = []

# compiler_library(
#     name = "typing",
#     manifest  = [
#         ":Btype",
#         ":Cmt2annot",
#         ":Ctype",
#         ":Datarepr",
#         ":Env",
#         ":Envaux",
#         ":Errortrace",
#         ":Ident",
#         ":Includeclass",
#         ":Includecore",
#         ":Includemod",
#         ":Includemod_errorprinter",
#         ":Mtype",
#         ":Oprint",
#         ":Parmatch",
#         ":Path",
#         ":Patterns",
#         ":Persistent_env",
#         ":Predef",
#         ":Primitive",
#         ":Printpat",
#         ":Printtyp",
#         ":Printtyped",
#         ":Rec_check",
#         ":Shape",
#         ":Signature_group",
#         ":Stypes",
#         ":Subst",
#         ":Tast_iterator",
#         ":Tast_mapper",
#         ":Type_immediacy",
#         ":Typeclass",
#         ":Typecore",
#         ":Typedecl",
#         ":Typedecl_immediacy",
#         ":Typedecl_properties",
#         ":Typedecl_separability",
#         ":Typedecl_unboxed",
#         ":Typedecl_variance",
#         ":Typedtree",
#         ":Typemod",
#         ":Typeopt",
#         ":Types",
#         ":Typetexp",
#         ":Untypeast",

#         # ":Annot_cmi",
#         # ":Outcometree_cmi"
#     ],
#     visibility = ["//compilerlibs:__pkg__"]
# )

compiler_library(
    name = "ocamlcommon",
    manifest  = [
        ":Btype",
        ":Cmt2annot",
        ":Ctype",
        ":Datarepr",
        ":Env",
        ":Envaux",
        ":Errortrace",
        ":Ident",
        ":Includeclass",
        ":Includecore",
        ":Includemod",
        ":Includemod_errorprinter",
        ":Mtype",
        ":Oprint",
        ":Parmatch",
        ":Path",
        ":Patterns",
        ":Persistent_env",
        ":Predef",
        ":Primitive",
        ":Printpat",
        ":Printtyp",
        ":Printtyped",
        ":Rec_check",
        ":Shape",
        ":Signature_group",
        ":Stypes",
        ":Subst",
        ":Tast_iterator",
        ":Tast_mapper",
        ":Type_immediacy",
        ":Typeclass",
        ":Typecore",
        ":Typedecl",
        ":Typedecl_immediacy",
        ":Typedecl_properties",
        ":Typedecl_separability",
        ":Typedecl_unboxed",
        ":Typedecl_variance",
        ":Typedtree",
        ":Typemod",
        ":Typeopt",
        ":Types",
        ":Typetexp",
        ":Untypeast",

        ## NB: these should not really be in this manifest, but they
        ## are direct deps of some of the component modules, so we
        ## need to add them so that linking will work. They would not
        ## be added to link cmds automatically otherwise.
        "//file_formats:Cmi_format",
        "//file_formats:Cmt_format"
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
compiler_signature(
    name = "Annot_cmi",
    src  = "annot.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi"
    ],
    visibility = ["//tools:__pkg__"]
)

compiler_module(
    name   = "Btype",
    struct = "btype.ml",
    sig    = "Btype_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Local_store",
        ":Ident",
        ":Path",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//lambda:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__pkg__"
    ]
)

compiler_signature(
    name = "Btype_cmi",
    src  = "btype.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Path_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Set_cmi",
    ],
)

compiler_module(
    name   = "Cmt2annot",
    struct = "cmt2annot.ml",
    opts = MODULE_OPTS,
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//file_formats:Cmt_format",
        "//parsing:Location",
        "//parsing:Longident",
        ":Env",
        ":Envaux",
        ":Ident",
        ":Oprint",
        ":Path",
        ":Stypes",
        ":Tast_iterator",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
    visibility = ["//tools:__pkg__"]
)

compiler_module(
    name   = "Ctype",
    struct = "ctype.ml",
    sig    = "Ctype_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Clflags",
        "//utils:Local_store",
        "//utils:Misc",
        ":Btype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Path",
        ":Predef",
        ":Subst",
        ":Type_immediacy",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//lambda:__pkg__",
        "//toplevel:__subpackages__"
    ]
)

compiler_signature(
    name = "Ctype_cmi",
    src  = "ctype.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        ":Btype_cmi",
        ":Env_cmi",
        ":Errortrace_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Type_immediacy_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Datarepr",
    struct = "datarepr.ml",
    sig    = "Datarepr_cmi",
    opts = MODULE_OPTS,
	warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Location",
        ":Btype",
        ":Ident",
        ":Path",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__pkg__"
    ]
)

compiler_signature(
    name = "Datarepr_cmi",
    src  = "datarepr.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Env",
    struct = "env.ml",
    sig    = "Env_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//file_formats:Cmi_format",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Load_path",
        "//utils:Local_store",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Datarepr",
        ":Ident",
        ":Path",
        ":Persistent_env",
        ":Predef",
        ":Shape",
        ":Subst",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Seq",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
        "//middle_end/closure:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Env_cmi",
    src  = "env.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmi_format_cmi",
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//utils:Load_path_cmi",
        "//utils:Misc_cmi",
        "//utils:Warnings_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Subst_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.String_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_module(
    name   = "Envaux",
    struct = "envaux.ml",
    sig    = "Envaux_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Location",
        "//utils:Lazy_backtrack",
        ":Env",
        ":Ident",
        ":Path",
        ":Printtyp",
        ":Subst",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//tools:__pkg__"
    ]
)

compiler_signature(
    name = "Envaux_cmi",
    src  = "envaux.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Env_cmi",
        ":Path_cmi",
        ":Subst_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Errortrace",
    struct = "errortrace.ml",
    sig    = "Errortrace_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Path",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Errortrace_cmi",
    src  = "errortrace.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Path_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Ident",
    struct = "ident.ml",
    sig    = "Ident_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Clflags",
        "//utils:Identifiable",
        "//utils:Local_store",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__"
    ]
)

compiler_signature(
    name = "Ident_cmi",
    src  = "ident.mli",
    opts = SIG_OPTS,
    deps   = [
        "//utils:Identifiable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end:__subpackages__",
        "//lambda:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_module(
    name   = "Includeclass",
    struct = "includeclass.ml",
    sig    = "Includeclass_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Builtin_attributes",
        ":Ctype",
        ":Path",
        ":Printtyp",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Includeclass_cmi",
    src  = "includeclass.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        ":Ctype_cmi",
        ":Env_cmi",
        ":Printtyp_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Includecore",
    struct = "includecore.ml",
    sig    = "Includecore_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Builtin_attributes",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Path",
        ":Primitive",
        ":Printtyp",
        ":Subst",
        ":Type_immediacy",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.StringLabels",
    ],
)

compiler_signature(
    name = "Includecore_cmi",
    src  = "includecore.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        "//utils:Diffing_with_keys_cmi",
        ":Env_cmi",
        ":Errortrace_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Type_immediacy_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Includemod",
    struct = "includemod.ml",
    sig    = "Includemod_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//file_formats:Cmt_format",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Diffing",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Includeclass",
        ":Includecore",
        ":Mtype",
        ":Path",
        ":Predef",
        ":Primitive",
        ":Printtyp",
        ":Subst",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__subpackages__"
    ]
)

compiler_signature(
    name = "Includemod_cmi",
    src  = "includemod.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        "//utils:Diffing_cmi",
        "//utils:Diffing_with_keys_cmi",
        ":Ctype_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Includecore_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Map_cmi",
    ],
)

compiler_module(
    name   = "Includemod_errorprinter",
    struct = "includemod_errorprinter.ml",
    sig    = "Includemod_errorprinter_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Location",
        "//utils:Clflags",
        "//utils:Diffing",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        ":Env",
        ":Ident",
        ":Includeclass",
        ":Includecore",
        ":Includemod",
        ":Oprint",
        ":Path",
        ":Printtyp",
        ":Subst",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Marshal",
    ],
)

compiler_signature(
    name = "Includemod_errorprinter_cmi",
    src  = "includemod_errorprinter.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Includemod_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Mtype",
    struct = "mtype.ml",
    sig    = "Mtype_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Location",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Path",
        ":Subst",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
)

compiler_signature(
    name = "Mtype_cmi",
    src  = "mtype.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Oprint",
    struct = "oprint.ml",
    sig    = "Oprint_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Pprintast",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//toplevel:__pkg__",
    ]
)

compiler_signature(
    name = "Oprint_cmi",
    src  = "oprint.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Outcometree_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

# ./boot/ocamlrun ./boot/ocamlc -g -nostdlib -I boot -use-prims runtime/primitives -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48-66-70 -warn-error +a -bin-annot -safe-string -strict-formats -I utils -I parsing -I typing -I bytecomp -I file_formats -I lambda -I middle_end -I middle_end/closure -I middle_end/flambda -I middle_end/flambda/base_types -I asmcomp -I driver -I toplevel -c typing/outcometree.mli

compiler_signature(
    name = "Outcometree_cmi",
    src  = "outcometree.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        ":Type_immediacy_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__subpackages__"
    ]
)

compiler_module(
    name   = "Parmatch",
    struct = "parmatch.ml",
    sig    = "Parmatch_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Ast_helper",
        "//parsing:Location",
        "//parsing:Longident",
        "//config:Config",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Path",
        ":Patterns",
        ":Predef",
        ":Printpat",
        ":Subst",
        ":Tast_iterator",
        ":Typedtree",
        ":Types",
        ":Untypeast",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Seq",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ],
    visibility = ["//lambda:__pkg__"]
)

compiler_signature(
    name = "Parmatch_cmi",
    src  = "parmatch.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl_cmi",
    ],
)

compiler_module(
    name   = "Path",
    struct = "path.ml",
    sig    = "Path_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ident",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
        "//middle_end/closure:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Path_cmi",
    src  = "path.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ident_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_module(
    name   = "Patterns",
    struct = "patterns.ml",
    sig    = "Patterns_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Lazy_backtrack",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Subst",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Patterns_cmi",
    src  = "patterns.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Persistent_env",
    struct = "persistent_env.ml",
    sig    = "Persistent_env_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//file_formats:Cmi_format",
        "//parsing:Location",
        "//utils:Clflags",
        "//config:Config",
        "//utils:Consistbl",
        "//utils:Lazy_backtrack",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__pkg__"
    ]
)

compiler_signature(
    name = "Persistent_env_cmi",
    src  = "persistent_env.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmi_format_cmi",
        "//parsing:Location_cmi",
        "//utils:Consistbl_cmi",
        "//utils:Lazy_backtrack_cmi",
        "//utils:Misc_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Predef",
    struct = "predef.ml",
    sig    = "Predef_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Ast_helper",
        "//parsing:Location",
        ":Btype",
        ":Ident",
        ":Path",
        ":Type_immediacy",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//lambda:__pkg__",
        "//middle_end/flambda:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Predef_cmi",
    src  = "predef.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ident_cmi",
        ":Path_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Primitive",
    struct = "primitive.ml",
    sig    = "Primitive_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Attr_helper",
        "//parsing:Location",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
    ]
)

compiler_signature(
    name = "Primitive_cmi",
    src  = "primitive.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Parsetree_cmi",
        ":Outcometree_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__pkg__"
    ]
)

compiler_module(
    name   = "Printpat",
    struct = "printpat.ml",
    sig    = "Printpat_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ident",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Printpat_cmi",
    src  = "printpat.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Printtyp",
    struct = "printtyp.ml",
    sig    = "Printtyp_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Oprint",
        ":Path",
        ":Predef",
        ":Primitive",
        ":Signature_group",
        ":Subst",
        ":Type_immediacy",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//lambda:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Printtyp_cmi",
    src  = "printtyp.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Errortrace_cmi",
        ":Ident_cmi",
        ":Outcometree_cmi",
        ":Path_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Printtyped",
    struct = "printtyped.ml",
    sig    = "Printtyped_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Pprintast",
        "//parsing:Printast",
        "//utils:Clflags",
        ":Ident",
        ":Path",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//driver:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Printtyped_cmi",
    src  = "printtyped.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Rec_check",
    struct = "rec_check.ml",
    sig    = "Rec_check_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ident",
        ":Path",
        ":Primitive",
        ":Typedtree",
        ":Typeopt",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
    ],
)

compiler_signature(
    name = "Rec_check_cmi",
    src  = "rec_check.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
    ]
)

compiler_module(
    name   = "Shape",
    struct = "shape.ml",
    sig    = "Shape_cmi",
    opts = MODULE_OPTS,
	warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//utils:Identifiable",
        "//utils:Misc",
        ":Ident",
        ":Path",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
    ]
)

compiler_signature(
    name = "Shape_cmi",
    src  = "shape.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ident_cmi",
        ":Path_cmi"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Map_cmi",
    ],
)

compiler_module(
    name   = "Signature_group",
    struct = "signature_group.ml",
    sig    = "Signature_group_cmi",
    opts = MODULE_OPTS,
	warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        ":Btype",
        ":Ident",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Seq",
    ],
)

compiler_signature(
    name = "Signature_group_cmi",
    src  = "signature_group.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Seq_cmi",
    ],
)

compiler_module(
    name   = "Stypes",
    struct = "stypes.ml",
    sig    = "Stypes_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//utils:Clflags",
        "//utils:Misc",
        ":Printtyp",
        ":Typedtree",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
    visibility = ["//tools:__pkg__"]
)

compiler_signature(
    name = "Stypes_cmi",
    src  = "stypes.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Annot_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
    ]
)

compiler_module(
    name   = "Subst",
    struct = "subst.ml",
    sig    = "Subst_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//parsing:Ast_mapper",
        "//parsing:Location",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Local_store",
        "//utils:Misc",
        ":Btype",
        ":Ident",
        ":Path",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//otherlibs/dynlink:__pkg__",
    ]
)

compiler_signature(
    name = "Subst_cmi",
    src  = "subst.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        "//parsing:Parsetree_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Tast_iterator",
    struct = "tast_iterator.ml",
    sig    = "Tast_iterator_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Lazy_backtrack",
        ":Env",
        ":Subst",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
)

compiler_signature(
    name = "Tast_iterator_cmi",
    src  = "tast_iterator.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
    ]
)

compiler_module(
    name   = "Tast_mapper",
    struct = "tast_mapper.ml",
    sig    = "Tast_mapper_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Lazy_backtrack",
        ":Env",
        ":Subst",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
    visibility = ["//file_formats:__pkg__"]
)

compiler_signature(
    name = "Tast_mapper_cmi",
    src  = "tast_mapper.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
    ]
)

compiler_module(
    name   = "Type_immediacy",
    struct = "type_immediacy.ml",
    sig    = "Type_immediacy_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Builtin_attributes",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
    ]
)

compiler_signature(
    name = "Type_immediacy_cmi",
    src  = "type_immediacy.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Parsetree_cmi"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib_cmi",
    ],
)

compiler_module(
    name   = "Typeclass",
    struct = "typeclass.ml",
    sig    = "Typeclass_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//file_formats:Cmt_format",
        "//parsing:Ast_helper",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Includeclass",
        ":Oprint",
        ":Path",
        ":Predef",
        ":Printtyp",
        ":Subst",
        ":Typecore",
        ":Typedecl",
        ":Typedecl_variance",
        ":Typedtree",
        ":Types",
        ":Typetexp",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
)

compiler_signature(
    name = "Typeclass_cmi",
    src  = "typeclass.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Ctype_cmi",
        ":Env_cmi",
        ":Errortrace_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Typecore",
    struct = "typecore.ml",
    sig    = "Typecore_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//file_formats:Cmt_format",
        "//parsing:Ast_helper",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Mtype",
        ":Parmatch",
        ":Path",
        ":Persistent_env",
        ":Predef",
        ":Primitive",
        ":Printpat",
        ":Printtyp",
        ":Rec_check",
        ":Subst",
        ":Typedecl",
        ":Typedtree",
        ":Types",
        ":Typetexp",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//driver:__pkg__",
        "//lambda:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Typecore_cmi",
    src  = "typecore.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Errortrace_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Typedecl",
    struct = "typedecl.ml",
    sig    = "Typedecl_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//config:Config",
        "//parsing:Ast_helper",
        "//parsing:Ast_iterator",
        "//parsing:Attr_helper",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Pprintast",
        "//utils:Clflags",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Includecore",
        ":Oprint",
        ":Path",
        ":Predef",
        ":Primitive",
        ":Printtyp",
        ":Subst",
        ":Type_immediacy",
        ":Typedecl_immediacy",
        ":Typedecl_separability",
        ":Typedecl_unboxed",
        ":Typedecl_variance",
        ":Typedtree",
        ":Types",
        ":Typetexp",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
)

compiler_signature(
    name = "Typedecl_cmi",
    src  = "typedecl.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Errortrace_cmi",
        ":Ident_cmi",
        ":Includecore_cmi",
        ":Path_cmi",
        ":Typedecl_immediacy_cmi",
        ":Typedecl_separability_cmi",
        ":Typedecl_variance_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Typedecl_immediacy",
    struct = "typedecl_immediacy.ml",
    sig    = "Typedecl_immediacy_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        ":Ctype",
        ":Type_immediacy",
        ":Typedecl_properties",
        ":Typedecl_unboxed",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Typedecl_immediacy_cmi",
    src  = "typedecl_immediacy.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Type_immediacy_cmi",
        ":Typedecl_properties_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Typedecl_properties",
    struct = "typedecl_properties.ml",
    sig    = "Typedecl_properties_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Builtin_attributes",
        "//utils:Lazy_backtrack",
        ":Env",
        ":Ident",
        ":Subst",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Typedecl_properties_cmi",
    src  = "typedecl_properties.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Env_cmi",
        ":Ident_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Typedecl_separability",
    struct = "typedecl_separability.ml",
    sig    = "Typedecl_separability_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//config:Config",
        "//parsing:Location",
        "//utils:Lazy_backtrack",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Subst",
        ":Typedecl_properties",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
    ],
)

compiler_signature(
    name = "Typedecl_separability_cmi",
    src  = "typedecl_separability.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Typedecl_properties_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Typedecl_unboxed",
    struct = "typedecl_unboxed.ml",
    sig    = "Typedecl_unboxed_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Lazy_backtrack",
        ":Ctype",
        ":Env",
        ":Subst",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib",
    ],
)

compiler_signature(
    name = "Typedecl_unboxed_cmi",
    src  = "typedecl_unboxed.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Env_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Typedecl_variance",
    struct = "typedecl_variance.ml",
    sig    = "Typedecl_variance_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//utils:Lazy_backtrack",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Subst",
        ":Typedecl_properties",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Typedecl_variance_cmi",
    src  = "typedecl_variance.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Typedecl_properties_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Typedtree",
    struct = "typedtree.ml",
    sig    = "Typedtree_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Lazy_backtrack",
        ":Env",
        ":Ident",
        ":Path",
        ":Primitive",
        ":Subst",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
    visibility = [
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Typedtree_cmi",
    src  = "typedtree.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Primitive_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
    visibility = [
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_module(
    name   = "Typemod",
    struct = "typemod.ml",
    sig    = "Typemod_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE_40],
    deps   = [
        "//config:Config",
        "//file_formats:Cmi_format",
        "//file_formats:Cmt_format",
        "//parsing:Attr_helper",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parse",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Cmt2annot",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Includemod",
        ":Includemod_errorprinter",
        ":Mtype",
        ":Path",
        ":Printtyp",
        ":Signature_group",
        ":Subst",
        ":Typeclass",
        ":Typecore",
        ":Typedecl",
        ":Typedtree",
        ":Types",
        ":Typetexp",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Typemod_cmi",
    src  = "typemod.mli",
    opts = SIG_OPTS,
    deps   = [
        "//file_formats:Cmi_format_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Ident_cmi",
        ":Includemod_cmi",
        ":Path_cmi",
        ":Typedecl_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Typeopt",
    struct = "typeopt.ml",
    sig    = "Typeopt_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//lambda:Lambda",
        "//parsing:Longident",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Path",
        ":Predef",
        ":Subst",
        ":Type_immediacy",
        ":Typedecl_unboxed",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = ["//lambda:__pkg__"]
)

compiler_signature(
    name = "Typeopt_cmi",
    src  = "typeopt.mli",
    opts = SIG_OPTS,
    deps   = [
        "//lambda:Lambda_cmi",
        "//parsing:Asttypes_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ]
)

compiler_module(
    name   = "Types",
    struct = "types.ml",
    sig    = "Types_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Identifiable",
        "//utils:Local_store",
        "//utils:Misc",
        ":Ident",
        ":Path",
        ":Primitive",
        ":Shape",
        ":Type_immediacy",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__subpackages__"
    ]
)

compiler_signature(
    name = "Types_cmi",
    src  = "types.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Parsetree_cmi",
        ":Ident_cmi",
        ":Path_cmi",
        ":Primitive_cmi",
        ":Shape_cmi",
        ":Type_immediacy_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_module(
    name   = "Typetexp",
    struct = "typetexp.ml",
    sig    = "Typetexp_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Ast_helper",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Pprintast",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Oprint",
        ":Path",
        ":Predef",
        ":Printtyp",
        ":Subst",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
    visibility = ["//toplevel:__pkg__"]
)

compiler_signature(
    name = "Typetexp_cmi",
    src  = "typetexp.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Env_cmi",
        ":Errortrace_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
        ":Types_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Untypeast",
    struct = "untypeast.ml",
    sig    = "Untypeast_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Ast_helper",
        "//parsing:Location",
        "//parsing:Longident",
        "//utils:Lazy_backtrack",
        ":Env",
        ":Ident",
        ":Path",
        ":Subst",
        ":Typedtree",
        ":Types",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
    ],
    visibility = ["//tools:__pkg__"]
)

compiler_signature(
    name = "Untypeast_cmi",
    src  = "untypeast.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        ":Path_cmi",
        ":Typedtree_cmi",
    ]
)

