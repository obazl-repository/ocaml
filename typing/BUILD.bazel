load("//bzl:rules.bzl",
     "bootstrap_module",
     "bootstrap_library",
     "bootstrap_signature")

load("//config:BUILD.bzl",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS"
     )

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS    = ROOT_MODULE_OPTS

STDLIB = ["//stdlib"]

bootstrap_library(
    name = "typing",
    manifest  = [
        ":Btype",
        ":Cmt2annot",
        ":Ctype",
        ":Datarepr",
        ":Env",
        ":Envaux",
        ":Errortrace",
        ":Ident",
        ":Includeclass",
        ":Includecore",
        ":Includemod",
        ":Includemod_errorprinter",
        ":Mtype",
        ":Oprint",
        ":Parmatch",
        ":Path",
        ":Patterns",
        ":Persistent_env",
        ":Predef",
        ":Primitive",
        ":Printpat",
        ":Printtyp",
        ":Printtyped",
        ":Rec_check",
        ":Shape",
        ":Signature_group",
        ":Stypes",
        ":Subst",
        ":Tast_iterator",
        ":Tast_mapper",
        ":Type_immediacy",
        ":Typeclass",
        ":Typecore",
        ":Typedecl",
        ":Typedecl_immediacy",
        ":Typedecl_properties",
        ":Typedecl_separability",
        ":Typedecl_unboxed",
        ":Typedecl_variance",
        ":Typedtree",
        ":Typemod",
        ":Typeopt",
        ":Types",
        ":Typetexp",
        ":Untypeast",

        # ":Annot_cmi",
        # ":Outcometree_cmi"
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

bootstrap_library(
    name = "ocamlcommon",
    manifest  = [
        ":Btype",
        ":Cmt2annot",
        ":Ctype",
        ":Datarepr",
        ":Env",
        ":Envaux",
        ":Errortrace",
        ":Ident",
        ":Includeclass",
        ":Includecore",
        ":Includemod",
        ":Includemod_errorprinter",
        ":Mtype",
        ":Oprint",
        ":Parmatch",
        ":Path",
        ":Patterns",
        ":Persistent_env",
        ":Predef",
        ":Primitive",
        ":Printpat",
        ":Printtyp",
        ":Printtyped",
        ":Rec_check",
        ":Shape",
        ":Signature_group",
        ":Stypes",
        ":Subst",
        ":Tast_iterator",
        ":Tast_mapper",
        ":Type_immediacy",
        ":Typeclass",
        ":Typecore",
        ":Typedecl",
        ":Typedecl_immediacy",
        ":Typedecl_properties",
        ":Typedecl_separability",
        ":Typedecl_unboxed",
        ":Typedecl_variance",
        ":Typedtree",
        ":Typemod",
        ":Typeopt",
        ":Types",
        ":Typetexp",
        ":Untypeast",

        # ":Annot_cmi",
        # ":Outcometree_cmi",

        "//file_formats:Cmi_format",
        "//file_formats:Cmt_format"
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
bootstrap_signature(
    name = "Annot_cmi",
    src  = "annot.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Location"
    ]
)

bootstrap_module(
    name   = "Btype",
    struct = "btype.ml",
    sig    = "Btype_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        "//utils:Local_store",
        ":Ident",
        ":Path",
        ":Types",
        #### (MethSet)
        #### (Meths)
        #### (TransientTypeOps)
        #### (Transient_expr)
        #### (VarSet)
        #### (Vars)
    ]
)

bootstrap_signature(
    name = "Btype_cmi",
    src  = "btype.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Path",
    ]
)

bootstrap_module(
    name   = "Cmt2annot",
    struct = "cmt2annot.ml",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Tast_iterator",
        ":Stypes",
        ":Path",
        ":Oprint",
        ":Ident",
        ":Envaux",
        ":Env",
        ":Annot_cmi",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Option",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//file_formats:Cmt_format",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ]
)

bootstrap_module(
    name   = "Ctype",
    struct = "ctype.ml",
    sig    = "Ctype_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//utils:Clflags",
        "//utils:Local_store",
        "//utils:Misc",
        ":Btype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Path",
        ":Predef",
        ":Subst",
        ":Type_immediacy",
        ":Types",

        #### (Meths)
        #### (For_copy)
        #### (Vars)
        #### (Variance)
        #### (Uid)
        #### (TypeSet)
        #### (TypePairs)
        #### (TypeMap)
        #### (TypeHash)
        #### (Transient_expr)
        #### (Subtype)
    ]
)

bootstrap_signature(
    name = "Ctype_cmi",
    src  = "ctype.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        ":Btype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Path",
        ":Type_immediacy",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Datarepr",
    struct = "datarepr.ml",
    sig    = "Datarepr_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        ":Btype",
        ":Ident",
        ":Path",
        ":Types",
        #### (TypeSet)
        #### (Uid)
        #### (Variance)
    ]
)

bootstrap_signature(
    name = "Datarepr_cmi",
    src  = "datarepr.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Path",
        ":Ident",
    ]
)

bootstrap_module(
    name   = "Env",
    struct = "env.ml",
    sig    = "Env_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmi_format",
        "//parsing:Asttypes_cmi",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Seq",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Load_path",
        "//utils:Local_store",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Datarepr",
        ":Ident",
        ":Path",
        ":Persistent_env",
        ":Predef",
        ":Shape",
        ":Subst",
        ":Types",
        #### (Uid)
    ],
    visibility = ["//lambda:__pkg__"]
)

bootstrap_signature(
    name = "Env_cmi",
    src  = "env.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmi_format_cmi",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.String",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
        ":Ident",
        ":Path",
        ":Subst",
        ":Types",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//lambda:__pkg__",
    ]
)

bootstrap_module(
    name   = "Envaux",
    struct = "envaux.ml",
    sig    = "Envaux_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//utils:Lazy_backtrack",
        ":Env",
        ":Ident",
        ":Path",
        ":Printtyp",
        ":Subst",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Envaux_cmi",
    src  = "envaux.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
        ":Env",
        ":Path",
        ":Subst",
    ]
)

bootstrap_module(
    name   = "Errortrace",
    struct = "errortrace.ml",
    sig    = "Errortrace_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        ":Path",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Errortrace_cmi",
    src  = "errortrace.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Format",
        ":Path",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Ident",
    struct = "ident.ml",
    sig    = "Ident_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.String",
        "//utils:Clflags",
        "//utils:Identifiable",
        "//utils:Local_store",
        "//utils:Misc",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
    ]
)

bootstrap_signature(
    name = "Ident_cmi",
    src  = "ident.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
        "//utils:Identifiable",
    ],
    visibility = [
        "//middle_end:__pkg__",
        "//lambda:__pkg__"
    ]
)

bootstrap_module(
    name   = "Includeclass",
    struct = "includeclass.ml",
    sig    = "Includeclass_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Builtin_attributes",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        ":Ctype",
        ":Path",
        ":Printtyp",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Includeclass_cmi",
    src  = "includeclass.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Location",
        "//stdlib:Stdlib.Format",
        ":Ctype",
        ":Env",
        ":Printtyp",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Includecore",
    struct = "includecore.ml",
    sig    = "Includecore_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Builtin_attributes",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.StringLabels",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Path",
        ":Primitive",
        ":Printtyp",
        ":Subst",
        ":Type_immediacy",
        ":Typedtree",
        ":Types",
        #### (Variance)
    ]
)

bootstrap_signature(
    name = "Includecore_cmi",
    src  = "includecore.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        "//utils:Diffing_with_keys_cmi",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Path",
        ":Type_immediacy",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Includemod",
    struct = "includemod.ml",
    sig    = "Includemod_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmt_format",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
        "//utils:Diffing",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Includeclass",
        ":Includecore",
        ":Mtype",
        ":Path",
        ":Predef",
        ":Primitive",
        ":Printtyp",
        ":Subst",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Includemod_cmi",
    src  = "includemod.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Map",
        "//utils:Diffing",
        "//utils:Diffing_with_keys",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Includecore",
        ":Path",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Includemod_errorprinter",
    struct = "includemod_errorprinter.ml",
    sig    = "Includemod_errorprinter_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Location",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Marshal",
        "//utils:Clflags",
        "//utils:Diffing",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        ":Env",
        ":Ident",
        ":Includeclass",
        ":Includecore",
        ":Includemod",
        ":Oprint",
        ":Path",
        ":Printtyp",
        ":Subst",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Includemod_errorprinter_cmi",
    src  = "includemod_errorprinter.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        ":Env",
        ":Ident",
        ":Includemod",
        ":Path",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Mtype",
    struct = "mtype.ml",
    sig    = "Mtype_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Path",
        ":Subst",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Mtype_cmi",
    src  = "mtype.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Env",
        ":Ident",
        ":Path",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Oprint",
    struct = "oprint.ml",
    sig    = "Oprint_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Pprintast",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
        ":Outcometree_cmi",
    ]
)

bootstrap_signature(
    name = "Oprint_cmi",
    src  = "oprint.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Format",
        ":Outcometree_cmi",
    ]
)

# ./boot/ocamlrun ./boot/ocamlc -g -nostdlib -I boot -use-prims runtime/primitives -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48-66-70 -warn-error +a -bin-annot -safe-string -strict-formats -I utils -I parsing -I typing -I bytecomp -I file_formats -I lambda -I middle_end -I middle_end/closure -I middle_end/flambda -I middle_end/flambda/base_types -I asmcomp -I driver -I toplevel -c typing/outcometree.mli

bootstrap_signature(
    name = "Outcometree_cmi",
    src  = "outcometree.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Format",
        ":Type_immediacy",
    ]
)

bootstrap_module(
    name   = "Parmatch",
    struct = "parmatch.ml",
    sig    = "Parmatch_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Ast_helper",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Seq",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        "//utils:Config",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Path",
        ":Patterns",
        ":Predef",
        ":Printpat",
        ":Subst",
        ":Tast_iterator",
        ":Typedtree",
        ":Types",
        ":Untypeast",
    ],
    visibility = ["//lambda:__pkg__"]
)

bootstrap_signature(
    name = "Parmatch_cmi",
    src  = "parmatch.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Hashtbl",
        ":Env",
        ":Path",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Path",
    struct = "path.ml",
    sig    = "Path_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        ":Ident",
    ],
    visibility = ["//middle_end:__pkg__"]
)

bootstrap_signature(
    name = "Path_cmi",
    src  = "path.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
        ":Ident",
    ],
    visibility = ["//middle_end:__pkg__"]
)

bootstrap_module(
    name   = "Patterns",
    struct = "patterns.ml",
    sig    = "Patterns_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//stdlib:Stdlib.List",
        "//utils:Lazy_backtrack",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Subst",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Patterns_cmi",
    src  = "patterns.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        ":Ident",
        ":Path",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Persistent_env",
    struct = "persistent_env.ml",
    sig    = "Persistent_env_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmi_format",
        "//parsing:Location",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Consistbl",
        "//utils:Lazy_backtrack",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
    ]
)

bootstrap_signature(
    name = "Persistent_env_cmi",
    src  = "persistent_env.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmi_format_cmi",
        "//parsing:Location",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//utils:Consistbl",
        "//utils:Lazy_backtrack_cmi",
        "//utils:Misc",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Predef",
    struct = "predef.ml",
    sig    = "Predef_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Ast_helper",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.List",
        ":Btype",
        ":Ident",
        ":Path",
        ":Shape",
        ":Type_immediacy",
        ":Types",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//lambda:__pkg__",
        "//middle_end/flambda:__pkg__",
    ]
)

bootstrap_signature(
    name = "Predef_cmi",
    src  = "predef.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Ident",
        ":Path",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Primitive",
    struct = "primitive.ml",
    sig    = "Primitive_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Attr_helper",
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
        "//utils:Misc",
        ":Outcometree_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
    ]
)

bootstrap_signature(
    name = "Primitive_cmi",
    src  = "primitive.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        ":Outcometree_cmi",
    ]
)

bootstrap_module(
    name   = "Printpat",
    struct = "printpat.ml",
    sig    = "Printpat_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        ":Ident",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_signature(
    name = "Printpat_cmi",
    src  = "printpat.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        ":Path",
        ":Typedtree",
    ]
)

bootstrap_module(
    name   = "Printtyp",
    struct = "printtyp.ml",
    sig    = "Printtyp_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Oprint",
        ":Outcometree_cmi",
        ":Path",
        ":Predef",
        ":Primitive",
        ":Signature_group",
        ":Subst",
        ":Type_immediacy",
        ":Types",
        #### (Meths)
        #### (TransientTypeMap)
        #### (Transient_expr)
        #### (TypeMap)
        #### (Uid)
        #### (Variance)
        #### (Vars)
    ],
    visibility = ["//lambda:__pkg__"]
)

bootstrap_signature(
    name = "Printtyp_cmi",
    src  = "printtyp.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Path",
        ":Outcometree_cmi",
        ":Ident",
        ":Errortrace",
        ":Env",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Format",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Printtyped",
    struct = "printtyped.ml",
    sig    = "Printtyped_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Path",
        ":Ident",
        "//stdlib:Stdlib.String",
        "//parsing:Printast",
        "//parsing:Pprintast",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Format",
        "//utils:Clflags",
        "//stdlib:Stdlib.Char",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ],
    visibility = ["//driver:__pkg__"]
)

bootstrap_signature(
    name = "Printtyped_cmi",
    src  = "printtyped.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Typedtree",
        ":Path",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Rec_check",
    struct = "rec_check.ml",
    sig    = "Rec_check_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typeopt",
        ":Typedtree",
        ":Primitive",
        ":Path",
        ":Ident",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ]
)

bootstrap_signature(
    name = "Rec_check_cmi",
    src  = "rec_check.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Typedtree",
        ":Path",
        ":Ident",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
    ]
)

bootstrap_module(
    name   = "Shape",
    struct = "shape.ml",
    sig    = "Shape_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Ident",
        "//typing:Path",
        "//utils:Identifiable"
    ]
)

bootstrap_signature(
    name = "Shape_cmi",
    src  = "shape.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Ident_cmi",
        ":Path_cmi"
    ]
)

bootstrap_module(
    name   = "Signature_group",
    struct = "signature_group.ml",
    sig    = "Signature_group_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Ident",
        ":Btype",
        "//stdlib:Stdlib.Seq",
        "//stdlib:Stdlib.List",
    ]
)

bootstrap_signature(
    name = "Signature_group_cmi",
    src  = "signature_group.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        "//stdlib:Stdlib.Seq",
    ]
)

bootstrap_module(
    name   = "Stypes",
    struct = "stypes.ml",
    sig    = "Stypes_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Typedtree",
        ":Printtyp",
        ":Annot_cmi",
        "//stdlib:Stdlib.String",
        "//utils:Misc",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Format",
        "//utils:Clflags",
    ],
)

bootstrap_signature(
    name = "Stypes_cmi",
    src  = "stypes.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Typedtree",
        ":Path",
        ":Annot_cmi",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
    ]
)

bootstrap_module(
    name   = "Subst",
    struct = "subst.ml",
    sig    = "Subst_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Ast_mapper",
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Local_store",
        "//utils:Misc",
        ":Btype",
        ":Ident",
        ":Path",
        ":Types",
        #### (For_copy)
        #### (Meths)
        #### (Transient_expr)
        #### (Uid)
        #### (Vars)
    ]
)

bootstrap_signature(
    name = "Subst_cmi",
    src  = "subst.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Path",
        ":Ident",
        "//parsing:Parsetree_cmi",
        "//parsing:Location",
    ]
)

bootstrap_module(
    name   = "Tast_iterator",
    struct = "tast_iterator.ml",
    sig    = "Tast_iterator_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Subst",
        ":Env",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.List",
        "//utils:Lazy_backtrack",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ]
)

bootstrap_signature(
    name = "Tast_iterator_cmi",
    src  = "tast_iterator.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Typedtree",
        ":Path",
        ":Env",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Tast_mapper",
    struct = "tast_mapper.ml",
    sig    = "Tast_mapper_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Subst",
        ":Env",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.List",
        "//utils:Lazy_backtrack",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ],
    visibility = ["//file_formats:__pkg__"]
)

bootstrap_signature(
    name = "Tast_mapper_cmi",
    src  = "tast_mapper.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Typedtree",
        ":Path",
        ":Env",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Type_immediacy",
    struct = "type_immediacy.ml",
    sig    = "Type_immediacy_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Builtin_attributes"
    ]
)

bootstrap_signature(
    name = "Type_immediacy_cmi",
    src  = "type_immediacy.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Parsetree_cmi"
    ]
)

bootstrap_module(
    name   = "Typeclass",
    struct = "typeclass.ml",
    sig    = "Typeclass_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmt_format",
        "//parsing:Ast_helper",
        "//parsing:Asttypes_cmi",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Includeclass",
        ":Oprint",
        ":Path",
        ":Predef",
        ":Printtyp",
        ":Subst",
        ":Typecore",
        ":Typedecl",
        ":Typedecl_variance",
        ":Typedtree",
        ":Types",
        ":Typetexp",
        #### (Cl)
        #### (Csig)
        #### (Cty)
        #### (Exp)
        #### (Pat)
        #### (Typ)
        #### (VarSet)
        #### (Vars)
        #### (Vb)
        ###### (MethSet)
        ###### (Meths)
        ###### (Uid)
        ###### (Variance)
    ]
)

bootstrap_signature(
    name = "Typeclass_cmi",
    src  = "typeclass.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Path",
        ":Ident",
        ":Errortrace",
        ":Env",
        ":Ctype",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Format",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Typecore",
    struct = "typecore.ml",
    sig    = "Typecore_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmt_format",
        "//parsing:Ast_helper",
        "//parsing:Asttypes_cmi",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
        "//utils:Clflags",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Mtype",
        ":Parmatch",
        ":Path",
        ":Persistent_env",
        ":Predef",
        ":Primitive",
        ":Printpat",
        ":Printtyp",
        ":Rec_check",
        ":Subst",
        ":Typedecl",
        ":Typedtree",
        ":Types",
        ":Typetexp",
        ## (Attr)
        ## (CamlinternalFormat)
        ## (CamlinternalFormatBasics)
        ## (Exp)
        #### (Meths)
        #### (Mod)
        #### (Pat)
        #### (TypePairs)
        #### (TypeSet)
        #### (Vars)
        ###### (Uid)
    ],
    visibility = ["//lambda:__pkg__"]
)

bootstrap_signature(
    name = "Typecore_cmi",
    src  = "typecore.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Path",
        ":Ident",
        ":Errortrace",
        ":Env",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Typedecl",
    struct = "typedecl.ml",
    sig    = "Typedecl_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [

        "//parsing:Ast_helper",
        "//parsing:Ast_iterator",
        "//parsing:Asttypes_cmi",
        "//parsing:Attr_helper",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//parsing:Pprintast",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Diffing_with_keys",
        "//utils:Lazy_backtrack",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Includecore",
        ":Oprint",
        ":Path",
        ":Predef",
        ":Primitive",
        ":Printtyp",
        ":Subst",
        ":Type_immediacy",
        ":Typedecl_immediacy",
        ":Typedecl_separability",
        ":Typedecl_unboxed",
        ":Typedecl_variance",
        ":Typedtree",
        ":Types",
        ":Typetexp",
        #### (Uid)
        #### (Variance)
    ]
)

bootstrap_signature(
    name = "Typedecl_cmi",
    src  = "typedecl.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        "//utils:Diffing_with_keys",
        ":Env",
        ":Errortrace",
        ":Ident",
        ":Includecore",
        ":Path",
        ":Typedecl_immediacy",
        ":Typedecl_separability",
        ":Typedecl_variance",
        ":Typedtree",
        ":Types",
    ]
)

bootstrap_module(
    name   = "Typedecl_immediacy",
    struct = "typedecl_immediacy.ml",
    sig    = "Typedecl_immediacy_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedecl_unboxed",
        ":Typedecl_properties",
        ":Type_immediacy",
        ":Ctype",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
    ]
)

bootstrap_signature(
    name = "Typedecl_immediacy_cmi",
    src  = "typedecl_immediacy.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedecl_properties",
        ":Type_immediacy",
        ":Ident",
        ":Env",
        "//parsing:Location",
    ]
)

bootstrap_module(
    name   = "Typedecl_properties",
    struct = "typedecl_properties.ml",
    sig    = "Typedecl_properties_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Subst",
        ":Ident",
        ":Env",
        "//stdlib:Stdlib.List",
        "//utils:Lazy_backtrack",
        "//parsing:Builtin_attributes",
    ]
)

bootstrap_signature(
    name = "Typedecl_properties_cmi",
    src  = "typedecl_properties.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Ident",
        ":Env",
    ]
)

bootstrap_module(
    name   = "Typedecl_separability",
    struct = "typedecl_separability.ml",
    sig    = "Typedecl_separability_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedecl_properties",
        ":Subst",
        ":Env",
        ":Ctype",
        ":Btype",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//utils:Lazy_backtrack",
        "//utils:Config",
    ]
)

bootstrap_signature(
    name = "Typedecl_separability_cmi",
    src  = "typedecl_separability.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedecl_properties",
        ":Ident",
        ":Env",
        "//parsing:Location",
    ]
)

bootstrap_module(
    name   = "Typedecl_unboxed",
    struct = "typedecl_unboxed.ml",
    sig    = "Typedecl_unboxed_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Subst",
        ":Env",
        ":Ctype",
        "//utils:Lazy_backtrack",
    ]
)

bootstrap_signature(
    name = "Typedecl_unboxed_cmi",
    src  = "typedecl_unboxed.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Env",
    ]
)

bootstrap_module(
    name   = "Typedecl_variance",
    struct = "typedecl_variance.ml",
    sig    = "Typedecl_variance_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
        "//utils:Lazy_backtrack",
        ":Btype",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Subst",
        ":Typedecl_properties",
        ":Typedtree",
        ":Types",
        #### (Variance)
    ]
)

bootstrap_signature(
    name = "Typedecl_variance_cmi",
    src  = "typedecl_variance.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Typedecl_properties",
        ":Path",
        ":Ident",
        ":Env",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Typedtree",
    struct = "typedtree.ml",
    sig    = "Typedtree_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//utils:Lazy_backtrack",
        ":Env",
        ":Ident",
        ":Path",
        ":Primitive",
        ":Subst",
        ":Types",
        #### (MethSet)
        #### (Meths)
    ],
    visibility = [
        "//driver:__pkg__",
        "//lambda:__pkg__"
    ]
)

bootstrap_signature(
    name = "Typedtree_cmi",
    src  = "typedtree.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Primitive",
        ":Path",
        ":Ident",
        ":Env",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//parsing:Asttypes_cmi",
    ],
    visibility = [
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__"
    ]
)

bootstrap_module(
    name   = "Typemod",
    struct = "typemod.ml",
    sig    = "Typemod_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//file_formats:Cmi_format",
        "//file_formats:Cmt_format",
        "//parsing:Asttypes_cmi",
        "//parsing:Attr_helper",
        "//parsing:Builtin_attributes",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parse",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Lazy_backtrack",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
        ":Btype",
        ":Cmt2annot",
        ":Ctype",
        ":Env",
        ":Ident",
        ":Includemod",
        ":Includemod_errorprinter",
        ":Mtype",
        ":Path",
        ":Printtyp",
        ":Signature_group",
        ":Subst",
        ":Typeclass",
        ":Typecore",
        ":Typedecl",
        ":Typedtree",
        ":Types",
        ":Typetexp",
        #### (Uid)
        #### (Variance)
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__"
    ]
)

bootstrap_signature(
    name = "Typemod_cmi",
    src  = "typemod.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Typedecl",
        ":Path",
        ":Includemod",
        ":Ident",
        ":Env",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//file_formats:Cmi_format",
    ]
)

bootstrap_module(
    name   = "Typeopt",
    struct = "typeopt.ml",
    sig    = "Typeopt_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Typedecl_unboxed",
        ":Type_immediacy",
        ":Subst",
        ":Predef",
        ":Path",
        ":Ident",
        ":Env",
        ":Ctype",
        "//lambda:Lambda",
        "//stdlib:Stdlib.Sys",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//stdlib:Stdlib.List",
        "//utils:Lazy_backtrack",
        "//utils:Config",
        "//utils:Clflags",
        "//parsing:Asttypes_cmi",
    ],
    visibility = ["//lambda:__pkg__"]
)

bootstrap_signature(
    name = "Typeopt_cmi",
    src  = "typeopt.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Path",
        ":Env",
        "//lambda:Lambda_cmi",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
    ]
)

bootstrap_module(
    name   = "Types",
    struct = "types.ml",
    sig    = "Types_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Type_immediacy",
        ":Primitive",
        ":Path",
        ":Ident",
        ":Shape",
        "//parsing:Parsetree_cmi",
        "//utils:Misc",
        "//parsing:Longident",
        "//parsing:Location",
        "//utils:Local_store",
        "//stdlib:Stdlib.List",
        "//utils:Identifiable",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//utils:Config",
        "//parsing:Asttypes_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
    ]
)

bootstrap_signature(
    name = "Types_cmi",
    src  = "types.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Ident",
        ":Path",
        ":Primitive",
        ":Shape_cmi",
        ":Type_immediacy",
    ],
    visibility = ["//lambda:__pkg__"]
)

bootstrap_module(
    name   = "Typetexp",
    struct = "typetexp.ml",
    sig    = "Typetexp_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Subst",
        ":Printtyp",
        ":Predef",
        ":Path",
        ":Oprint",
        ":Errortrace",
        ":Env",
        ":Ctype",
        ":Btype",
        "//stdlib:Stdlib.String",
        "//parsing:Pprintast",
        "//parsing:Parsetree_cmi",
        "//utils:Misc",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//utils:Lazy_backtrack",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//utils:Clflags",
        "//parsing:Builtin_attributes",
        "//parsing:Asttypes_cmi",
        "//parsing:Ast_helper",
    ]
)

bootstrap_signature(
    name = "Typetexp_cmi",
    src  = "typetexp.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Types",
        ":Typedtree",
        ":Path",
        ":Errortrace",
        ":Env",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Format",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Untypeast",
    struct = "untypeast.ml",
    sig    = "Untypeast_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Ast_helper",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
        "//utils:Lazy_backtrack",
        ":Env",
        ":Ident",
        ":Path",
        ":Subst",
        ":Typedtree",
        ":Types",
        #### (Cf)
        #### (Ci)
        #### (Cl)
        #### (Ctf)
        #### (Cty)
        #### (Exp)
        #### (Incl)
        #### (Mb)
        #### (Md)
        #### (Mod)
        #### (Ms)
        #### (Mtd)
        #### (Mty)
        #### (Of)
        #### (Opn)
        #### (Pat)
        #### (Rf)
        #### (Sig)
        #### (Str)
        #### (Te)
        #### (Typ)
        #### (Type)
        #### (Val)
        #### (Vb)
    ]
)

bootstrap_signature(
    name = "Untypeast_cmi",
    src  = "untypeast.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Typedtree",
        ":Path",
        "//parsing:Parsetree_cmi",
        "//parsing:Longident",
        "//parsing:Location",
        "//parsing:Asttypes_cmi",
    ]
)

