load("@obazl_rules_ocaml//ocaml:rules.bzl",
     "ocaml_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:BUILD.bzl", "COMPFLAGS")
load(":BUILD.bzl", "CONFIG_MAP", "write_config")

## root Makefile
# CAMLC=$(BOOT_OCAMLC) -g -nostdlib -I boot -use-prims runtime/primitives

MODULE_OPTS = COMPFLAGS + ["-I", "boot"]
               # "-use-prims", "runtime/primitives"]

SIG_OPTS = MODULE_OPTS


# COMMON_CMI = $(UTILS_CMI) $(PARSING_CMI) $(TYPING_CMI) $(LAMBDA_CMI) $(COMP_CMI)
# COMMON = $(UTILS) $(PARSING) $(TYPING) $(LAMBDA) $(COMP)
# compilerlibs/ocamlcommon.cma: $(COMMON_CMI) $(COMMON)
# 	$(CAMLC) -a -linkall -o $@ $(COMMON)

# ocaml_library(
#     name = "utils",
#     modules  = [
# ## compilerlibs/Makefile.compilerlibs
# # UTILS = \
# #   utils/config.cmo \
# ##   utils/build_path_prefix_map.cmo \
# #   utils/misc.cmo \
# #   utils/identifiable.cmo \
# #   utils/numbers.cmo \
# ##   utils/arg_helper.cmo \ 
# #   utils/clflags.cmo \
# #   utils/profile.cmo \
# #   utils/local_store.cmo \
# #   utils/load_path.cmo \
# #   utils/terminfo.cmo \
# #   utils/ccomp.cmo \
# #   utils/warnings.cmo \
# #   utils/consistbl.cmo \
# #   utils/strongly_connected_components.cmo \
# #   utils/targetint.cmo \
# #   utils/int_replace_polymorphic_compare.cmo \
# #   utils/domainstate.cmo \
# ##   utils/binutils.cmo \
# #   utils/lazy_backtrack.cmo \
# #   utils/diffing.cmo \
# #   utils/diffing_with_keys.cmo
# # UTILS_CMI =


#         ":Arg_helper", #
#         ":Binutils",  #
#         ":Build_path_prefix_map", #
#         ":Ccomp",
#         ":Clflags",
#         ":Consistbl",
#         ":Diffing",
#         ":Diffing_with_keys",
#         ":Identifiable",
#         ":Int_replace_polymorphic_compare",
#         ":Lazy_backtrack",
#         ":Load_path",
#         ":Local_store",
#         ":Misc",
#         ":Numbers",
#         ":Profile",
#         ":Strongly_connected_components",
#         ":Targetint",
#         ":Terminfo",
#         ":Warnings",
#     ],
#     # signatures  = [
#     #     ":Config_cmi",
#     # ],
# )

# ./boot/ocamlrun ./boot/ocamlc -g -nostdlib -I boot -use-prims runtime/primitives -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48-66-70 -warn-error +a -bin-annot -safe-string -strict-formats -I utils -I parsing -I typing -I bytecomp -I file_formats -I lambda -I middle_end -I middle_end/closure -I middle_end/flambda -I middle_end/flambda/base_types -I asmcomp -I driver -I toplevel -c utils/arg_helper.mli

bootstrap_module(
    name   = "Arg_helper",
    struct = "arg_helper.ml",
    sig    = "Arg_helper_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ## (String)
        ## (Printf)
        ## (Printexc)
        ## (Map)
        ## (List)
    ]
)

bootstrap_signature(
    name = "Arg_helper_cmi",
    src  = "arg_helper.mli",
    opts = SIG_OPTS,
    deps   = [
        ## (Map)
    ]
)

bootstrap_module(
    name   = "Binutils",
    struct = "binutils.ml",
    sig    = "Binutils_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ## (Sys)
        ## (String)
        ## (Result)
        ## (Printf)
        ## (Option)
        ## (List)
        ## (Lazy)
        ## (LargeFile)
        ## (Int64)
        ## (Int32)
        ## (Int)
        ## (Fun)
        ## (Char)
        ## (Bytes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Binutils_cmi",
    src  = "binutils.mli",
    opts = SIG_OPTS,
    deps   = [
        ## (Result)
    ]
)

bootstrap_module(
    name   = "Build_path_prefix_map",
    struct = "build_path_prefix_map.ml",
    sig    = "Build_path_prefix_map_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ## (String)
        ## (Printf)
        ## (List)
        ## (Buffer)
    ]
)

bootstrap_signature(
    name = "Build_path_prefix_map_cmi",
    src  = "build_path_prefix_map.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

bootstrap_module(
    name   = "Ccomp",
    struct = "ccomp.ml",
    sig    = "Ccomp_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Profile", ## (Utils Profile)
        ":Misc", ## (Utils Misc)
        ":Load_path", ## (Utils Load_path)
        ":Config", ## (Utils Config)
        ":Clflags", ## (Utils Clflags)
        ## (Sys)
        ## (String)
        ## (Printf)
        ## (List)
        ## (Filename)
    ]
)

bootstrap_signature(
    name = "Ccomp_cmi",
    src  = "ccomp.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

bootstrap_module(
    name   = "Clflags",
    struct = "clflags.ml",
    sig    = "Clflags_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Profile", ## (Utils Profile)
        ":Numbers", ## (Utils Numbers)
        ":Misc", ## (Utils Misc)
        ":Config", ## (Utils Config)
        ":Arg_helper", ## (Utils Arg_helper)
        ## (String)
        ## (Printf)
        ## (List)
        ## (Filename)
        ## (Arg)
    ]
)

bootstrap_signature(
    name = "Clflags_cmi",
    src  = "clflags.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Profile", ## (Utils Profile)
        ":Misc", ## (Utils Misc)
        ## (Digest)
        ## (Arg)
    ]
)

bootstrap_module(
    name   = "Config",
    struct = "config.ml",
    sig    = "Config_cmi",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

# config.ml: config.mlp $(ROOTDIR)/Makefile.config Makefile
# 	sed $(call SUBST,AFL_INSTRUMENT) \
# 	    $(call SUBST,ARCH) \
#       ...
#       	    $< > $@
## Makefile.common:
## SED_ESCAPE=$(subst ','\'',$(subst !,\!,$(subst &,\&,$(subst \,\\,$1))))
## SUBST generates the sed substitution for the variable *named* in $1
# SUBST=-e 's!%%$1%%!$(call SED_ESCAPE,$($1))!'

# genrule(
#     name = "config_gen",
#     outs = ["config.ml"],
#     srcs = [
#         "config.mlp"
#         "//:Makefile.config",
#         ":Makefile"
#     ],
#     cmd  = "\n".join([
# 	sed $(call SUBST,AFL_INSTRUMENT) \
# 	    $(call SUBST,ARCH) \
# 	    $(call SUBST_STRING,ARCMD) \
# 	    $(call SUBST_STRING,ASM) \
# 	    $(call SUBST,ASM_CFI_SUPPORTED) \
# 	    $(call SUBST_STRING,BYTECCLIBS) \
# 	    $(call SUBST_STRING,CC) \
# 	    $(call SUBST_STRING,CCOMPTYPE) \
# 	    $(call SUBST_STRING,OUTPUTOBJ) \
# 	    $(call SUBST_STRING,EXT_ASM) \
# 	    $(call SUBST_STRING,EXT_DLL) \
# 	    $(call SUBST_STRING,EXE) \
# 	    $(call SUBST_STRING,EXT_LIB) \
# 	    $(call SUBST_STRING,EXT_OBJ) \
# 	    $(call SUBST,FLAMBDA) \
# 	    $(call SUBST,WITH_FLAMBDA_INVARIANTS) \
# 	    $(call SUBST,WITH_CMM_INVARIANTS) \
# 	    $(call SUBST_STRING,FLEXLINK_FLAGS) \
# 	    $(call SUBST_QUOTE,FLEXDLL_DIR) \
# 	    $(call SUBST,HOST) \
# 	    $(call SUBST_STRING,BINDIR) \
# 	    $(call SUBST_STRING,LIBDIR) \
# 	    $(call SUBST_STRING,MKDLL) \
# 	    $(call SUBST_STRING,MKEXE) \
# 	    $(call SUBST_STRING,FLEXLINK_LDFLAGS) \
# 	    $(call SUBST_STRING,FLEXLINK_DLL_LDFLAGS) \
# 	    $(call SUBST_STRING,MKMAINDLL) \
# 	    $(call SUBST,MODEL) \
# 	    $(call SUBST_STRING,NATIVECCLIBS) \
# 	    $(call SUBST_STRING,OCAMLC_CFLAGS) \
# 	    $(call SUBST_STRING,OCAMLC_CPPFLAGS) \
# 	    $(call SUBST_STRING,OCAMLOPT_CFLAGS) \
# 	    $(call SUBST_STRING,OCAMLOPT_CPPFLAGS) \
# 	    $(call SUBST_STRING,PACKLD) \
# 	    $(call SUBST,PROFINFO_WIDTH) \
# 	    $(call SUBST_STRING,RANLIBCMD) \
# 	    $(call SUBST_STRING,RPATH) \
# 	    $(call SUBST_STRING,MKSHAREDLIBRPATH) \
# 	    $(call SUBST,FORCE_SAFE_STRING) \
# 	    $(call SUBST,DEFAULT_SAFE_STRING) \
# 	    $(call SUBST,WINDOWS_UNICODE) \
# 	    $(call SUBST,NAKED_POINTERS) \
# 	    $(call SUBST,SUPPORTS_SHARED_LIBRARIES) \
# 	    $(call SUBST,SYSTEM) \
# 	    $(call SUBST,SYSTHREAD_SUPPORT) \
# 	    $(call SUBST,TARGET) \
# 	    $(call SUBST,WITH_FRAME_POINTERS) \
# 	    $(call SUBST,WITH_PROFINFO) \
# 	    $(call SUBST,FLAT_FLOAT_ARRAY) \
# 	    $(call SUBST,FUNCTION_SECTIONS) \
# 	    $(call SUBST,CC_HAS_DEBUG_PREFIX_MAP) \
# 	    $(call SUBST,AS_HAS_DEBUG_PREFIX_MAP) \
#     ])
# )

bootstrap_signature(
    name = "Config_cmi",
    src  = "config.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

bootstrap_module(
    name   = "Consistbl",
    struct = "consistbl.ml",
    sig    = "Consistbl_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ## (Set)
        ## (Map)
        ## (List)
        ## (Hashtbl)
        ## (Digest)
    ]
)

bootstrap_signature(
    name = "Consistbl_cmi",
    src  = "consistbl.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ## (Set)
        ## (Map)
        ## (Hashtbl)
        ## (Digest)
    ]
)

bootstrap_module(
    name   = "Diffing",
    struct = "diffing.ml",
    sig    = "Diffing_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ## (Option)
        ## (List)
        ## (Format)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Diffing_cmi",
    src  = "diffing.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ## (Format)
        ## (Digest)
    ]
)

bootstrap_module(
    name   = "Diffing_with_keys",
    struct = "diffing_with_keys.ml",
    sig    = "Diffing_with_keys_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ":Diffing", ## (Utils Diffing)
        ## (Map)
        ## (List)
        ## (Format)
        ## (Either)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Diffing_with_keys_cmi",
    src  = "diffing_with_keys.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Diffing", ## (Utils Diffing)
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Identifiable",
    struct = "identifiable.ml",
    sig    = "Identifiable_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ## (Set)
        ## (Printf)
        ## (Map)
        ## (List)
        ## (Hashtbl)
        ## (Format)
    ]
)

bootstrap_signature(
    name = "Identifiable_cmi",
    src  = "identifiable.mli",
    opts = SIG_OPTS,
    deps   = [
        ## (Set)
        ## (Map)
        ## (Hashtbl)
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Int_replace_polymorphic_compare",
    struct = "int_replace_polymorphic_compare.ml",
    sig    = "Int_replace_polymorphic_compare_cmi",
    opts = MODULE_OPTS,
    deps   = [
    ]
)

bootstrap_signature(
    name = "Int_replace_polymorphic_compare_cmi",
    src  = "int_replace_polymorphic_compare.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

bootstrap_module(
    name   = "Lazy_backtrack",
    struct = "lazy_backtrack.ml",
    sig    = "Lazy_backtrack_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ## (Either)
    ]
)

bootstrap_signature(
    name = "Lazy_backtrack_cmi",
    src  = "lazy_backtrack.mli",
    opts = SIG_OPTS,
    deps   = [
        ## (Either)
    ]
)

bootstrap_module(
    name   = "Load_path",
    struct = "load_path.ml",
    sig    = "Load_path_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ":Local_store", ## (Utils Local_store)
        ":Config", ## (Utils Config)
        ## (Sys)
        ## (String)
        ## (List)
        ## (Filename)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Load_path_cmi",
    src  = "load_path.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

bootstrap_module(
    name   = "Local_store",
    struct = "local_store.ml",
    sig    = "Local_store_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ## (List)
        ## (Fun)
    ]
)

bootstrap_signature(
    name = "Local_store_cmi",
    src  = "local_store.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

bootstrap_module(
    name   = "Misc",
    struct = "misc.ml",
    sig    = "Misc_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Config", ## (Utils Config)
        ":Build_path_prefix_map", ## (Utils Build_path_prefix_map)
        ## (Sys)
        ## (String)
        ## (Set)
        ## (Printf)
        ## (Printexc)
        ## (Option)
        ## (Nativeint)
        ## (Map)
        ## (List)
        ## (Int64)
        ## (Int32)
        ## (Int)
        ## (Hashtbl)
        ## (Fun)
        ## (Format)
        ## (Filename)
        ## (Digest)
        ## (Bytes)
        ## (Buffer)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Misc_cmi",
    src  = "misc.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Build_path_prefix_map", ## (Utils Build_path_prefix_map)
        ## (String)
        ## (Set)
        ## (Map)
        ## (Hashtbl)
        ## (Format)
        ## (Digest)
    ]
)

bootstrap_module(
    name   = "Numbers",
    struct = "numbers.ml",
    sig    = "Numbers_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ":Identifiable", ## (Utils Identifiable)
        ## (Set)
        ## (Printf)
        ## (Map)
        ## (Int64)
        ## (Int)
        ## (Hashtbl)
        ## (Format)
        ## (Digest)
    ]
)

bootstrap_signature(
    name = "Numbers_cmi",
    src  = "numbers.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Identifiable", ## (Utils Identifiable)
        ## (Set)
        ## (Map)
        ## (Int64)
        ## (Hashtbl)
    ]
)

bootstrap_module(
    name   = "Profile",
    struct = "profile.ml",
    sig    = "Profile_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ## (Sys)
        ## (String)
        ## (Printf)
        ## (List)
        ## (Int)
        ## (Hashtbl)
        ## (Gc)
        ## (Format)
        ## (Float)
        ## (Digest)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Profile_cmi",
    src  = "profile.mli",
    opts = SIG_OPTS,
    deps   = [
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Strongly_connected_components",
    struct = "strongly_connected_components.ml",
    sig    = "Strongly_connected_components_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Numbers", ## (Utils Numbers)
        ":Misc", ## (Utils Misc)
        ":Identifiable", ## (Utils Identifiable)
        ## (Set)
        ## (Map)
        ## (List)
        ## (Hashtbl)
        ## (Digest)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Strongly_connected_components_cmi",
    src  = "strongly_connected_components.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Identifiable", ## (Utils Identifiable)
        ## (Set)
        ## (Map)
        ## (Hashtbl)
    ]
)

bootstrap_module(
    name   = "Targetint",
    struct = "targetint.ml",
    sig    = "Targetint_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc", ## (Utils Misc)
        ## (Sys)
        ## (Int64)
        ## (Int32)
        ## (Format)
        ## (Digest)
    ]
)

bootstrap_signature(
    name = "Targetint_cmi",
    src  = "targetint.mli",
    opts = SIG_OPTS,
    deps   = [
        ## (Format)
    ]
)

bootstrap_module(
    name   = "Terminfo",
    struct = "terminfo.ml",
    sig    = "Terminfo_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ## (Sys)
        ## (Printf)
    ]
)

bootstrap_signature(
    name = "Terminfo_cmi",
    src  = "terminfo.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

bootstrap_module(
    name   = "Warnings",
    struct = "warnings.ml",
    sig    = "Warnings_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//stdlib:ocaml-stdlib",
        ":Misc", ## (Utils Misc)
        ## (String)
        ## (Printf)
        ## (List)
        ## (Lexing)
        ## (Int)
        ## (Hashtbl)
        ## (Format)
        ## (Digest)
        ## (Char)
        ## (Array)
        ## (Arg)
    ]
)

bootstrap_signature(
    name = "Warnings_cmi",
    src  = "warnings.mli",
    opts = SIG_OPTS,
    deps   = [
        "//stdlib:ocaml-stdlib",
        ## (Lexing)
        ## (Lazy)
    ]
)

################################################################
write_config(
    name     = "config",
    output   = "config.ml",
    template = "config.mlp",
    data     = CONFIG_MAP
)
