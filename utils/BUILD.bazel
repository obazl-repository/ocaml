load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_executable",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:BUILD.bzl",
     "USE_PRIMS", "DATA_PRIMS",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS")

load(":BUILD.bzl", "CONFIG_MAP", "write_config")

exports_files([ ## for //otherlibs/dynlink:Dynlink_compilerlibs
    "arg_helper.mli", "arg_helper.ml",
    "binutils.mli", "binutils.ml",
    "build_path_prefix_map.mli", "build_path_prefix_map.ml",
    "clflags.mli", "clflags.ml",
    "config.mli",
    "consistbl.mli", "consistbl.ml",
    "identifiable.mli", "identifiable.ml",
    "int_replace_polymorphic_compare.mli",
    "int_replace_polymorphic_compare.ml",
    "lazy_backtrack.mli", "lazy_backtrack.ml",
    "load_path.mli", "load_path.ml",
    "local_store.mli", "local_store.ml",
    "misc.mli", "misc.ml",
    "numbers.mli", "numbers.ml",
    "profile.mli", "profile.ml",
    "terminfo.mli", "terminfo.ml",
    "warnings.mli", "warnings.ml"
])

## root Makefile
# CAMLC=$(BOOT_OCAMLC) -g -nostdlib -I boot -use-prims runtime/primitives

MODULE_OPTS = ROOT_MODULE_OPTS
##+ ["-I", "boot"]
# "-use-prims", "runtime/primitives"]

SIG_OPTS = ROOT_SIG_OPTS

STDLIB = ["//stdlib", "//stdlib:Std_exit"]

################################################################
## expunge utility, defined in root Makefile:
# The "expunge" utility
# $(expunge): compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma \
#          toplevel/expunge.cmo
# 	$(CAMLC) $(LINKFLAGS) -o $@ $^
bootstrap_executable(
    name = "expunge",
    main = "//toplevel:Expunge",
    deps = [
        "//compilerlibs:ocamlcommon",
        "//bytecomp:ocamlbytecomp",
    ],
    visibility = ["//toplevel:__pkg__"]
)

################################################################
## compilerlibs/Makefile.compilerlibs

# COMMON_CMI = $(UTILS_CMI) $(PARSING_CMI) $(TYPING_CMI) $(LAMBDA_CMI) $(COMP_CMI)
# COMMON = $(UTILS) $(PARSING) $(TYPING) $(LAMBDA) $(COMP)
# compilerlibs/ocamlcommon.cma: $(COMMON_CMI) $(COMMON)
# 	$(CAMLC) -a -linkall -o $@ $(COMMON)

# obazl testing, build everything
bootstrap_library(
# bootstrap_archive(
    name = "utils",
    mode = "bytecode",
    manifest  = [
        "Arg_helper",
        "Binutils",
        "Build_path_prefix_map",
        "Ccomp",
        "Clflags",
        "Config",
        "Consistbl",
        "Diffing",
        "Diffing_with_keys",
        "Domainstate",
        "Identifiable",
        "Int_replace_polymorphic_compare",
        "Lazy_backtrack",
        "Load_path",
        "Local_store",
        "Misc",
        "Numbers",
        "Profile",
        "Strongly_connected_components",
        "Targetint",
        "Terminfo",
        "Warnings",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

bootstrap_library(
    name = "ocamlcommon",
    mode = "bytecode",
    manifest  = [
        ## list from compilerlibs/Makefile.compilerlibs UTILS
        "Build_path_prefix_map",
        "Misc",
        "Identifiable",
        "Numbers",
        "Arg_helper",
        "Clflags",
        "Profile",
        "Local_store",
        "Load_path",
        "Terminfo",
        "Ccomp",
        "Warnings",
        "Consistbl",
        "Strongly_connected_components",
        "Targetint",
        "Int_replace_polymorphic_compare",
        "Domainstate",
        "Binutils",
        "Lazy_backtrack",
        "Diffing",
        "Diffing_with_keys",
        ## Misc and Config make inconsistent assumptions over Config iface
        ## No idea why
        "Config",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
bootstrap_module(
    name   = "Arg_helper",
    struct = "arg_helper.ml",
    sig    = "Arg_helper_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__"
    ]
)

bootstrap_signature(
    name = "Arg_helper_cmi",
    src  = "arg_helper.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Map",
    ]
)

bootstrap_module(
    name   = "Binutils",
    struct = "binutils.ml",
    sig    = "Binutils_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    ## DEMO: we can depend on individual submodules instead of the entire lib
    deps   = [
        ## "//stdlib" ## depend on entire Stdlib

        ## depend on individual Stdlib submodules:
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lazy",
        # "//stdlib:Stdlib.LargeFile",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Array"
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Binutils_cmi",
    src  = "binutils.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Result",
    ]
)

bootstrap_module(
    name   = "Build_path_prefix_map",
    struct = "build_path_prefix_map.ml",
    sig    = "Build_path_prefix_map_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Buffer",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Build_path_prefix_map_cmi",
    src  = "build_path_prefix_map.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ]
)

bootstrap_module(
    name   = "Ccomp",
    struct = "ccomp.ml",
    sig    = "Ccomp_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Profile", ## (Utils Profile)
        ":Misc", ## (Utils Misc)
        ":Load_path", ## (Utils Load_path)
        ":Config", ## (Utils Config)
        ":Clflags", ## (Utils Clflags)
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Filename",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ],
)

bootstrap_signature(
    name = "Ccomp_cmi",
    src  = "ccomp.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ]
)

bootstrap_module(
    name   = "Clflags",
    struct = "clflags.ml",
    sig    = "Clflags_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Profile", ## (Utils Profile)
        ":Numbers", ## (Utils Numbers)
        ":Misc", ## (Utils Misc)
        ":Config", ## (Utils Config)
        ":Arg_helper", ## (Utils Arg_helper)
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = [
        "//asmcomp:__subpackages__",
        "//bytecomp:__subpackages__",
        "//driver:__subpackages__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//parsing:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Clflags_cmi",
    src  = "clflags.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Profile", ## (Utils Profile)
        ":Misc", ## (Utils Misc)
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = ["//driver:__pkg__"]
)

bootstrap_module(
    name   = "Config",
    struct = "config.ml",
    sig    = "Config_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = [ # STDLIB + [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys"
    ],
    visibility = [
        "//asmcomp:__subpackages__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)

write_config(
    name     = "config_ml",
    output   = "config.ml",
    template = "config.mlp",
    data     = CONFIG_MAP,
    visibility = [
        "//otherlibs/dynlink:__pkg__",
    ]
)

bootstrap_signature(
    name = "Config_cmi",
    src  = "config.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = [ # STDLIB + [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys"
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
    ]
)

bootstrap_module(
    name   = "Consistbl",
    struct = "consistbl.ml",
    sig    = "Consistbl_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc", ## (Utils Misc)
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Digest",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Consistbl_cmi",
    src  = "consistbl.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc", ## (Utils Misc)
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Digest",
    ]
)

bootstrap_module(
    name   = "Diffing",
    struct = "diffing.ml",
    sig    = "Diffing_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc", ## (Utils Misc)
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Array",
    ],
    visibility = ["//typing:__pkg__"]
)

bootstrap_signature(
    name = "Diffing_cmi",
    src  = "diffing.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc", ## (Utils Misc)
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Digest",
    ]
)

bootstrap_module(
    name   = "Diffing_with_keys",
    struct = "diffing_with_keys.ml",
    sig    = "Diffing_with_keys_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc", ## (Utils Misc)
        ":Diffing", ## (Utils Diffing)
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Either",
        "//stdlib:Stdlib.Array",
    ],
    visibility = ["//typing:__pkg__"]
)

bootstrap_signature(
    name = "Diffing_with_keys_cmi",
    src  = "diffing_with_keys.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Diffing", ## (Utils Diffing)
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//typing:__pkg__"]
)

bootstrap_module(
    name   = "Domainstate",
    struct = "domainstate.ml",
    sig    = "Domainstate_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ],
    visibility = ["//asmcomp:__subpackages__"]
)

genrule(
    name = "domainstate_ml",
    outs = ["domainstate.ml"],
    srcs = ["//runtime/caml:domain_state.tbl"],
    cmd  = "\n".join([

        ## FIXME: next to last entry 'checking_pointer_pc is conditional

        "echo \"type t =\" > domain_state.ml.tmp;",
        "sed -n -e 's/DOMAIN_STATE[^,]*, *\\([^)]*\\)).*/| Domain_\\1/p' $(location //runtime/caml:domain_state.tbl) >> domain_state.ml.tmp;",
        "echo >> domain_state.ml.tmp",

        "echo \"let idx_of_field =\" >> domain_state.ml.tmp;",
        "echo \"  let curr = 0 in\" >> domain_state.ml.tmp;",
        "sed -n -e 's/DOMAIN_STATE[^,]*, *\\([^)]*\\)).*/" +
        "let idx__\\1 = curr in let curr = curr + 1 in/p' $(location //runtime/caml:domain_state.tbl) >> domain_state.ml.tmp;",
        "echo >> domain_state.ml.tmp;",

        "echo \"let _ = curr in\" >> domain_state.ml.tmp;",
        "echo \"function\" >> domain_state.ml.tmp;",

        "sed -n -e 's/DOMAIN_STATE[^,]*, *\\([^)]*\\)).*/" +
        "| Domain_\\1 -> idx__\\1/p' $(location //runtime/caml:domain_state.tbl) >> domain_state.ml.tmp;",

        # if NAKED_POINTERS_CHECKER config option set && !defined(_WIN32)
        # "cp domain_state.ml.tmp $@;",
        # else remove
        "sed -n -e '/checking_pointer_pc/!p' domain_state.ml.tmp > $@;"
        # "rm domain_state.ml.tmp"
    ])
)

bootstrap_signature(
    name = "Domainstate_cmi",
    src  = "domainstate.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ]
)

genrule(
    name = "domainstate_mli",
    outs = ["domainstate.mli"],
    srcs = ["//runtime/caml:domain_state.tbl"],
    cmd  = "\n".join([

        ## FIXME: next to last entry 'checking_pointer_pc is conditional

        "echo \"type t =\" > domain_state.mli.tmp;",
        "sed -n -e 's/DOMAIN_STATE[^,]*, *\\([^)]*\\)).*/" +
        "| Domain_\\1/p' $(location //runtime/caml:domain_state.tbl) >> domain_state.mli.tmp;",
        "echo >> domain_state.mli.tmp",

        "echo \"val idx_of_field : t -> int\" >> domain_state.mli.tmp;",

        # if NAKED_POINTERS_CHECKER config option set && !defined(_WIN32)
        ## "mv domain_state.tmp $@;"
        # else remove
        "sed -n -e '/checking_pointer_pc/!p' domain_state.mli.tmp >> $@;"
    ])
)


bootstrap_module(
    name   = "Identifiable",
    struct = "identifiable.ml",
    sig    = "Identifiable_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc", ## (Utils Misc)
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//typing:__pkg__",
    ]
)

bootstrap_signature(
    name = "Identifiable_cmi",
    src  = "identifiable.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//middle_end:__subpackages__",
        "//middle_end/flambda/base_types:__subpackages__",
        "//utils:__pkg__"
    ]
)

bootstrap_module(
    name   = "Int_replace_polymorphic_compare",
    struct = "int_replace_polymorphic_compare.ml",
    sig    = "Int_replace_polymorphic_compare_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ],
    visibility = [
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
        "//middle_end/flambda:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
    ]
)

bootstrap_signature(
    name = "Int_replace_polymorphic_compare_cmi",
    src  = "int_replace_polymorphic_compare.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ]
)

bootstrap_module(
    name   = "Lazy_backtrack",
    struct = "lazy_backtrack.ml",
    sig    = "Lazy_backtrack_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Either",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Lazy_backtrack_cmi",
    src  = "lazy_backtrack.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Either",
    ],
    visibility = ["//typing:__pkg__"]
)

bootstrap_module(
    name   = "Load_path",
    struct = "load_path.ml",
    sig    = "Load_path_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc", ## (Utils Misc)
        ":Local_store", ## (Utils Local_store)
        ":Config", ## (Utils Config)
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Array",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Load_path_cmi",
    src  = "load_path.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ]
)

bootstrap_module(
    name   = "Local_store",
    struct = "local_store.ml",
    sig    = "Local_store_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Fun",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Local_store_cmi",
    src  = "local_store.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ]
)

bootstrap_module(
    name   = "Misc",
    struct = "misc.ml",
    sig    = "Misc_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Config", ## (Utils Config)
        ":Build_path_prefix_map", ## (Utils Build_path_prefix_map)
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Array",
    ],
    visibility = [
        "//asmcomp:__subpackages__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
        "//toplevel/byte:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_signature(
    name = "Misc_cmi",
    src  = "misc.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Config_cmi",
        ":Build_path_prefix_map",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Digest",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//file_formats:__pkg__"
    ]
)

bootstrap_module(
    name   = "Numbers",
    struct = "numbers.ml",
    sig    = "Numbers_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc",
        ":Identifiable",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Digest",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Numbers_cmi",
    src  = "numbers.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Identifiable",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Hashtbl",
    ]
)

bootstrap_module(
    name   = "Profile",
    struct = "profile.ml",
    sig    = "Profile_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Float",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Array",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//driver:__pkg__",
        "//middle_end/flambda:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Profile_cmi",
    src  = "profile.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Strongly_connected_components",
    struct = "strongly_connected_components.ml",
    sig    = "Strongly_connected_components_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Numbers",
        ":Misc",
        ":Identifiable",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Array",
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_signature(
    name = "Strongly_connected_components_cmi",
    src  = "strongly_connected_components.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Identifiable",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Hashtbl",
    ]
)

bootstrap_module(
    name   = "Targetint",
    struct = "targetint.ml",
    sig    = "Targetint_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Digest",
    ],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_signature(
    name = "Targetint_cmi",
    src  = "targetint.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//asmcomp:__pkg__"]
)

bootstrap_module(
    name   = "Terminfo",
    struct = "terminfo.ml",
    sig    = "Terminfo_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Printf",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
    ]
)

bootstrap_signature(
    name = "Terminfo_cmi",
    src  = "terminfo.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
    ]
)

bootstrap_module(
    name   = "Warnings",
    struct = "warnings.ml",
    sig    = "Warnings_cmi",
    opts = MODULE_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        ":Misc",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//lambda:__pkg__",
        "//parsing:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__",
    ]
)

bootstrap_signature(
    name = "Warnings_cmi",
    src  = "warnings.mli",
    opts = SIG_OPTS,
    data = DATA_PRIMS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Lazy",
    ]
)
