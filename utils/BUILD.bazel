load("//bzl:rules.bzl",
     "boot_archive",
     # "boot_config",
     # "boot_executable",
     "boot_library",
     "build_tool",
     "compiler_module",
     "compiler_signature",
)

load("//config:WARNINGS.bzl", "w")

load("//vendor/mustach:BUILD_RULES.bzl", "mustache")

load(":BUILD.bzl", "write_config")

## make log:

# ./boot/ocamlrun ./boot/ocamlc  (twice!)
# -nostdlib -use-prims -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats
# -c utils/warnings.ml

# ./boot/ocamlrun ./ocamlopt
# -nostdlib -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats
# -c utils/warnings.ml

# ./boot/ocamlrun ./boot/ocamlc
# -nostdlib -use-prims -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats

exports_files([ ## for //otherlibs/dynlink:Dynlink_compilerlibs
    "arg_helper.mli", "arg_helper.ml",
    "binutils.mli", "binutils.ml",
    "build_path_prefix_map.mli", "build_path_prefix_map.ml",
    "clflags.mli", "clflags.ml",
    "config.mli",
    "consistbl.mli", "consistbl.ml",
    "identifiable.mli", "identifiable.ml",
    "int_replace_polymorphic_compare.mli",
    "int_replace_polymorphic_compare.ml",
    "lazy_backtrack.mli", "lazy_backtrack.ml",
    "load_path.mli", "load_path.ml",
    "local_store.mli", "local_store.ml",
    "misc.mli", "misc.ml",
    "numbers.mli", "numbers.ml",
    "profile.mli", "profile.ml",
    "terminfo.mli", "terminfo.ml",
    "warnings.mli", "warnings.ml"
])

## root Makefile
# CAMLC=$(BOOT_OCAMLC) -g -nostdlib -I boot -use-prims runtime/primitives

MODULE_OPTS = []
SIG_OPTS    = []

# MODULE_OPTS = ROOT_MODULE_OPTS
# ##+ ["-I", "boot"]
# # "-use-prims", "runtime/primitives"]

# SIG_OPTS = ROOT_SIG_OPTS

################################################################
## expunge utility, defined in root Makefile:
# The "expunge" utility
# $(expunge): compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma \
#          toplevel/expunge.cmo
# 	$(CAMLC) $(LINKFLAGS) -o $@ $^
# boot_executable(
build_tool( ## only build as vm/vm with boot compiler
    name = "expunge",
    prologue = [
        "//compilerlibs:ocamlcommon",
        "//bytecomp:ocamlbytecomp",
    ],
    main = "//toplevel:Expunge",
    visibility = ["//toplevel:__pkg__"]
)

################################################################
## compilerlibs/Makefile.compilerlibs

# COMMON_CMI = $(UTILS_CMI) $(PARSING_CMI) $(TYPING_CMI) $(LAMBDA_CMI) $(COMP_CMI)
# COMMON = $(UTILS) $(PARSING) $(TYPING) $(LAMBDA) $(COMP)
# compilerlibs/ocamlcommon.cma: $(COMMON_CMI) $(COMMON)
# 	$(CAMLC) -a -linkall -o $@ $(COMMON)

# obazl testing, build everything
boot_library(
# boot_archive(
    name = "utils",
    # mode = "bytecode",
    manifest  = [
        "Arg_helper",
        "Binutils",
        "Build_path_prefix_map",
        # "Ccomp",
        "Clflags",
        "//config:Config",
        "Consistbl",
        "Diffing",
        "Diffing_with_keys",
        "Domainstate",
        "Identifiable",
        "Int_replace_polymorphic_compare",
        "Lazy_backtrack",
        "Load_path",
        "Local_store",
        "Misc",
        "Numbers",
        "Profile",
        "Strongly_connected_components",
        "Targetint",
        "Terminfo",
        "Warnings",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

# boot_archive(
boot_library(
    name = "ocamlcommon",
    # mode = "bytecode",
    manifest  = [
        ## list from compilerlibs/Makefile.compilerlibs
        ## ":Config" moved to //config/Config
        ":Arg_helper",
        ":Binutils",
        ":Build_path_prefix_map",
        ":Ccomp",
        ":Clflags",
        ":Consistbl",
        ":Diffing",
        ":Diffing_with_keys",
        ":Domainstate",
        ":Identifiable",
        ":Int_replace_polymorphic_compare",
        ":Lazy_backtrack",
        ":Load_path",
        ":Local_store",
        ":Misc",
        ":Numbers",
        ":Profile",
        ":Strongly_connected_components",
        ":Targetint",
        ":Terminfo",
        ":Warnings",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
compiler_module(
    name   = "Arg_helper",
    struct = "arg_helper.ml",
    sig    = "Arg_helper_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//bin:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__"
    ]
)

compiler_signature(
    name = "Arg_helper_cmi",
    src  = "arg_helper.mli",
    opts = SIG_OPTS + ["-nopervasives", "-open", "Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi",
        "//stdlib:Stdlib.Map_cmi"
    ]
)

compiler_module(
    name   = "Binutils",
    struct = "binutils.ml",
    sig    = "Binutils_cmi",
    open   = ["//stdlib:Stdlib"],
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ]
)

compiler_signature(
    name = "Binutils_cmi",
    src  = "binutils.mli",
    opts = SIG_OPTS + ["-nopervasives", "-open", "Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi",
        "//stdlib:Stdlib.Result_cmi"]
)

compiler_module(
    name   = "Build_path_prefix_map",
    struct = "build_path_prefix_map.ml",
    sig    = "Build_path_prefix_map_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//bin:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
    ]
)

compiler_signature(
    name = "Build_path_prefix_map_cmi",
    src  = "build_path_prefix_map.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi"
    ]
)

compiler_module(
    name   = "Ccomp",
    struct = "ccomp.ml",
    sig    = "Ccomp_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config", ## (Utils Config)
        ":Clflags", ## (Utils Clflags)
        ":Load_path", ## (Utils Load_path)
        ":Misc", ## (Utils Misc)
        ":Profile", ## (Utils Profile)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Filename",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bin:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ],
)

compiler_signature(
    name = "Ccomp_cmi",
    src  = "ccomp.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi"
    ]
)

compiler_module(
    name   = "Clflags",
    struct = "clflags.ml",
    sig    = "Clflags_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        ":Arg_helper",
        ":Misc",
        ":Numbers",
        ":Profile",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//asmcomp:__subpackages__",
        "//bin:__subpackages__",
        "//bytecomp:__subpackages__",
        "//debugger:__pkg__",
        "//driver:__subpackages__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//parsing:__pkg__",
        "//middle_end:__subpackages__",
        "//ocamltest:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__",
        "//testsuite:__subpackages__"
    ]
)

compiler_signature(
    name = "Clflags_cmi",
    src  = "clflags.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Misc_cmi",
        ":Profile_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg_cmi",
        "//stdlib:Stdlib.Digest_cmi",
    ],
    visibility = ["//driver:__pkg__"]
)

# moved to //config:Config
# compiler_module(
#     name   = "Config",
#     struct = "config.ml",
#     sig    = "Config_cmi",
#     opts = MODULE_OPTS,
#     deps   = [ # [
#         # "//config:Config_cc",
#         "//stdlib:Stdlib.List",
#         "//stdlib:Stdlib.Printf",
#         "//stdlib:Stdlib.Option", # if not bootstrapping?
#         "//stdlib:Stdlib.String",
#         "//stdlib:Stdlib.Sys"
#     ],
#     visibility = [
#         "//asmcomp:__subpackages__",
#         "//bytecomp:__pkg__",
#         "//driver:__pkg__",
#         "//file_formats:__pkg__",
#         "//lambda:__pkg__",
#         "//middle_end:__subpackages__",
#         "//otherlibs/dynlink:__pkg__",
#         "//parsing:__pkg__",
#         "//tools:__pkg__",
#         "//toplevel:__subpackages__",
#         "//typing:__pkg__"
#     ]
# )

## //Makefile
# utils/config.ml: \
#   utils/config_$(if $(filter true,$(IN_COREBOOT_CYCLE)),boot,main).ml
# 	cp $< $@

# genrule(
#     outs   = ["config.ml"],
#     name   = "config_ml__",
#     srcs   = select({
#         "//config:bootstrapping?": [":config_boot.ml"],
#         "//config/stage:dev?"    : [":config_dev.ml"],
#         "//conditions:default"   : [":config_main.ml"]
#     }),
#     cmd    = " ".join([
#         "cp $(SRCS) $@"
#     ])
# )

# utils/config_boot.ml: utils/config.fixed.ml utils/config.common.ml
# 	cat $^ > $@
# genrule(
#     outs   = ["config_boot.ml"],
#     name   = "config_boot_ml",
#     srcs   = [
#         ":config.fixed.ml",
#         ":config.common.ml"
#     ],
#     cmd    = " ".join([
#         "cat $(SRCS) > $@"
#     ])
# )

# genrule(
#     outs   = ["config_dev.ml"],
#     name   = "config_dev_ml",
#     srcs   = [
#         ":config.dev.ml",
#         ":config.common.ml"
#     ],
#     cmd    = " ".join([
#         "cat $(SRCS) > $@"
#     ])
# )

# utils/config_main.ml: utils/config.generated.ml utils/config.common.ml
# 	cat $^ > $@
# genrule(
#     outs   = ["config_main.ml"],
#     name   = "config_main_ml",
#     srcs   = [
#         ":config.generated.ml",
#         ":config.common.ml"
#     ],
#     cmd    = " ".join([
#         "cat $(SRCS) > $@"
#     ])
# )

# compiler_signature(
#     name = "Config_cmi",
#     src  = "config.mli",
#     opts = SIG_OPTS,
#     deps   = [ # [
#         # "//stdlib:Stdlib.List",
#         # "//stdlib:Stdlib.Printf",
#         # "//stdlib:Stdlib.String",
#         # "//stdlib:Stdlib.Sys",
#         "//stdlib:Stdlib"
#     ],
#     visibility = [
#         "//otherlibs/dynlink:__pkg__",
#     ]
# )

compiler_module(
    name   = "Consistbl",
    struct = "consistbl.ml",
    sig    = "Consistbl_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    deps   = [
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//typing:__pkg__"
    ]
)

compiler_signature(
    name = "Consistbl_cmi",
    src  = "consistbl.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Misc_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ],
    visibility = [
        "//typing:__pkg__"
    ]
)

compiler_module(
    name   = "Diffing",
    struct = "diffing.ml",
    sig    = "Diffing_cmi",
    opts = MODULE_OPTS,
    warnings = [w.NAME_OUT_OF_SCOPE],
    open   = ["//stdlib:Stdlib"],
    deps   = [
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
    visibility = ["//typing:__pkg__"]
)

compiler_signature(
    name = "Diffing_cmi",
    src  = "diffing.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Misc_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = [
        "//typing:__pkg__"
    ]
)

compiler_module(
    name   = "Diffing_with_keys",
    struct = "diffing_with_keys.ml",
    sig    = "Diffing_with_keys_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    warnings = [w.NAME_OUT_OF_SCOPE],
    deps   = [
        ":Diffing",
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Either",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
    ],
    visibility = ["//typing:__pkg__"]
)

compiler_signature(
    name = "Diffing_with_keys_cmi",
    src  = "diffing_with_keys.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Diffing_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = ["//typing:__pkg__"]
)

compiler_module(
    name   = "Domainstate",
    struct = "domainstate_ml",
    sig    = "Domainstate_cmi",
    opts   = MODULE_OPTS,
    stdlib_deps = ["//stdlib:Stdlib"],
    visibility = ["//asmcomp:__subpackages__"]
)

mustache(
    name = "domainstate_ml",
    out  = "domainstate.ml",
    json = "//runtime/caml:domain_state.json",
    template = "domainstate.ml.mustache"
)

# genrule(
#     name = "domainstate_ml",
#     outs = ["domainstate.ml"],
#     srcs = [
#         ":domainstate.ml.c",
#         "//runtime/caml:domain_state.tbl"
#         ## NB: these hdrs are only needed by #includes in
#         ## domainstate.ml.c, they make no contrib to generating
#         ## domainstate.ml
#         "//runtime/caml:config.h",
#         "//runtime/caml:m.h",
#         "//runtime/caml:s.h",
#     ],
#     cmd = " ".join([
#         "HDRS=`dirname $(location //runtime/caml:config.h)`",
#         "&&",
#         "{} -I $$HDRS $(location :domainstate.ml.c) > $@".format(
#             " ".join(CPP) ## CPP = ["gcc", "-E", "-P"]
#         )
#     ])
# )

compiler_signature(
    name = "Domainstate_cmi",
    src  = "domainstate_mli",
    opts = SIG_OPTS,
    stdlib_deps   = ["//stdlib:Stdlib_cmi"]
)

mustache(
    name = "domainstate_mli",
    out  = "domainstate.mli",
    json = "//runtime/caml:domain_state.json",
    template = "domainstate.mli.mustache"
)

# genrule(
#     name = "domainstate_mli",
#     outs = ["domainstate.mli"],
#     srcs = [
#         ":domainstate.mli.c",
#         "//runtime/caml:config.h",
#         "//runtime/caml:m.h",
#         "//runtime/caml:s.h",
#         "//runtime/caml:domain_state.tbl"
#     ],
#     cmd = " ".join([
#         "HDRS=`dirname $(location //runtime/caml:config.h)`",
#         "&&",
#         "{} -I $$HDRS $(location :domainstate.mli.c) > $@".format(
#             " ".join(CPP) ## CPP = ["gcc", "-E", "-P"]
#         )
#     ])
# )

## //Makefile
# utils/domainstate.ml: utils/domainstate.ml.c runtime/caml/domain_state.tbl
# 	$(CPP) -I runtime/caml $< > $@
# utils/domainstate.mli: utils/domainstate.mli.c runtime/caml/domain_state.tbl
# 	$(CPP) -I runtime/caml $< > $@


compiler_module(
    name   = "Identifiable",
    struct = "identifiable.ml",
    sig    = "Identifiable_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    deps   = [
        ":Misc", ## (Utils Misc)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ],
    visibility = [
        "//bin:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//typing:__pkg__",
    ]
)

compiler_signature(
    name = "Identifiable_cmi",
    src  = "identifiable.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ],
    visibility = [
        "//middle_end:__subpackages__",
        "//middle_end/flambda/base_types:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//typing:__pkg__",
        "//utils:__pkg__"
    ]
)

compiler_module(
    name   = "Int_replace_polymorphic_compare",
    struct = "int_replace_polymorphic_compare.ml",
    sig    = "Int_replace_polymorphic_compare_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib",
    ],
    visibility = [
        "//lambda:__pkg__",
        "//middle_end:__pkg__",
        "//middle_end/flambda:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
    ]
)

compiler_signature(
    name = "Int_replace_polymorphic_compare_cmi",
    src  = "int_replace_polymorphic_compare.mli",
    opts = SIG_OPTS,
    stdlib_deps = ["//stdlib:Stdlib_cmi"]
)

compiler_module(
    name   = "Lazy_backtrack",
    struct = "lazy_backtrack.ml",
    sig    = "Lazy_backtrack_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Either",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//typing:__pkg__"
    ]
)

compiler_signature(
    name = "Lazy_backtrack_cmi",
    src  = "lazy_backtrack.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi",
        "//stdlib:Stdlib.Either_cmi",
    ],
    visibility = ["//typing:__pkg__"]
)

compiler_module(
    name   = "Load_path",
    struct = "load_path.ml",
    sig    = "Load_path_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    deps   = [
        "//config:Config",
        ":Local_store",
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bin:__pkg__",
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)

compiler_signature(
    name = "Load_path_cmi",
    src  = "load_path.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi"
    ],
    visibility = ["//typing:__pkg__"]
)

compiler_module(
    name   = "Local_store",
    struct = "local_store.ml",
    sig    = "Local_store_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.List",
    ],
    visibility = [
        "//bin:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//typing:__pkg__"
    ]
)

compiler_signature(
    name = "Local_store_cmi",
    src  = "local_store.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi"
    ]
)

compiler_module(
    name   = "Misc",
    struct = "misc.ml",
    sig    = "Misc_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        ":Build_path_prefix_map",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Nativeint",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//asmcomp:__subpackages__",
        "//bin:__subpackages__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//debugger:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//ocamltest:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)

compiler_signature(
    name = "Misc_cmi",
    src  = "misc.mli",
    opts = SIG_OPTS,
    deps   = [
        "//config:Config_cmi",
        ":Build_path_prefix_map_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
        "//stdlib:Stdlib.String_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//file_formats:__pkg__",
        "//ocamltest:__pkg__",
        "//parsing:__pkg__",
        "//typing:__pkg__"
    ]
)

compiler_module(
    name   = "Numbers",
    struct = "numbers.ml",
    sig    = "Numbers_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    deps   = [
        ":Identifiable",
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Set",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bin:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ]
)

compiler_signature(
    name = "Numbers_cmi",
    src  = "numbers.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Identifiable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Int64_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ],
    visibility = [
        "//middle_end:__subpackages__"
    ]
)

compiler_module(
    name   = "Profile",
    struct = "profile.ml",
    sig    = "Profile_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Float",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bin:__pkg__",
        "//driver:__pkg__",
        "//middle_end/flambda:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
    ]
)

compiler_signature(
    name = "Profile_cmi",
    src  = "profile.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
    ]
)

compiler_module(
    name   = "Strongly_connected_components",
    struct = "strongly_connected_components.ml",
    sig    = "Strongly_connected_components_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Identifiable",
        ":Misc",
        ":Numbers",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Set",
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

compiler_signature(
    name = "Strongly_connected_components_cmi",
    src  = "strongly_connected_components.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Identifiable_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Map_cmi",
        "//stdlib:Stdlib.Set_cmi",
    ]
)

compiler_module(
    name   = "Targetint",
    struct = "targetint.ml",
    sig    = "Targetint_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int32",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = ["//asmcomp:__pkg__"]
)

compiler_signature(
    name = "Targetint_cmi",
    src  = "targetint.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = ["//asmcomp:__pkg__"]
)

compiler_module(
    name   = "Terminfo",
    struct = "terminfo.ml",
    sig    = "Terminfo_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//bin:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
    ]
)

compiler_signature(
    name = "Terminfo_cmi",
    src  = "terminfo.mli",
    opts = SIG_OPTS,
    stdlib_deps   = ["//stdlib:Stdlib_cmi"]
)

compiler_module(
    name   = "Warnings",
    struct = "warnings.ml",
    sig    = "Warnings_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//bin:__pkg__",
        "//driver:__pkg__",
        "//lambda:__pkg__",
        "//parsing:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__",
    ]
)

compiler_signature(
    name = "Warnings_cmi",
    src  = "warnings.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Lazy_cmi",
        "//stdlib:Stdlib.Lexing_cmi",
        "//stdlib:Stdlib.Sys_cmi",
    ],
    visibility = [
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__"
    ]
)
