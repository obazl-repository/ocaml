build --config=show
query --notool_deps
query --noimplicit_deps

## always use these settings:
build --incompatible_enable_cc_toolchain_resolution
## put it in ~/.bazelrc to enable for all bazel projects

## maybe also put these in ~/.bazelrc, or ./config/user.bazelrc
common --color=yes
common:show --subcommands=pretty_print
common:show --verbose_failures

## suppress INFO msgs etc. emitted by 'bazel run'
run:q --ui_event_filters=-info
run:q --ui_event_filters=-stdout
run:q --ui_event_filters=-stderr
run:q --noshow_progress

build --toolchain_resolution_debug=.*
#build --toolchain_resolution_debug=@bazel_tools//tools/cpp:toolchain_type
#build --toolchain_resolution_debug=//toolchain/type:.*
#build --toolchain_resolution_debug=//boot/toolchain/type:.*

### testing:
# --extra_execution_platforms: The platforms that are available as
# execution platforms to run actions. Platforms can be specified by
# exact target, or as a target pattern. These platforms will be
# considered before those declared in the WORKSPACE file by
# register_execution_platforms().

# Q: how is that related to --host_platform? The latter just sets
# constraint values? Whereas register_execution_platforms declares
# exec platforms available for tc resolution, regardless of which
# constraint-values are in effect. IOW --host_platform sets the action
# configuration.

#### alternate toolchain: pass tc and profile if needed

## Zig
## macos > macos:
common:maczig --extra_toolchains=@zig_sdk//toolchain:darwin_amd64

## linux:
## zig on linux (amd) does not support some flags set by ./configure
## so we need to pass a customized tc profile
common:linuxzig --extra_toolchains=@zig_sdk//toolchain:linux_amd64_gnu.2.28,//toolchain/profile/selector/cc/linux:zig

#### cross-builds: currently for runtimes only
#### specify target platform and 1 toolchain per host (?)
#### plus target profile if needed (zig needs it)

### macos > linux using zig tc (requires custom tc profile)
common:mac_linuxamd64 --extra_toolchains=@zig_sdk//toolchain:linux_amd64_gnu.2.31,//toolchain/profile/selector/cc/linux:zig
common:mac_linuxamd64 --platforms=@zig_sdk//platform:linux_amd64

### linux > macos using zig
common:linuxamd64_macamd64 --extra_toolchains=@zig_sdk//toolchain:darwin_amd64,//toolchain/profile/selector/cc/macos
common:linuxamd64_macamd64 --platforms=@zig_sdk//platform:macos_amd64

################################################################
### sanitizers - default CC toolchains have builtin support!

# common:asan --features=asan
# common:ubsan --features=msan

################################################################
# build --action_env BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
# build --action_env ZIG_SYSTEM_LINKER_HACK=1

## set cc opts for specific files:
# build --per_file_copt=

## put this in ~/.bazelrc to enable for all bazel projects
# common --color=yes

################################################################
## always stamp, it injects the absolute path of the workspace root
# https://docs.bazel.build/versions/main/user-manual.html#flag--workspace_status_command
build --stamp
build --workspace_status_command=$PWD/bzl/camlheader.sh

################################################################
## OCaml platforms: boot, vm, sys

# default
build --host_platform=//platform/ocaml:sys_vm
# default: build --//config/emitter/build:vm
build --platforms=//platform/ocaml:sys_vm
# default: build --//config/emitter/target:vm

build:boot --host_platform=//platform/ocaml:boot_build
build:boot --platforms=//platform/ocaml:boot_target

build:boot.ocamlopt.byte --host_platform=//platform/ocaml:boot_build
build:boot.ocamlopt.byte --platforms=//platform/ocaml:sys_vm_sys_target

build:baseline_vmvm --host_platform=//platform/ocaml:baseline_build
build:baseline_vmvm --platforms=//platform/ocaml:baseline_vm_vm_target

################################################################
# build:ocamlc --host_platform=//platform/ocaml:sys_vm_vm_build
# build:ocamlc --platforms=//platform/ocaml:sys_vm_vm_target

build:ocamlc.byte --host_platform=//platform/ocaml:sys_vm_vm_build
build:ocamlc.byte --platforms=//platform/ocaml:sys_vm_vm_build

build:ocamlopt.byte --host_platform=//platform/ocaml:sys_vm_vm_build
build:ocamlopt.byte --platforms=//platform/ocaml:sys_vm_sys_target

## to emit sys_sys, build host can be either sys_sys_sys or sys_vm_sys
build:ocamlc.opt --host_platform=//platform/ocaml:sys_vm_sys_build
build:ocamlc.opt --platforms=//platform/ocaml:sys_sys_vm_target

# build:ocamlopt.opt --host_platform=//platform/ocaml:sys_sys_sys
# build:ocamlopt.opt --platforms=//platform/ocaml:sys_sys

# build:boot --host_platform=//platform/build:boot
# build:boot --platforms=//platform/target:boot

# build:dev --host_platform=//platform/build:dev
# build:dev --platforms=//platform/target:dev

# build:vmvm --host_platform=//platform/build:vm
# build:vmvm --platforms=//platform/target:vm

# build:sysvm --host_platform=//platform/build:sys
# build:sysvm --platforms=//platform/target:vm

# build:vmsys --host_platform=//platform/build:vm
# build:vmsys --platforms=//platform/target:sys

# build:syssys --host_platform=//platform:sys
# build:syssys --platforms=//platform:sys

# #### cross-compilation
# build:vmvmsys --host_platform=//platform:vm
# build:vmvmsys --platforms=//platform/xtarget=sys


################################################################
## enable debug for ocamlrun:
## build --//config/debug:ocamlrun

# build:stage1 --//bzl/toolchain:ocamlc=//compilers/stage1:ocamlc
# build:stage1 --//bzl:stage=0

# build:stage2 --//bzl/toolchain:ocamlc=//compilers/stage2:ocamlc
# build:stage2 --//bzl:stage=1


try-import .config/dev.bazelrc
try-import .config/user.bazelrc
