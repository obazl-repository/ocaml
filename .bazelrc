## in dev mode, just pass //config/target/executor=<> to set output
build --flag_alias=tgt=//config/target/executor
build --flag_alias=stdlib=//testsuite/tests:with-stdlib

build --nokeep_going

# "may improve build speed for builds that use transitions."
build --experimental_output_directory_naming_scheme=diff_against_baseline

build:ccv --//config/ocaml/compile:verbose
build:ccv --//config/ocaml/link:verbose
build:ccv --//config/ocaml/archive:verbose

build:ccvv --//config/ocaml/compile:verbose
build:ccvv --//config/ocaml/link:verbose
build:ccvv --//config/ocaml/archive:verbose
build:ccvv --//config/ocaml/cc/asm:verbose
build:ccvv --//config/ocaml/cc/compile:verbose
build:ccvv --//config/ocaml/cc/link:verbose

common:dev --//config:dev
# test --test_output=errors

## always use these settings:
## put it in ~/.bazelrc to enable for all bazel projects

## maybe also put these in ~/.bazelrc, or ./config/user.bazelrc
common --color=yes
common:show --subcommands=pretty_print
common:show --verbose_failures
## suppress INFO msgs etc. emitted by 'bazel run'
# common:q --nobuild
common:q --ui_event_filters=-info
common:q --noshow_progress
# common:q --ui_event_filters=-stdout
# common:q --ui_event_filters=-stderr

build --incompatible_enable_cc_toolchain_resolution
#build --toolchain_resolution_debug=.*
#build --toolchain_resolution_debug=@bazel_tools//tools/cpp:toolchain_type
#build --toolchain_resolution_debug=//toolchain/type:.*

# --[no]enable_platform_specific_config default: "false"
# If true, Bazel picks up host-OS-specific config lines from bazelrc
# files. For example, if the host OS is Linux and you run bazel build,
# Bazel picks up lines starting with build:linux. Supported OS
# identifiers are linux, macos, windows, freebsd, and openbsd.
# Enabling this flag is equivalent to using --config=linux on Linux,
# --config=windows on Windows, etc.

### testing:
# --extra_execution_platforms: The platforms that are available as
# execution platforms to run actions. Platforms can be specified by
# exact target, or as a target pattern. These platforms will be
# considered before those declared in the WORKSPACE file by
# register_execution_platforms().

# Q: how is that related to --host_platform? The latter just sets
# constraint values? Whereas register_execution_platforms declares
# exec platforms available for tc resolution, regardless of which
# constraint-values are in effect. IOW --host_platform sets the action
# configuration.

################################################################
#### alternate toolchain: pass tc and profile if needed

## Zig
## macos > macos:
common:maczig --extra_toolchains=@zig_sdk//toolchain:darwin_amd64

## linux:
## zig on linux (amd) does not support some flags set by ./configure
## so we need to pass a customized tc profile
common:linuxzig --extra_toolchains=@zig_sdk//toolchain:linux_amd64_gnu.2.28,//toolchain/profile/selector/cc/linux:zig

################################################################
#### cross-builds: currently for runtimes only
#### specify target platform and 1 toolchain per host (?)
#### plus target profile if needed (zig needs it)

### macos > linux using zig tc (requires custom tc profile)
common:mac_linuxamd64 --extra_toolchains=@zig_sdk//toolchain:darwin_amd64,@zig_sdk//toolchain:linux_amd64_gnu.2.31,//toolchain/profile/selector/cc/linux:zig

# this platform is insufficient, it won't pick out an ocaml tc:
# common:mac_linuxamd64 --platforms=@zig_sdk//platform:linux_amd64

build:mac_linuxamd64 --host_platform=//platform/ocaml/local:sys_vm

# WARNING: --platforms only supports a single target platform: using the first option //platform/ocaml/amd64/linux:sys_vm
build:mac_linuxamd64 --platforms=//platform/ocaml/amd64/linux:sys_vm
# platform expresses target runtime and executor; since each executor
# has two emitters, one must be expressed separately, as a
# config_setting:
build:mac_linuxamd64 --//config/target/emitter=vm

### linux > macos using zig
common:linuxamd64_macamd64 --extra_toolchains=@zig_sdk//toolchain:darwin_amd64,//toolchain/profile/selector/cc/macos
common:linuxamd64_macamd64 --platforms=@zig_sdk//platform:macos_amd64

################################################################
### sanitizers - default CC toolchains have builtin support!

# common:asan --features=asan
# common:ubsan --features=msan

################################################################
# build --action_env BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
# build --action_env ZIG_SYSTEM_LINKER_HACK=1

## set cc opts for specific files:
# build --per_file_copt=

## put this in ~/.bazelrc to enable for all bazel projects
# common --color=yes

################################################################
## always stamp, it injects the absolute path of the workspace root
# https://docs.bazel.build/versions/main/user-manual.html#flag--workspace_status_command
build --stamp
build --workspace_status_command=$PWD/bzl/camlheader.sh

################################################################
## OCaml platforms: boot, vm, sys

# build --config=ocamlc.byte

# build the baseline _boot/ocamlc.byte using boot/ocamlc:
# build:boot --//config/target/executor=boot
# build:boot --//config/target/emitter=boot

## vv_vv
# build:ocamlc.byte --host_platform=//platform/ocaml/local:sys_vm
# build:ocamlc.byte --platforms=//platform/ocaml/local:sys_vm
build:ocamlc.byte --//config/target/executor=vm
build:ocamlc.byte --//config/target/emitter=vm

## vv_vs
# build:ocamlopt.byte --host_platform=//platform/ocaml/local:sys_vm
# build:ocamlopt.byte --platforms=//platform/ocaml/local:sys_vm
build:ocamlopt.byte --//config/target/executor=vm
build:ocamlopt.byte --//config/target/emitter=sys

## ss_ss
# build:ocamlopt.opt --host_platform=//platform/ocaml/local:sys_sys
# build:ocamlopt.opt --extra_execution_platforms=//platform/ocaml/local:sys_sys
# build:ocamlopt.opt --platforms=//platform/ocaml/local:sys_sys
build:ocamlopt.opt --//config/target/executor=sys
build:ocamlopt.opt --//config/target/emitter=sys

## ss_sv
# build:ocamlc.opt --host_platform=//platform/ocaml/local:sys_sys
# build:ocamlc.opt --platforms=//platform/ocaml/local:sys_sys
build:ocamlc.opt --//config/target/executor=sys
build:ocamlc.opt --//config/target/emitter=vm

# build:vs_ss --host_platform=//platform/ocaml/local:sys_vm
# build:vs_ss --platforms=//platform/ocaml/local:sys_sys
# build:vs_ss --//config/target/emitter=sys

# build:vs_sv --host_platform=//platform/ocaml/local:sys_vm
# build:vs_sv --platforms=//platform/ocaml/local:sys_sys
# build:vs_sv --//config/target/emitter=vm


try-import .config/dev.bazelrc
try-import .config/user.bazelrc
