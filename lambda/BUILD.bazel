load("//bzl:rules.bzl",
     "compiler_library",
     "compiler_module",
     "compiler_signature",
)

load("//vendor/mustach:BUILD_RULES.bzl", "mustache")

package(default_visibility = ["//visibility:public"])

exports_files([
    "debuginfo.mli", "debuginfo.ml",
    "lambda.mli", "lambda.ml",
    "runtimedef.mli",
    ## this is exported by genrule: "runtimedef.ml"
])

# make log:
# ./boot/ocamlrun ./ocamlopt
# -nostdlib -I ./stdlib -I otherlibs/dynlink
# -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats
# -I lambda ... -I toplevel
# -c lambda/debuginfo.ml

MODULE_OPTS = []
SIG_OPTS    = []

# compiler_library(
#     name = "lambda",
#     manifest  = [
#         ":Debuginfo",
#         ":Lambda",
#         ":Matching",
#         ":Printlambda",
#         ":Runtimedef",
#         ":Simplif",
#         ":Switch",
#         ":Translattribute",
#         ":Translclass",
#         ":Translcore",
#         ":Translmod",
#         ":Translobj",
#         ":Translprim",
#     ],
# )

compiler_library(
    name = "ocamlcommon",
    manifest  = [
        ":Debuginfo",
        ":Lambda",
        ":Matching",
        ":Printlambda",
        ":Runtimedef",
        ":Simplif",
        ":Switch",
        ":Tmc",
        ":Translattribute",
        ":Translclass",
        ":Translcore",
        ":Translmod",
        ":Translobj",
        ":Translprim",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
compiler_module(
    name   = "Debuginfo",
    struct = "debuginfo.ml",
    sig    = "Debuginfo_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//typing:Ident",
        "//utils:Int_replace_polymorphic_compare",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
    ]
)

compiler_signature(
    name = "Debuginfo_cmi",
    src  = "debuginfo.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Ident_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//middle_end:__subpackages__"
    ]
)

compiler_module(
    name   = "Lambda",
    struct = "lambda.ml",
    sig    = "Lambda_cmi",
    opts = MODULE_OPTS + ["-w", "-40"], ## name-out-of-scope
    deps   = [
        "//parsing:Longident",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Primitive",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Misc",
        ":Debuginfo",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//typing:__pkg__",
        "//testsuite:__subpackages__",
    ],
)

compiler_signature(
    name = "Lambda_cmi",
    src  = "lambda.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
        "//typing:Path_cmi",
        "//typing:Primitive_cmi",
        "//typing:Types_cmi",
        ":Debuginfo_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end:__pkg__",
        "//typing:__pkg__",
        "//toplevel/native:__pkg__"
    ]
)

compiler_module(
    name   = "Matching",
    struct = "matching.ml",
    sig    = "Matching_cmi",
    opts = MODULE_OPTS + ["-w", "-40"], ## name-out-of-scope
    deps   = [
        "//parsing:Location",
        "//parsing:Longident",
        "//typing:Btype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Parmatch",
        "//typing:Predef",
        "//typing:Primitive",
        "//typing:Typedtree",
        "//typing:Typeopt",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Misc",
        ":Debuginfo",
        ":Lambda",
        ":Printlambda",
        ":Switch",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
    ],
    visibility = ["//bytecomp:__pkg__"]
)

compiler_signature(
    name = "Matching_cmi",
    src  = "matching.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//typing:Ident_cmi",
        "//typing:Typedtree_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Printlambda",
    struct = "printlambda.ml",
    sig    = "Printlambda_cmi",
    opts = MODULE_OPTS + ["-w", "-40"], ## name-out-of-scope
    deps   = [
        "//parsing:Location",
        "//typing:Ident",
        "//typing:Primitive",
        "//typing:Printtyp",
        "//typing:Types",
        "//utils:Clflags",
        ":Debuginfo",
        ":Lambda",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//middle_end:__pkg__",
        "//middle_end/flambda:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Printlambda_cmi",
    src  = "printlambda.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Types_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

## root Makefile:
# lambda/runtimedef.ml: lambda/generate_runtimedef.sh runtime/caml/fail.h \
#     runtime/primitives
# 	$^ > $@

# make log:
# ./boot/ocamlrun ./ocamlopt
# -nostdlib -I ./stdlib -I otherlibs/dynlink
# -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats
# -I lambda ... -I toplevel
# -c lambda/runtimedef.ml

compiler_module(
    name   = "Runtimedef",
    struct = "runtimedef_ml",
    sig    = "Runtimedef_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib"
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__pkg__",
    ]
)

mustache(
    name = "runtimedef_ml",
    out  = "runtimedef.ml",
    json = "//runtime:primitives.json",
    template = "runtimedef.ml.mustache",
)

# genrule(
#     name = "runtimedef_ml",
#     outs = ["runtimedef.ml"],
#     srcs = [
#         "generate_runtimedef.sh",
#         "//runtime/caml:fail.h",
#         "//runtime:primitives_dat"
#     ],
#     cmd = " ".join([
#         "$(location :generate_runtimedef.sh)",
#         "$(location //runtime/caml:fail.h)",
#         "$(location //runtime:primitives_dat)",
#         " > $@"
#     ]),
#     visibility = ["//visibility:public"]
# )

compiler_signature(
    name = "Runtimedef_cmi",
    src  = "runtimedef.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi"
    ],
)

compiler_module(
    name   = "Simplif",
    struct = "simplif.ml",
    sig    = "Simplif_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//typing:Ident",
        "//typing:Primitive",
        "//utils:Clflags",
        "//utils:Warnings",
        ":Debuginfo",
        ":Lambda",
        ":Tmc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//middle_end:__subpackages__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Simplif_cmi",
    src  = "simplif.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Ident_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ]
)

compiler_module(
    name   = "Switch",
    struct = "switch.ml",
    sig    = "Switch_cmi",
    opts = MODULE_OPTS,
    open   = ["//stdlib:Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.Printf",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//middle_end:__subpackages__"
     ]
)

compiler_signature(
    name = "Switch_cmi",
    src  = "switch.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib_cmi"
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

compiler_module(
    name   = "Tmc",
    struct = "tmc.ml",
    sig    = "Tmc_cmi",
    opts = MODULE_OPTS + ["-w", "-40"], ## name-out-of-scope
    deps   = [
        ":Lambda"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib",
    ],
)

compiler_signature(
    name = "Tmc_cmi",
    src  = "tmc.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Lambda_cmi",
    ],
)

compiler_module(
    name   = "Translattribute",
    struct = "translattribute.ml",
    sig    = "Translattribute_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//parsing:Location",
        "//parsing:Longident",
        "//typing:Typedtree",
        "//utils:Misc",
        "//utils:Warnings",
        ":Debuginfo",
        ":Lambda",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Translattribute_cmi",
    src  = "translattribute.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        "//parsing:Parsetree_cmi",
        "//typing:Typedtree_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ]
)

compiler_module(
    name   = "Translclass",
    struct = "translclass.ml",
    sig    = "Translclass_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//typing:Btype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Typedtree",
        "//typing:Types",
        "//utils:Clflags",
        ":Debuginfo",
        ":Lambda",
        ":Matching",
        ":Translcore",
        ":Translobj",
    ],
    stdlib_deps = [
        "//stdlib:CamlinternalOO",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Translclass_cmi",
    src  = "translclass.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Typedtree_cmi",
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//typing:Ident_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Translcore",
    struct = "translcore.ml",
    sig    = "Translcore_cmi",
    opts = MODULE_OPTS + ["-w", "-40"], ## name-out-of-scope
    deps   = [
        "//config:Config",
        "//parsing:Location",
        "//parsing:Longident",
        "//typing:Btype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Primitive",
        "//typing:Printtyp",
        "//typing:Typecore",
        "//typing:Typedtree",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Misc",
        ":Debuginfo",
        ":Lambda",
        ":Matching",
        ":Translattribute",
        ":Translobj",
        ":Translprim",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
    ],
)

compiler_signature(
    name = "Translcore_cmi",
    src  = "translcore.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//parsing:Parsetree_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
        "//typing:Path_cmi",
        "//typing:Typedtree_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

compiler_module(
    name   = "Translmod",
    struct = "translmod.ml",
    sig    = "Translmod_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//parsing:Location",
        "//typing:Ctype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Primitive",
        "//typing:Typedtree",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Misc",
        ":Debuginfo", ## (Lambda Debuginfo)
        ":Lambda", ## (Lambda Lambda)
        ":Translattribute", ## (Lambda Translattribute)
        ":Translclass", ## (Lambda Translclass)
        ":Translcore", ## (Lambda Translcore)
        ":Translobj", ## (Lambda Translobj)
        ":Translprim", ## (Lambda Translprim)
        ## (Mtype)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Result",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Translmod_cmi",
    src  = "translmod.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//typing:Ident_cmi",
        "//typing:Primitive_cmi",
        "//typing:Typedtree_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Translobj",
    struct = "translobj.ml",
    sig    = "Translobj_cmi",
    opts = MODULE_OPTS + ["-w", "-40"], ## name-out-of-scope
    deps   = [
        "//config:Config",
        "//typing:Btype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Primitive",
        "//utils:Clflags",
        "//utils:Misc",
        ":Debuginfo", ## (Lambda Debuginfo)
        ":Lambda", ## (Lambda Lambda)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
    ],
)

compiler_signature(
    name = "Translobj_cmi",
    src  = "translobj.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Asttypes_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

compiler_module(
    name   = "Translprim",
    struct = "translprim.ml",
    sig    = "Translprim_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//parsing:Location",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Primitive",
        "//typing:Typedtree",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Misc",
        ":Debuginfo", ## (Lambda Debuginfo)
        ":Lambda", ## (Lambda Lambda)
        ":Matching", ## (Lambda Matching)
        ## (Typeopt)
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
)

compiler_signature(
    name = "Translprim_cmi",
    src  = "translprim.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Typedtree_cmi",
        "//parsing:Asttypes_cmi",
        "//parsing:Location_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
        "//typing:Path_cmi",
        "//typing:Primitive_cmi",
        "//typing:Types_cmi",
        ":Debuginfo_cmi",
        ":Lambda_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

