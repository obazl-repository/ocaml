load("//bzl:rules.bzl",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:BUILD.bzl",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS"
     )

exports_files([
    "debuginfo.mli", "debuginfo.ml",
    "lambda.mli", "lambda.ml",
    "runtimedef.mli",
    ## this is exported by genrule: "runtimedef.ml"
])

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS    = ROOT_MODULE_OPTS

STDLIB = ["//boot:stdlib"]

bootstrap_library(
    name = "lambda",
    manifest  = [
        ":Debuginfo",
        ":Lambda",
        ":Matching",
        ":Printlambda",
        ":Runtimedef",
        ":Simplif",
        ":Switch",
        ":Translattribute",
        ":Translclass",
        ":Translcore",
        ":Translmod",
        ":Translobj",
        ":Translprim",
    ],
)

bootstrap_library(
    name = "ocamlcommon",
    manifest  = [
        ":Debuginfo",
        ":Lambda",
        ":Matching",
        ":Printlambda",
        ":Runtimedef",
        ":Simplif",
        ":Switch",
        ":Tmc",
        ":Translattribute",
        ":Translclass",
        ":Translcore",
        ":Translmod",
        ":Translobj",
        ":Translprim",
    ],
    visibility = ["//compilerlibs:__pkg__"]
)

################################################################
bootstrap_module(
    name   = "Debuginfo",
    struct = "debuginfo.ml",
    sig    = "Debuginfo_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi", # => "//parsing:Location_cmi",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//utils:Int_replace_polymorphic_compare",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
    ]
)

bootstrap_signature(
    name = "Debuginfo_cmi",
    src  = "debuginfo.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Asttypes_cmi", # => "//parsing:Location_cmi",
        "//typing:Ident_cmi",
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//middle_end:__pkg__"]
)

bootstrap_module(
    name   = "Lambda",
    struct = "lambda.ml",
    sig    = "Lambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Debuginfo",
        "//typing:Types",
        "//typing:Primitive",
        "//typing:Path",
        "//stdlib:Stdlib.Option",
        "//utils:Misc",
        "//parsing:Longident",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//typing:Env",
        "//utils:Clflags",
        "//parsing:Asttypes_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end:__subpackages__",
        "//otherlibs/dynlink:__pkg__",
        "//typing:__pkg__",
    ],
)

bootstrap_signature(
    name = "Lambda_cmi",
    src  = "lambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types_cmi",
        "//typing:Primitive",
        "//typing:Path",
        "//typing:Ident",
        "//typing:Env_cmi",
        "//parsing:Asttypes_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//middle_end:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_module(
    name   = "Matching",
    struct = "matching.ml",
    sig    = "Matching_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Switch", ## (Lambda Switch)
        ":Printlambda", ## (Lambda Printlambda)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
        "//typing:Typeopt",
        "//typing:Typedtree",
        ## (Printpat)
        "//stdlib:Stdlib.Printf",
        "//typing:Primitive",
        "//typing:Predef",
        ## (Patterns)
        "//typing:Parmatch",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lazy",
        "//typing:Ident",
        ## (Head)
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//utils:Clflags",
        "//stdlib:Stdlib.Char",
        "//typing:Btype",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ],
    visibility = ["//bytecomp:__pkg__"]
)

bootstrap_signature(
    name = "Matching_cmi",
    src  = "matching.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        "//parsing:Location",
        "//typing:Ident",
    ]
)

bootstrap_module(
    name   = "Printlambda",
    struct = "printlambda.ml",
    sig    = "Printlambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
        "//stdlib:Stdlib.String",
        "//typing:Printtyp",
        "//stdlib:Stdlib.Printf",
        "//typing:Primitive",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//utils:Clflags",
        "//parsing:Asttypes_cmi",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//middle_end:__pkg__",
        "//middle_end/flambda:__pkg__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_signature(
    name = "Printlambda_cmi",
    src  = "printlambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
        "//stdlib:Stdlib.Format",
    ]
)

## root Makefile:
# lambda/runtimedef.ml: lambda/generate_runtimedef.sh runtime/caml/fail.h \
#     runtime/primitives
# 	$^ > $@
bootstrap_module(
    name   = "Runtimedef",
    struct = "runtimedef.ml",
    sig    = "Runtimedef_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//toplevel:__pkg__",
    ]
)

genrule(
    name = "runtimedef_ml",
    outs = ["runtimedef.ml"],
    srcs = [
        "generate_runtimedef.sh",
        "//runtime/caml:fail.h",
        "//runtime:primitives"
    ],
    cmd = " ".join([
        "$(location :generate_runtimedef.sh)",
        "$(location //runtime/caml:fail.h)",
        "$(location //runtime:primitives)",
        " > $@"
    ]),
    visibility = ["//visibility:public"]
)

bootstrap_signature(
    name = "Runtimedef_cmi",
    src  = "runtimedef.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"],
)

bootstrap_module(
    name   = "Simplif",
    struct = "simplif.ml",
    sig    = "Simplif_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ":Tmc",
        "//utils:Warnings",
        "//typing:Primitive",
        "//stdlib:Stdlib.Option",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Int",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Fun",
        "//utils:Clflags",
        "//parsing:Asttypes_cmi",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//middle_end:__subpackages__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_signature(
    name = "Simplif_cmi",
    src  = "simplif.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Ident",
    ]
)

bootstrap_module(
    name   = "Switch",
    struct = "switch.ml",
    sig    = "Switch_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Map",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Array",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//middle_end:__subpackages__"
     ]
)

bootstrap_signature(
    name = "Switch_cmi",
    src  = "switch.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ],
    visibility = ["//middle_end/flambda:__pkg__"]
)

bootstrap_module(
    name   = "Tmc",
    struct = "tmc.ml",
    sig    = "Tmc_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda"
    ],
)

bootstrap_signature(
    name = "Tmc_cmi",
    src  = "tmc.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda_cmi",
    ],
)

bootstrap_module(
    name   = "Translattribute",
    struct = "translattribute.ml",
    sig    = "Translattribute_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.String",
        "//typing:Typedtree",
        "//utils:Config",
        "//utils:Misc",
        "//utils:Warnings",
        ":Debuginfo",
        ":Lambda",
    ]
)

bootstrap_signature(
    name = "Translattribute_cmi",
    src  = "translattribute.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        "//parsing:Parsetree_cmi",
        "//parsing:Location",
    ]
)

bootstrap_module(
    name   = "Translclass",
    struct = "translclass.ml",
    sig    = "Translclass_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Translobj", ## (Lambda Translobj)
        ":Translcore", ## (Lambda Translcore)
        ":Matching", ## (Lambda Matching)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
        ## (Typeopt)
        "//typing:Typedtree",
        "//stdlib:Stdlib.String",
        "//typing:Path",
        "//stdlib:Stdlib.Obj",
        ## (Meths)
        ## (MethSet)
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//utils:Clflags",
        ## (CamlinternalOO)
        "//typing:Btype",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_signature(
    name = "Translclass_cmi",
    src  = "translclass.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
         "//typing:Typedtree_cmi",
        "//parsing:Location",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Translcore",
    struct = "translcore.ml",
    sig    = "Translcore_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Translprim", ## (Lambda Translprim)
        ":Translobj", ## (Lambda Translobj)
        ":Translattribute", ## (Lambda Translattribute)
        ":Matching", ## (Lambda Matching)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
        ## (Typeopt)
        "//typing:Typedtree",
        "//typing:Typecore",
        "//typing:Printtyp",
        "//stdlib:Stdlib.Printf",
        "//typing:Primitive",
        "//typing:Predef",
        "//typing:Path",
        "//parsing:Parsetree_cmi",
        ## (Parmatch)
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//utils:Config",
        "//utils:Clflags",
        "//typing:Btype",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ]
)

bootstrap_signature(
    name = "Translcore_cmi",
    src  = "translcore.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        "//typing:Path",
        "//parsing:Location",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_module(
    name   = "Translmod",
    struct = "translmod.ml",
    sig    = "Translmod_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Translprim", ## (Lambda Translprim)
        ":Translobj", ## (Lambda Translobj)
        ":Translcore", ## (Lambda Translcore)
        ":Translclass", ## (Lambda Translclass)
        ":Translattribute", ## (Lambda Translattribute)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
        "//typing:Typedtree",
        "//stdlib:Stdlib.Result",
        "//typing:Primitive",
        "//typing:Predef",
        "//typing:Path",
        "//stdlib:Stdlib.Option",
        ## (Mtype)
        "//utils:Misc",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//typing:Ctype",
        "//utils:Clflags",
        "//parsing:Asttypes_cmi",
        "//stdlib:Stdlib.Array",
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//driver:__pkg__",
        "//toplevel:__pkg__",
    ]
)

bootstrap_signature(
    name = "Translmod_cmi",
    src  = "translmod.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        "//typing:Primitive",
        "//parsing:Location",
        "//typing:Ident",
    ]
)

bootstrap_module(
    name   = "Translobj",
    struct = "translobj.ml",
    sig    = "Translobj_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Primitive",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//typing:Env",
        "//utils:Config",
        "//utils:Clflags",
        "//typing:Btype",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_signature(
    name = "Translobj_cmi",
    src  = "translobj.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Ident",
        "//typing:Env",
    ]
)

bootstrap_module(
    name   = "Translprim",
    struct = "translprim.ml",
    sig    = "Translprim_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Matching", ## (Lambda Matching)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
        ## (Typeopt)
        "//typing:Typedtree",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//typing:Primitive",
        "//typing:Predef",
        "//typing:Path",
        "//utils:Misc",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//typing:Env",
        "//utils:Config",
        "//utils:Clflags",
        "//parsing:Asttypes_cmi",
    ]
)

bootstrap_signature(
    name = "Translprim_cmi",
    src  = "translprim.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types",
         "//typing:Typedtree_cmi",
        "//typing:Primitive",
        "//typing:Path",
        "//parsing:Location",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
    ]
)

