load("//bzl:rules.bzl",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

load("//config:BUILD.bzl",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS"
     )

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS    = ROOT_MODULE_OPTS

STDLIB = ["//stdlib"]

bootstrap_library(
    name = "lambda",
    manifest  = [
        ":Debuginfo",
        ":Lambda",
        ":Matching",
        ":Printlambda",
        ":Runtimedef",
        ":Simplif",
        ":Switch",
        ":Translattribute",
        ":Translclass",
        ":Translcore",
        ":Translmod",
        ":Translobj",
        ":Translprim",
    ],
)

bootstrap_module(
    name   = "Debuginfo",
    struct = "debuginfo.ml",
    sig    = "Debuginfo_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ## (String)
        ## (Printf)
        ## (Location)
        ## (List)
        ## (Lexing)
        "//utils:Int_replace_polymorphic_compare"
        ## (Ident)
        ## (Hashtbl)
        ## (Format)
        ## (Asttypes)
    ],
    visibility = [
        "//middle_end:__pkg__",
        "//asmcomp:__pkg__"
    ]
)

bootstrap_signature(
    name = "Debuginfo_cmi",
    src  = "debuginfo.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ## (Location)
        "//typing:Ident_cmi",
        ## (Format)
        "//parsing:Asttypes_cmi"
    ],
    visibility = ["//middle_end:__pkg__"]
)

bootstrap_module(
    name   = "Lambda",
    struct = "lambda.ml",
    sig    = "Lambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        ## (Primitive)
        ## (Path)
        ## (Option)
        ## (Misc)
        ## (Longident)
        ## (List)
        ## (Ident)
        ## (Env)
        ## (Clflags)
        ## (Asttypes)
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//file_formats:__pkg__",
        "//middle_end:__pkg__",
        "//middle_end/flambda/base_types:__pkg__"
    ]
)

bootstrap_signature(
    name = "Lambda_cmi",
    src  = "lambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Types_cmi",
        ## (Primitive)
        ## (Path)
        ## (Ident)
        "//typing:Env_cmi"
        ## (Asttypes)
    ],
    visibility = [
        "//asmcomp:__pkg__",
        "//bytecomp:__pkg__",
        "//middle_end:__pkg__",
        "//typing:__pkg__"
    ]
)

bootstrap_module(
    name   = "Matching",
    struct = "matching.ml",
    sig    = "Matching_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Switch", ## (Lambda Switch)
        ":Printlambda", ## (Lambda Printlambda)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        "//typing:Typeopt",
        ## (Typedtree)
        ## (Printpat)
        ## (Printf)
        ## (Primitive)
        ## (Predef)
        ## (Patterns)
        "//typing:Parmatch",
        ## (Option)
        ## (Obj)
        ## (Misc)
        ## (Longident)
        ## (Location)
        ## (List)
        ## (Lazy)
        ## (Ident)
        ## (Head)
        ## (Hashtbl)
        ## (Format)
        ## (Env)
        ## (Clflags)
        ## (Char)
        ## (Btype)
        ## (Asttypes)
        ## (Array)
    ],
    visibility = ["//bytecomp:__pkg__"]
)

bootstrap_signature(
    name = "Matching_cmi",
    src  = "matching.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        ## (Location)
        ## (Ident)
    ]
)

bootstrap_module(
    name   = "Printlambda",
    struct = "printlambda.ml",
    sig    = "Printlambda_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        ## (String)
        "//typing:Printtyp"
        ## (Printf)
        ## (Primitive)
        ## (Location)
        ## (List)
        ## (Lexing)
        ## (Ident)
        ## (Format)
        ## (Clflags)
        ## (Asttypes)
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//middle_end:__pkg__"
    ]
)

bootstrap_signature(
    name = "Printlambda_cmi",
    src  = "printlambda.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        ## (Format)
    ]
)

## root Makefile:
# lambda/runtimedef.ml: lambda/generate_runtimedef.sh runtime/caml/fail.h \
#     runtime/primitives
# 	$^ > $@

genrule(
    name = "runtimedef_ml",
    outs = ["runtimedef.ml"],
    srcs = [
        "generate_runtimedef.sh",
        "//runtime/caml:fail.h",
        "//runtime:primitives"
    ],
    cmd = " ".join([
        "$(location :generate_runtimedef.sh)",
        "$(location //runtime/caml:fail.h)",
        "$(location //runtime:primitives)",
        " > $@"
    ]),
)

# ./boot/ocamlrun ./boot/ocamlc -g -nostdlib -I boot -use-prims runtime/primitives -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48-66-70 -warn-error +a -bin-annot -safe-string -strict-formats -I utils -I parsing -I typing -I bytecomp -I file_formats -I lambda -I middle_end -I middle_end/closure -I middle_end/flambda -I middle_end/flambda/base_types -I asmcomp -I driver -I toplevel -c lambda/runtimedef.ml -I lambda

bootstrap_module(
    name   = "Runtimedef",
    struct = "runtimedef.ml",
    sig    = "Runtimedef_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"],
    visibility = ["//bytecomp:__pkg__"]
)

bootstrap_signature(
    name = "Runtimedef_cmi",
    src  = "runtimedef.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ],
    data = ["//runtime:primitives"],
)

bootstrap_module(
    name   = "Simplif",
    struct = "simplif.ml",
    sig    = "Simplif_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Warnings)
        ## (Primitive)
        ## (Option)
        ## (Location)
        ## (List)
        ## (Int)
        ## (Ident)
        ## (Hashtbl)
        ## (Fun)
        ## (Clflags)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Simplif_cmi",
    src  = "simplif.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Ident)
    ]
)

bootstrap_module(
    name   = "Switch",
    struct = "switch.ml",
    sig    = "Switch_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ## (Printf)
        ## (Map)
        ## (List)
        ## (Hashtbl)
        ## (Array)
    ],
    visibility = ["//bytecomp:__pkg__"]
)

bootstrap_signature(
    name = "Switch_cmi",
    src  = "switch.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
    ]
)

bootstrap_module(
    name   = "Translattribute",
    struct = "translattribute.ml",
    sig    = "Translattribute_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Warnings)
        ## (Typedtree)
        ## (String)
        ## (Result)
        ## (Printf)
        ## (Parsetree)
        ## (Option)
        ## (Misc)
        ## (Longident)
        ## (Location)
        ## (List)
        ## (Config)
    ]
)

bootstrap_signature(
    name = "Translattribute_cmi",
    src  = "translattribute.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        ## (Parsetree)
        ## (Location)
    ]
)

bootstrap_module(
    name   = "Translclass",
    struct = "translclass.ml",
    sig    = "Translclass_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Translobj", ## (Lambda Translobj)
        ":Translcore", ## (Lambda Translcore)
        ":Matching", ## (Lambda Matching)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        ## (Typeopt)
        ## (Typedtree)
        ## (String)
        ## (Path)
        ## (Obj)
        ## (Meths)
        ## (MethSet)
        ## (Location)
        ## (List)
        ## (Ident)
        ## (Format)
        ## (Env)
        ## (Clflags)
        ## (CamlinternalOO)
        ## (Btype)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Translclass_cmi",
    src  = "translclass.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
         "//typing:Typedtree_cmi",
        ## (Location)
        ## (Ident)
        ## (Format)
        ## (Asttypes)
    ]
)

bootstrap_module(
    name   = "Translcore",
    struct = "translcore.ml",
    sig    = "Translcore_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Translprim", ## (Lambda Translprim)
        ":Translobj", ## (Lambda Translobj)
        ":Translattribute", ## (Lambda Translattribute)
        ":Matching", ## (Lambda Matching)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        ## (Typeopt)
        ## (Typedtree)
        "//typing:Typecore",
        ## (Printtyp)
        ## (Printf)
        ## (Primitive)
        ## (Predef)
        ## (Path)
        ## (Parsetree)
        ## (Parmatch)
        ## (Option)
        ## (Obj)
        ## (Misc)
        ## (Longident)
        ## (Location)
        ## (List)
        ## (Ident)
        ## (Format)
        ## (Env)
        ## (Config)
        ## (Clflags)
        ## (Btype)
        ## (Asttypes)
        ## (Array)
    ]
)

bootstrap_signature(
    name = "Translcore_cmi",
    src  = "translcore.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        ## (Path)
        ## (Location)
        ## (Ident)
        ## (Format)
        ## (Env)
        ## (Asttypes)
    ]
)

bootstrap_module(
    name   = "Translmod",
    struct = "translmod.ml",
    sig    = "Translmod_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Translprim", ## (Lambda Translprim)
        ":Translobj", ## (Lambda Translobj)
        ":Translcore", ## (Lambda Translcore)
        ":Translclass", ## (Lambda Translclass)
        ":Translattribute", ## (Lambda Translattribute)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        ## (Typedtree)
        ## (Result)
        ## (Primitive)
        ## (Predef)
        ## (Path)
        ## (Option)
        ## (Mtype)
        ## (Misc)
        ## (Location)
        ## (List)
        ## (Ident)
        ## (Format)
        ## (Env)
        ## (Ctype)
        ## (Clflags)
        ## (Asttypes)
        ## (Array)
    ],
    visibility = ["//bytecomp:__pkg__"]
)

bootstrap_signature(
    name = "Translmod_cmi",
    src  = "translmod.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        "//typing:Typedtree_cmi",
        ## (Primitive)
        ## (Location)
        ## (Ident)
    ]
)

bootstrap_module(
    name   = "Translobj",
    struct = "translobj.ml",
    sig    = "Translobj_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Primitive)
        ## (Misc)
        ## (List)
        ## (Ident)
        ## (Hashtbl)
        ## (Env)
        ## (Config)
        ## (Clflags)
        ## (Btype)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Translobj_cmi",
    src  = "translobj.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Ident)
        ## (Env)
    ]
)

bootstrap_module(
    name   = "Translprim",
    struct = "translprim.ml",
    sig    = "Translprim_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Matching", ## (Lambda Matching)
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
        ## (Typeopt)
        ## (Typedtree)
        ## (String)
        ## (Printf)
        ## (Primitive)
        ## (Predef)
        ## (Path)
        ## (Misc)
        ## (Location)
        ## (List)
        ## (Lexing)
        ## (Ident)
        ## (Hashtbl)
        ## (Format)
        ## (Filename)
        ## (Env)
        ## (Config)
        ## (Clflags)
        ## (Asttypes)
    ]
)

bootstrap_signature(
    name = "Translprim_cmi",
    src  = "translprim.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Lambda", ## (Lambda Lambda)
        ":Debuginfo", ## (Lambda Debuginfo)
        ## (Types)
         "//typing:Typedtree_cmi",
        ## (Primitive)
        ## (Path)
        ## (Location)
        ## (Ident)
        ## (Format)
        ## (Env)
    ]
)

