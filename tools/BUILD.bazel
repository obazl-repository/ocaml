package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_setting")

load("//bzl:rules.bzl",
     "compiler_module",
     "compiler_signature",
)
load(":TOOL_RULES.bzl",
     "ocaml_tools",  ## macro
     "tool_module",
     "tool_signature"
)

load(":TOOL_RUNNERS.bzl",
     "run_tool",
     "run_ocamldep"
)
# load("//lex:BUILD_RULES.bzl", "run_ocamllex")

load("//bzl/rules:COMPILER.bzl",
     "OCAMLC_PROLOGUE",
     "OCAML_COMPILER_OPTS")

exports_files([
    "check-parser-uptodate-or-warn.sh",
])

load("//config:WARNINGS.bzl", "w")

## for the sh_binary targets:
# label_flag(name = "arg", build_setting_default = "BUILD.bazel")

bool_flag(name = "verbose", build_setting_default = False,
          visibility = ["//visibility:public"])

config_setting(name = "verbose?", flag_values = {":verbose": "True"})

# programs_byte := \
#   ocamldep ocamlprof ocamlcp ocamloptp ocamlmklib  \
#   ocamlmktop ocamlcmt dumpobj ocamlobjinfo \
#   primreq stripdebug cmpbyt
# $(programs_byte:%=%$(EXE)):
# 	$(CAMLC) $(LINKFLAGS) -I $(ROOTDIR) -o $@ $(filter-out %.cmi,$^)

## OBazl divides these into two classes: build tools and ocaml tools.
## The former are used only to build the compiler and tools, or for
## use by compiler engineers; the latter are utilities designed for users.

################################################################
# ocamldep, the dependency generator

# OCAMLDEP = \
#   $(ROOTDIR)/compilerlibs/ocamlcommon.cma \
#   $(ROOTDIR)/compilerlibs/ocamlbytecomp.cma \
#   ocamldep.cmo depend.cmi
# ocamldep$(EXE): LINKFLAGS += -compat-32
# ocamldep$(EXE): $(OCAMLDEP)
# ocamldep.opt$(EXE): $(call byte2native, $(OCAMLDEP))

alias(name = "ocamldep.sh", actual = ":ocamldep.opt.sh")
run_ocamldep(
    name = "ocamldep.byte.sh",
    tool = ":ocamldep.byte"
)
run_ocamldep(
    name = "ocamldep.opt.sh",
    tool = ":ocamldep.opt"
)

alias(name = "ocamldep", actual = ":ocamldep.opt")
ocaml_tools( # expands to targets ocamldep.byte, ocamldep.opt
    name     = "ocamldep",
    prologue = OCAMLC_PROLOGUE,
    main     = ":Ocamldep",
    opts     = OCAML_COMPILER_OPTS ##  + ["-verbose", "-ccopt", "-Wl,-v"],
    tags     = ["tool"]
)

tool_module(
    name   = "Ocamldep",
    struct = "ocamldep.ml",
    # opts = ["-verbose", "-ccopt", "-verbose"],
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//driver:Makedepend"
    ],
)

################################################################
# Profiling: https://ocaml.org/manual/profil.html
# The OCaml profiling compilers: ocamlcp, ocamloptp, ocamlprof

# Before profiling an execution, the program must be compiled in
# profiling mode, using the ocamlcp front-end to the ocamlc compiler
# (see chapter 11) or the ocamloptp front-end to the ocamlopt
# compiler.

## Profiling modules built here; executable targets in //bin
compiler_module(
    name   = "Ocamlcp",
    struct = "ocamlcp.ml",
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//driver:Compenv",
        "//driver:Main_args",
        ":Ocamlcp_common"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

compiler_module(
    name   = "Ocamloptp",
    struct = "ocamloptp.ml",
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//driver:Compenv",
        "//driver:Main_args",
        ":Ocamlcp_common"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

compiler_module(
    name   = "Ocamlcp_common",
    struct = "ocamlcp_common.ml",
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//driver:Main_args",
    ],
    stdlib_deps = [
        "//stdlib:Primitives"
    ],
)

####################
# The ocamlprof command produces a source listing of the program
# modules where execution counts have been inserted as comments. For
# instance,
#        ocamlprof foo.ml
# prints the source code for the foo module, with comments indicating
# how many times the functions in this module have been called.

##TODO: run_ocamlprof
alias(name = "ocamlprof", actual = ":ocamlprof.opt")
ocaml_tools( # expands to tgts ocamlprof.byte, ocamlprof.opt
    name         = "ocamlprof",
    prologue     = select({
        "//config/ocaml/compiler/libs:archived?": ["//stdlib"],
        "//conditions:default": []
    }) + [
        "//config:Config",
        "//utils:Build_path_prefix_map",
        "//utils:Misc",
        "//utils:Identifiable",
        "//utils:Numbers",
        "//utils:Arg_helper",
        "//utils:Clflags",
        "//utils:Terminfo",
        "//utils:Warnings",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Docstrings",
        "//parsing:Syntaxerr",
        "//parsing:Ast_helper",
        "//parsing:CamlinternalMenhirLib",
        "//parsing:Parser",
        "//parsing:Pprintast",
        "//parsing:Lexer",
        "//parsing:Parse",
    ],
    main         = ":Ocamlprof",
    # warnings   = ["$(WARNINGS)"],
    # use_prims  = True,
    # toolchains = ["//toolchain/profile/ocaml"]
    opts         = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

tool_module(
    name   = "Ocamlprof",
    struct = "ocamlprof.ml",
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//parsing:Location",
        "//parsing:Parse",
        "//utils:Warnings",
    ],
    # "//parsing:Parsetree_cmi",
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

compiler_module(
    name   = "Profiling",
    struct = "profiling.ml",
    sig    = "Profiling_cmi",
    stdlib_deps   = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Sys",
    ],
)

compiler_signature(
    name = "Profiling_cmi",
    src  = "profiling.mli",
    deps   = [
    ],
)

################################################################
# To help building mixed-mode libraries (OCaml + C)
# NB: not needed with Bazel
alias(name = "ocamlmklib", actual = ":ocamlmklib.opt")
ocaml_tools( # expands to tgts ocamlmklib.byte, ocamlmklib.opt
    name     = "ocamlmklib",
    main     = ":Ocamlmklib",
    prologue = select({
        "//config/ocaml/compiler/libs:archived?": ["//stdlib"],
        "//conditions:default": []
    }) + [
        "//config:Config",
        "//utils:Build_path_prefix_map",
        "//utils:Misc",
    ],
    opts     = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name   = "Ocamlmklib",
    struct = "ocamlmklib.ml",
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//config:Config",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Stack",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

################################################################
# To make custom toplevels
# OCAMLMKTOP=config.cmo build_path_prefix_map.cmo misc.cmo \
#        identifiable.cmo numbers.cmo arg_helper.cmo clflags.cmo \
#        local_store.cmo load_path.cmo profile.cmo ccomp.cmo ocamlmktop.cmo
# ocamlmktop$(EXE): $(OCAMLMKTOP)
# ocamlmktop.opt$(EXE): $(call byte2native, $(OCAMLMKTOP))
alias(name = "ocamlmktop", actual = ":ocamlmktop.opt")
ocaml_tools(
    name     = "ocamlmktop",
    main     = ":Ocamlmktop",
    prologue = select({
        "//config/ocaml/compiler/libs:archived?": ["//stdlib"],
        "//conditions:default": []
    }) + [
        "//config:Config",
        "//utils:Build_path_prefix_map",
        "//utils:Misc",
        "//utils:Identifiable",
        "//utils:Numbers",
        "//utils:Arg_helper",
        "//utils:Clflags",
        "//utils:Local_store",
        "//utils:Load_path",
        "//utils:Profile",
        "//utils:Ccomp",
    ],
    opts     = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name   = "Ocamlmktop",
    struct = "ocamlmktop.ml",
    warnings = [w.MISSING_MLI_70],
    deps   = [
        "//config:Config",
        "//utils:Ccomp",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Sys",
    ],
    opts = OCAML_COMPILER_OPTS
)

## cvt_emit build targets moved to //asmcomp

################################################################
# ocamlcmt:  reading cmt files
alias(name = "ocamlcmt", actual = ":ocamlcmt.opt")
ocaml_tools( # expands to ocamlcmt.byte, ocamlcmt.opt
    name        = "ocamlcmt",
    prologue    = OCAMLC_PROLOGUE,
    main        = ":Ocamlcmt",
    opts        = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name        = "Ocamlcmt",
    struct      = "ocamlcmt.ml",
    warnings    = [w.MISSING_MLI_70],
    deps        = [
        "//driver:Compmisc",
        "//file_formats:Cmt_format",
        "//parsing:Location",
        "//parsing:Pprintast",
        "//typing:Cmt2annot",
        "//typing:Envaux",
        "//typing:Stypes",
        "//typing:Untypeast",
        "//utils:Clflags",
        "//utils:Load_path",
        # "//typing:Annot_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ]
)

################################################################
# dumpobj: the bytecode disassembler
# DUMPOBJ= \
#           $(ROOTDIR)/compilerlibs/ocamlcommon.cma \
#           $(ROOTDIR)/compilerlibs/ocamlbytecomp.cma \
#           opnames.cmo dumpobj.cmo
# dumpobj$(EXE): $(DUMPOBJ)
# dumpobj.opt$(EXE): $(call byte2native, $(DUMPOBJ))

alias(name = "dumpobj", actual = ":dumpobj.opt")
ocaml_tools(
    name        = "dumpobj",
    prologue    = OCAMLC_PROLOGUE + ["//bytecomp:Opnames"],
    main        = ":Dumpobj",
    opts        = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name        = "Dumpobj",
    struct      = "dumpobj.ml",
    deps        = [
        "//bytecomp:Bytesections",
        "//bytecomp:Instruct",
        "//bytecomp:Opcodes",
        "//bytecomp:Opnames",
        "//bytecomp:Symtable",
        "//config:Config",
        "//parsing:Location",
        "//typing:Ident",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

################################################################
## ocamlobjinfo - Display info on compiled files
alias(name = "lso.byte", actual = ":ocamlobjinfo.byte")
alias(name = "lso.opt", actual = ":ocamlobjinfo.opt")
alias(name = "lso", actual = ":ocamlobjinfo.opt.sh")
# alias(name = "ocamlobjinfo", actual = ":ocamlobjinfo.opt")
run_tool(
    name = "ocamlobjinfo.opt.sh",
    tool = "@dev//bin:ocamlobjinfo.opt",
    arg  = "//:arg",
)

ocaml_tools(
    name        = "ocamlobjinfo",
    prologue    = OCAMLC_PROLOGUE + ["//middle_end:ocamlmiddleend"],
    main        = ":Objinfo",
    opts        = ["-linkall"] + OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name        = "Objinfo",
    struct      = "objinfo.ml",
    warnings    = [w.MISSING_MLI_70],
    deps        = [
        "//bytecomp:Bytesections",
        "//bytecomp:Symtable",
        "//middle_end/flambda:Export_info",
        "//middle_end:Compilation_unit",
        "//middle_end:Linkage_name",
        "//middle_end:Printclambda",
        "//middle_end:Symbol",
        "//typing:Ident",
        "//utils:Binutils",
        "//utils:Misc",
    ],
    sig_deps    = [
        "//file_formats:Cmi_format_cmi",
        "//file_formats:Cmo_format_cmi",
        "//file_formats:Cmt_format_cmi",
        "//file_formats:Cmx_format_cmi",
        "//file_formats:Cmxs_format_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ]
)

################################################################
# # Scan object files for required primitives
# PRIMREQ=$(ROOTDIR)/compilerlibs/ocamlcommon.cma \
#         $(ROOTDIR)/compilerlibs/ocamlbytecomp.cma \
#         primreq.cmo
# primreq$(EXE): $(PRIMREQ)
# primreq.opt$(EXE): $(call byte2native, $(PRIMREQ))
alias(name = "primreq", actual = ":primreq.opt")
ocaml_tools(
    name        = "primreq",
    prologue    = OCAMLC_PROLOGUE,
    main        = ":Primreq",
    opts        = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name        = "Primreq",
    struct      = "primreq.ml",
    warnings    = [w.MISSING_MLI_70],
    deps        = [
        "//config:Config",
        "//utils:Misc",
    ],
    sig_deps    = ["//file_formats:Cmo_format_cmi"],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.List",
    ]
)

################
# Copy a bytecode executable, stripping debug info
ocaml_tools(
    name     = "stripdebug",
    prologue = OCAMLC_PROLOGUE,
    main     = ":Stripdebug",
    opts     = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

# ../boot/ocamlrun ../boot/ocamlc
compiler_module(
    name        = "Stripdebug",
    struct      = "stripdebug.ml",
    warnings    = [w.MISSING_MLI_70],
    deps        = [
        "//bytecomp:Bytesections",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ]
)

################################################################
# LINTAPIDIFF=$(ROOTDIR)/compilerlibs/ocamlcommon.cmxa \
#         $(ROOTDIR)/compilerlibs/ocamlbytecomp.cmxa \
#         $(ROOTDIR)/compilerlibs/ocamlmiddleend.cmxa \
#         $(ROOTDIR)/otherlibs/str/str.cmxa \
#         lintapidiff.cmx

# lintapidiff.opt$(EXE): INCLUDES+= -I $(ROOTDIR)/otherlibs/str
# lintapidiff.opt$(EXE): $(LINTAPIDIFF)
# 	$(CAMLOPT_CMD) $(LINKFLAGS) -I $(ROOTDIR) -o $@ $(LINTAPIDIFF)
################################################################
ocaml_tools(
    name     = "lintapidiff",
    prologue = OCAMLC_PROLOGUE + [
        "//middle_end:ocamlmiddleend",
        "//otherlibs/str"
    ],
    main     = ":Lintapidiff",
    opts     = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name        = "Lintapidiff",
    struct      = "lintapidiff.ml",
    deps        = [
        "//driver:Pparse",
        "//otherlibs/str:Str",
        "//parsing:Location",
        "//parsing:Parse",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Printtyp",
        "//utils:Misc",
    ],
    sig_deps    = ["//parsing:Parsetree_cmi"],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Result",
        "//stdlib:Stdlib.Scanf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

################
# checkstack tool
# checkstack$(EXE): checkstack.$(O)
# 	$(MKEXE) $(OUTPUTEXE)$@ $<
OPTIMIZATION_FLAGS = select({
    "//config/compilation_mode:dbg?": ["-O0", "-g3"], # -Wall -Werror
    "//conditions:default": []
})

cc_binary(
    name = "checkstack",
    # linkstatic = True,
    srcs = [
        "checkstack.c"
    ],
    copts = [
        # zig: warning: '-x c' after last input file has no effect [-Wunused-command-line-argument]
        # "-x", "c",
    ] + select({
        "//platform/os:macos?": ["-std=c11"],
        "//platform/os:linux?": ["-std=c11"],
        "//conditions:default": ["-std=c11"]
    }) + select({
        "//config:macos_fastbuild?": ["-UDEBUG"], # macos/bazel
        "//conditions:default":  []
    }) + select({
        # mac zig: ["-Wno-deprecated-non-prototype"],
        "//conditions:default":  []
    # }) + select({
    #     ":INSTR_TRACE?": ["-DINSTR_TRACE"],
    #     "//conditions:default":  []
    }) + OPTIMIZATION_FLAGS,
    linkopts = select({
        "//platform/target/os:linux?": ["-lm", "-ldl", "-lpthread"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"],
)

################
#Scan latex files, and run ocaml code examples
# caml_tex_files := \
#   $(ROOTDIR)/compilerlibs/ocamlcommon.cma \
#   $(ROOTDIR)/compilerlibs/ocamlbytecomp.cma \
#   $(ROOTDIR)/compilerlibs/ocamltoplevel.cma \
#   $(ROOTDIR)/otherlibs/str/str.cma \
#   $(ROOTDIR)/otherlibs/$(UNIXLIB)/unix.cma \
#   caml_tex.ml
# caml_tex := caml-tex$(EXE)
# caml-tex uses str.cma and unix.cma and so must be compiled with
# $(ROOTDIR)/ocamlc not $(ROOTDIR)/boot/ocamlc since the boot
# compiler does not necessarily have the correct shared library
# configuration.
# $(caml_tex): INCLUDES += $(addprefix -I $(ROOTDIR)/otherlibs/,str $(UNIXLIB))
# $(caml_tex): $(caml_tex_files)
# 	$(OCAMLRUN) $(ROOTDIR)/ocamlc$(EXE) -nostdlib -I $(ROOTDIR)/stdlib \
# 	  $(LINKFLAGS) -linkall -o $@ -no-alias-deps $^
# # we need str and unix which depend on the bytecode version of other tools
# # thus we delay building caml-tex to the opt.opt stage
# ifneq "$(WITH_CAMLTEX)" ""
# opt.opt: $(caml_tex)
# endif

# compiler_module(
#     name   = "Caml_tex",
#     struct = "caml_tex.ml",
#     deps   = [
#         "//driver:Compenv",
#         "//driver:Compmisc",
#         "//otherlibs/str:Str",
#         "//parsing:Ast_helper",
#         "//parsing:Ast_iterator",
#         "//parsing:Lexer",
#         "//parsing:Location",
#         "//parsing:Parse",
#         "//parsing:Parsetree_cmi",
#         "//parsing:Syntaxerr",
#         "//stdlib:Stdlib.Arg",
#         "//stdlib:Stdlib.Buffer",
#         "//stdlib:Stdlib.Bytes",
#         "//stdlib:Stdlib.Filename",
#         "//stdlib:Stdlib.Format",
#         "//stdlib:Stdlib.Lexing",
#         "//stdlib:Stdlib.List",
#         "//stdlib:Stdlib.Printexc",
#         "//stdlib:Stdlib.StdLabels",
#         "//stdlib:Stdlib.String",
#         "//stdlib:Stdlib.Sys",
#         "//toplevel:Toploop",
#         "//utils:Clflags",
#         "//utils:Misc",
#         ## (Unix)
#         #### (Mtd)
#         #### (Mty)
#     ],
# )

################################################################
# eqparsetree.ml", line 66, characters 7-22:
# 66 |     | (Const_string a0, Const_string b0) -> eq_string (a0, b0)
#             ^^^^^^^^^^^^^^^
# Error: The constructor Const_string expects 3 argument(s),
#        but is applied here to 1 argument(s)
# compiler_module(
#     name   = "Eqparsetree",
#     struct = "eqparsetree.ml",
#     deps   = [
#         # "//parsing:Asttypes_cmi",
#         "//parsing:Parsetree_cmi",
#         # "//parsing:Longident",
#         # "//parsing:Location",
#     ],
# # )


################
# Compare two bytecode executables
# CMPBYT=$(ROOTDIR)/compilerlibs/ocamlcommon.cma \
#        $(ROOTDIR)/compilerlibs/ocamlbytecomp.cma \
#        cmpbyt.cmo
# cmpbyt$(EXE): $(CMPBYT)
# cmpbyt.opt$(EXE): $(call byte2native, $(CMPBYT))
ocaml_tools(
    name     = "cmpbyt",
    prologue = OCAMLC_PROLOGUE,
    main     = ":Cmpbyt",
    opts     = OCAML_COMPILER_OPTS,
    tags     = ["tool"]
)

compiler_module(
    name        = "Cmpbyt",
    struct      = "cmpbyt.ml",
    warnings    = [w.MISSING_MLI_70],
    deps        = [
        "//bytecomp:Bytesections",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ]
)

################################################################
## root Makefile: The numeric opcodes
# make_opcodes := tools/make_opcodes$(EXE)
# bytecomp/opcodes.ml: runtime/caml/instruct.h $(make_opcodes)
# 	$(NEW_OCAMLRUN) $(make_opcodes) -opcodes < $< > $@
# bytecomp/opcodes.mli: bytecomp/opcodes.ml
# 	$(CAMLC) -i $< > $@
# $(make_opcodes): tools/make_opcodes.mll
# 	$(MAKE) -C tools make_opcodes

## tools/Makefile
# CAMLC = $(BOOT_OCAMLC) -g -nostdlib -I $(ROOTDIR)/boot \
#         -use-prims $(ROOTDIR)/runtime/primitives -I $(ROOTDIR)
# make_opcodes := make_opcodes$(EXE)
# $(eval $(call PROGRAM_SYNONYM,make_opcodes))
# $(make_opcodes): make_opcodes.ml
# 	$(CAMLC) $< -o $@

## macos make.log:
# cd stdlib - stdlib includes links to runtime/libcamlrun.a, runtime/libasmrun.a
# ../boot/ocamlrun ../boot/ocamllex -q make_opcodes.mll
## compile and link:
# ../boot/ocamlrun ../boot/ocamlc -nostdlib -I ../boot -g -use-prims ../runtime/primitives -I .. make_opcodes.ml -o make_opcodes
## run:
# ./runtime/ocamlrun tools/make_opcodes -opcodes < runtime/caml/instruct.h > bytecomp/opcodes.ml

## WARNING: make_opcodes replaced by mustache templating,
## see //bytecomp:opcodes_ml, //bytecomp:opnames_ml,
## //runtime/caml:instruct_h, //runtime/caml:jumptbl_h,
## //runtime/caml:opnames_h

# baseline_executable(
#     name = "baseline_opcodes",
#     main = ":Make_opcodes",
#     visibility = ["//bytecomp:__pkg__"]
# )

# build_tool(
#     name = "make_opcodes",
#     data = ["//stdlib:camlheaders"],
#     main = ":Make_opcodes",
#     prologue = [
#         # "//stdlib:Std_exit",
#         "//stdlib"
#     ],
#     visibility = ["//bytecomp:__pkg__"]
# )

# compiler_module(
#     name   = "Make_opcodes",
#     struct = "make_opcodes_ml",
#     nocopts = True,
#     deps = [
#         "//stdlib:Stdlib",
#         "//stdlib:Stdlib.Arg",
#         "//stdlib:Stdlib.Lexing",
#         "//stdlib:Stdlib.Printf",
#     ],
#     opts = ["-nostdlib"],
#     warnings = [w.MISSING_MLI_70]
# )

# run_ocamllex(
#     name = "make_opcodes_ml",
#     src  = "make_opcodes.mll",
#     out  = "make_opcodes.ml",
# )

################################################################
load("@bazel_skylib//rules:build_test.bzl", "build_test")
build_test( ## skylib macro, builds all targets listed
    name = "tools",
    targets = [
        # ":Caml_tex",
        ":cmpbyt",
        # ":dumpobj",   ## sys target only
        # ":Eqparsetree",
        ":ocamlobjinfo",
        ":ocamlcmt",
        ":ocamlcp",
        ":ocamldep",
        ":ocamlmklib",
        ":ocamlmktop",
        ":ocamloptp",
        ":ocamlprof",
        ":primreq",
        ":stripdebug",
    ]
    ## TODO:
    # ] + select({
    #     "//compilers/mode:native": [":Lintapidiff.opt"]
    #     "//conditions:default": []
    # })
)

