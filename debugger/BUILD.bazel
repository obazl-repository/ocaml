load("//vendor/mustach:BUILD_RULES.bzl", "mustache")

load("//bzl:rules.bzl",
     "compiler_library",
     "compiler_module",
)

load("//tools:TOOL_RULES.bzl",
     "ocaml_tools",  ## macro
     "tool_module",
     "tool_signature")

load("//bzl/rules:ns_rules.bzl", "ns_module", "ns_signature")

load("//lex:BUILD_RULES.bzl", "run_ocamllex")


MODULE_OPTS = []
SIG_OPTS    = []


ocaml_tools(
    name = "ocamldebug",
    prologue = [
        "//compilerlibs:ocamlcommon",
        "//otherlibs/unix:unix_lib",
        "//otherlibs/dynlink",
        "//toplevel:Genprintval",
        "//toplevel:Topprinters",
        ":debugger_lib",
    ],
    cc_deps = ["//otherlibs/unix"],
    main = ":Ocamldebug.Ocamldebug_entry",
    opts = select({
        "//config/target/executor:boot_executor?": ["-custom"],
        "//config/target/executor:vm_executor?": ["-custom"],
        "//conditions:default": [],
    }) + [
        "-linkall",
        # "-g",
        # "-no-alias-deps",
        # "-verbose"
    ] + select({
        "//platform/target/os:linux?": [
            "-cclib", "-lm",
            "-cclib", "-ldl",
            "-cclib", "-lpthread",
        ],
        "//conditions:default": []
    }),
    # cc_linkopts = select({
    #     "@platforms//os:macos": [ ## FIXME: default tc, not zig
    #         # "-Wl,-v", # prints config, search paths
    #         # "-Wl,-print_statistics", # -Wl,-v plus timings, mem, etc.
    #         # "-t", # -Wl-v plus logs each file the linker loads.
    #         # "-why_load" # Log why each object file in a static library
    #         #             # is loaded. That is, what symbol was needed.
    #         ## zig linker opts
    #         # "-v",
    #         ],
    #     "@platforms//os:linux": [
    #         # "-Wl,--verbose"
    #         ##FIXME: depends on linker used (bfd, gold, etc.)
    #     ]
    # }),
)

## resolver
## NB: aliases one sig w/o struct: Parser_aux
tool_module(
    name   = "Ocamldebug",
    opts = MODULE_OPTS + [
        "-no-alias-deps",
        "-w", "-49",
        "-nopervasives"
    ],
    struct = "ocamldebug.ml",
)

mustache(
    name = "ocamldebug_ml",
    out  = "ocamldebug.ml",
    json = "ocamldebug.json",
    template = "ocamldebug.ml.mustache",
)

compiler_library(
    name = "debugger_lib",  ## includes resolver Ocamldebug
    cmxa_eligible = True,
    manifest  = [
        ":Ocamldebug",
        ":Ocamldebug.Breakpoints",
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Command_line",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Debugger_lexer",
        ":Ocamldebug.Debugger_parser",
        ":Ocamldebug.Eval",
        ":Ocamldebug.Events",
        ":Ocamldebug.Exec",
        ":Ocamldebug.Frames",
        ":Ocamldebug.History",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Loadprinter",
        ":Ocamldebug.Main",
        # ":Ocamldebug_entry",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Pos",
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Printval",
        ":Ocamldebug.Program_loading",
        ":Ocamldebug.Program_management",
        ":Ocamldebug.Question",
        ":Ocamldebug.Show_information",
        ":Ocamldebug.Show_source",
        ":Ocamldebug.Source",
        ":Ocamldebug.Symbols",
        ":Ocamldebug.Time_travel",
        ":Ocamldebug.Trap_barrier",
        ":Ocamldebug.Unix_tools",
    ],
)

ns_module(
    name   = "Ocamldebug.Breakpoints",
    ns     = ":Ocamldebug",
    struct = "breakpoints.ml",
    sig    = ":Ocamldebug.Breakpoints_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//utils:Misc",
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Events",
        ":Ocamldebug.Exec",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Pos",
        ":Ocamldebug.Symbols",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
    ],
)

ns_signature(
    name = "Ocamldebug.Breakpoints_cmi",
    ns     = ":Ocamldebug",
    src  = "breakpoints.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Debugcom_cmi",
        ":Ocamldebug.Events_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Checkpoints",
    ns     = ":Ocamldebug",
    struct = "checkpoints.ml",
    sig    = ":Ocamldebug.Checkpoints_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Debugcom",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Option",
    ],
)

ns_signature(
    name = "Ocamldebug.Checkpoints_cmi",
    ns     = ":Ocamldebug",
    src  = "checkpoints.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Primitives_cmi",
        ":Ocamldebug.Debugcom_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Command_line",
    ns     = ":Ocamldebug",
    struct = "command_line.ml",
    sig    = ":Ocamldebug.Command_line_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//parsing:Location",
        "//parsing:Longident",
        "//typing:Env",
        "//typing:Types",
        "//utils:Load_path",
        ":Ocamldebug.Breakpoints",
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Debugger_lexer",
        ":Ocamldebug.Debugger_parser",
        ":Ocamldebug.Eval",
        ":Ocamldebug.Events",
        ":Ocamldebug.Frames",
        ":Ocamldebug.History",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Loadprinter",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Pos",
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Printval",
        ":Ocamldebug.Program_loading",
        ":Ocamldebug.Program_management",
        ":Ocamldebug.Question",
        ":Ocamldebug.Show_information",
        ":Ocamldebug.Show_source",
        ":Ocamldebug.Source",
        ":Ocamldebug.Symbols",
        ":Ocamldebug.Time_travel",
        ":Ocamldebug.Unix_tools",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_signature(
    name = "Ocamldebug.Command_line_cmi",
    ns     = ":Ocamldebug",
    src  = "command_line.mli",
    opts = SIG_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Lexing_cmi",
        "//stdlib:Stdlib.Format_cmi",
    ]
)

ns_module(
    name   = "Ocamldebug.Debugcom",
    ns     = ":Ocamldebug",
    struct = "debugcom.ml",
    sig    = ":Ocamldebug.Debugcom_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//utils:Misc",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Primitives",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_signature(
    name = "Ocamldebug.Debugcom_cmi",
    ns     = ":Ocamldebug",
    src  = "debugcom.mli",
    opts = SIG_OPTS,
    deps   = [
        "//bytecomp:Instruct_cmi",
        ":Ocamldebug.Primitives_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Debugger_config",
    ns     = ":Ocamldebug",
    struct = "debugger_config.ml",
    sig    = ":Ocamldebug.Debugger_config_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Int64ops",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Hashtbl",
    ],
)

ns_signature(
    name = "Ocamldebug.Debugger_config_cmi",
    ns     = ":Ocamldebug",
    src  = "debugger_config.mli",
    # stdlib_primitives = True,
    stdlib_deps   = [
        "//stdlib:Stdlib.Hashtbl_cmi",
    ]
)

ns_module(
    name   = "Ocamldebug.Debugger_lexer",
    ns     = ":Ocamldebug",
    struct = "debugger_lexer.ml",
    sig    = ":Ocamldebug.Debugger_lexer_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Parsing",
    ]
)

run_ocamllex(
    name = "Ocamldebug.debugger_lexer_ml",
    src  = "debugger_lexer.mll",
    out  = "debugger_lexer.ml",
)

ns_signature(
    name = "Ocamldebug.Debugger_lexer_cmi",
    ns     = ":Ocamldebug",
    src  = "debugger_lexer.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Debugger_parser_cmi"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Debugger_parser",
    ns     = ":Ocamldebug",
    struct = "debugger_parser.ml",
    sig    = ":Ocamldebug.Debugger_parser_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Input_handling",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Parsing"
    ],
)

ns_signature(
    name = "Ocamldebug.Debugger_parser_cmi",
    ns     = ":Ocamldebug",
    src  = "debugger_parser.mli",
    stdlib_primitives = True,
    deps   = [
        ":Ocamldebug.Parser_aux_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing_cmi"
    ],
)

genrule(
    name = "Ocamldebug.debugger_parser_ml",
    outs = ["debugger_parser.ml", "debugger_parser.mli"],
    srcs = ["debugger_parser.mly",
            "//yacc:ocamlyacc"
            ],
    # tools = ["//yacc:ocamlyacc"],
    cmd   = " ".join([
        # "echo PWD: $$PWD;",
        "$(execpath //yacc:ocamlyacc)",
        "--strict", "-v",
        "$(location debugger_parser.mly) > /dev/null;",
        # "echo `ls -la lex`;",
        "cp debugger/debugger_parser.ml $(RULEDIR)/;",
        "cp debugger/debugger_parser.mli $(RULEDIR)/;"
    ])
)

ns_module(
    name   = "Ocamldebug.Eval",
    ns     = ":Ocamldebug",
    struct = "eval.ml",
    sig    = ":Ocamldebug.Eval_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//bytecomp:Symtable",
        "//parsing:Longident",
        "//typing:Btype",
        "//typing:Ctype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Printtyp",
        "//typing:Types",
        "//utils:Misc",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Events",
        ":Ocamldebug.Frames",
        ":Ocamldebug.Printval",
    ],
        # ":Ocamldebug.Parser_aux_cmi",
    stdlib_deps = [
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
)

ns_signature(
    name = "Ocamldebug.Eval_cmi",
    ns     = ":Ocamldebug",
    src  = "eval.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
        "//typing:Path_cmi",
        "//typing:Types_cmi",
        ":Ocamldebug.Debugcom_cmi",
        ":Ocamldebug.Events_cmi",
        ":Ocamldebug.Parser_aux_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Events",
    ns     = ":Ocamldebug",
    struct = "events.ml",
    sig    = ":Ocamldebug.Events_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//parsing:Location",
    ],
    stdlib_deps = [
        "//stdlib:Primitives",
    ],
)

ns_signature(
    name = "Ocamldebug.Events_cmi",
    ns     = ":Ocamldebug",
    src  = "events.mli",
    opts = SIG_OPTS,
    deps   = [
        "//bytecomp:Instruct_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
        "//stdlib:Stdlib.Lexing_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Exec",
    ns     = ":Ocamldebug",
    struct = "exec.ml",
    sig    = ":Ocamldebug.Exec_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Sys",
    ]
)

ns_signature(
    name = "Ocamldebug.Exec_cmi",
    ns     = ":Ocamldebug",
    src  = "exec.mli",
    opts = ["-nopervasives"]
)

ns_module(
    name   = "Ocamldebug.Frames",
    ns     = ":Ocamldebug",
    struct = "frames.ml",
    sig    = ":Ocamldebug.Frames_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//utils:Misc",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Events",
        ":Ocamldebug.Symbols",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing",
    ],
)

ns_signature(
    name = "Ocamldebug.Frames_cmi",
    ns     = ":Ocamldebug",
    src  = "frames.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Events_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.History",
    ns     = ":Ocamldebug",
    struct = "history.ml",
    sig    = ":Ocamldebug.History_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Primitives",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.List",
    ],
)

ns_signature(
    name = "Ocamldebug.History_cmi",
    ns     = ":Ocamldebug",
    src  = "history.mli",
    opts = ["-nopervasives"]
)

ns_module(
    name   = "Ocamldebug.Input_handling",
    ns     = ":Ocamldebug",
    struct = "input_handling.ml",
    sig    = ":Ocamldebug.Input_handling_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Primitives",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.List",
    ],
)

ns_signature(
    name = "Ocamldebug.Input_handling_cmi",
    ns     = ":Ocamldebug",
    src  = "input_handling.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Primitives_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Int64ops",
    ns     = ":Ocamldebug",
    struct = "int64ops.ml",
    sig    = ":Ocamldebug.Int64ops_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Int64",
    ]
)

ns_signature(
    name = "Ocamldebug.Int64ops_cmi",
    ns     = ":Ocamldebug",
    src  = "int64ops.mli",
    opts = SIG_OPTS,
    stdlib_primitives = True,
)

ns_module(
    name   = "Ocamldebug.Loadprinter",
    ns     = ":Ocamldebug",
    struct = "loadprinter.ml",
    sig    = ":Ocamldebug.Loadprinter_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Symtable",
        "//parsing:Longident",
        "//toplevel:Topprinters",
        "//typing:Ctype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Printtyp",
        "//typing:Types",
        "//utils:Load_path",
        "//utils:Misc",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Printval",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.String",
    ],
)

ns_signature(
    name = "Ocamldebug.Loadprinter_cmi",
    ns   = ":Ocamldebug",
    src  = "loadprinter.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident_cmi",
        "//otherlibs/dynlink:Dynlink_cmi"
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Main",
    ns     = ":Ocamldebug",
    struct = "main.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//config:Config",
        "//file_formats:Cmi_format",
        "//typing:Persistent_env",
        "//utils:Clflags",
        "//utils:Load_path",
        "//utils:Misc",
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Command_line",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Exec",
        ":Ocamldebug.Frames",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Loadprinter",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Program_management",
        ":Ocamldebug.Question",
        ":Ocamldebug.Show_information",
        ":Ocamldebug.Time_travel",
        ":Ocamldebug.Unix_tools",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_module(
    name   = "Ocamldebug.Ocamldebug_entry",
    ns     = ":Ocamldebug",
    struct = "ocamldebug_entry.ml",
    opts = ["-nopervasives"],
    deps   = [
        "//otherlibs/unix:Unix",
        ":Ocamldebug.Main"
    ]
)

ns_module(
    name   = "Ocamldebug.Parameters",
    ns     = ":Ocamldebug",
    struct = "parameters.ml",
    sig    = ":Ocamldebug.Parameters_cmi",
    opts = MODULE_OPTS,
    stdlib_primitives = True,
    deps   = [
        "//config:Config",
        "//typing:Envaux",
        "//utils:Load_path",
        ":Ocamldebug.Debugger_config",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Hashtbl",
    ],
)

ns_signature(
    name = "Ocamldebug.Parameters_cmi",
    ns     = ":Ocamldebug",
    src  = "parameters.mli",
    opts = SIG_OPTS,
    # stdlib_primitives = True,
    stdlib_deps = [
        "//stdlib:Primitives_cmi"
    ],
)

ns_signature(
    name = "Ocamldebug.Parser_aux_cmi",
    ns     = ":Ocamldebug",
    src  = "parser_aux.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident_cmi",
        ":Ocamldebug.Debugcom_cmi",
    ]
)

# ns_module(
#     name   = "Ocamldebug.Pattern_matching",
#     struct = "pattern_matching.ml",
#     sig    = ":Ocamldebug.Pattern_matching_cmi",
#     opts = MODULE_OPTS,
#     deps   = [
#         "//stdlib:Stdlib.List",
#         # "//typing:Ctype",
#         "//utils:Misc",
#         ":Ocamldebug.Debugcom",
#         ":Ocamldebug.Debugger_config",
#         # "//typing:Typedtree",

#         ":Ocamldebug.Parser_aux_cmi",
#     ]
# )

# ns_signature(
#     name = "Ocamldebug.Pattern_matching_cmi",
#     src  = "pattern_matching.mli",
#     opts = SIG_OPTS,
#     deps   = [
#         ":Ocamldebug.Parser_aux_cmi",
#         ":Ocamldebug.Debugcom_cmi",
#         "//typing:Typedtree_cmi",
#     ]
# )

ns_module(
    name   = "Ocamldebug.Pos",
    ns     = ":Ocamldebug",
    struct = "pos.ml",
    sig    = ":Ocamldebug.Pos_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//parsing:Location",
        ":Ocamldebug.Events",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Printf",
  ],
)

ns_signature(
    name = "Ocamldebug.Pos_cmi",
    ns     = ":Ocamldebug",
    src  = "pos.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Events_cmi",
    ]
)

ns_module(
    name   = "Ocamldebug.Primitives",
    ns     = ":Ocamldebug",
    struct = "primitives.ml",
    sig    = ":Ocamldebug.Primitives_cmi",
    opts = MODULE_OPTS,
    stdlib_deps   = [
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.String",
    ]
)

ns_signature(
    name = "Ocamldebug.Primitives_cmi",
    ns     = ":Ocamldebug",
    src  = "primitives.mli",
    opts = SIG_OPTS,
    # stdlib_primitives = True,
    deps   = [
        "//otherlibs/unix:Unix_cmi"
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Printval",
    ns     = ":Ocamldebug",
    struct = "printval.ml",
    sig    = ":Ocamldebug.Printval_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Symtable",
        "//toplevel:Genprintval",
        "//typing:Env",
        "//typing:Oprint",
        "//typing:Printtyp",
        "//typing:Types",
        ":Ocamldebug.Debugcom",
    ],
        # "//typing:Outcometree_cmi",
        # ":Ocamldebug.Parser_aux_cmi",
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Obj",
    ],
)

ns_signature(
    name = "Ocamldebug.Printval_cmi",
    ns     = ":Ocamldebug",
    src  = "printval.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Env_cmi",
        "//typing:Path_cmi",
        "//typing:Types_cmi",
        ":Ocamldebug.Debugcom_cmi",
        ":Ocamldebug.Parser_aux_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Obj_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Program_loading",
    ns     = ":Ocamldebug",
    struct = "program_loading.ml",
    sig    = ":Ocamldebug.Program_loading_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Unix_tools",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_signature(
    name = "Ocamldebug.Program_loading_cmi",
    ns     = ":Ocamldebug",
    src  = "program_loading.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Primitives_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Program_management",
    ns     = ":Ocamldebug",
    struct = "program_management.ml",
    sig    = ":Ocamldebug.Program_management_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//driver:Compmisc",
        "//utils:Load_path",
        ":Ocamldebug.Breakpoints",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.History",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Program_loading",
        ":Ocamldebug.Question",
        ":Ocamldebug.Symbols",
        ":Ocamldebug.Time_travel",
        ":Ocamldebug.Unix_tools",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Printf",
    ],
)

ns_signature(
    name = "Ocamldebug.Program_management_cmi",
    ns     = ":Ocamldebug",
    src  = "program_management.mli",
    # stdlib_primitives = True
    stdlib_deps = [
        "//stdlib:Primitives_cmi"
    ],
)

ns_module(
    name   = "Ocamldebug.Question",
    ns     = ":Ocamldebug",
    struct = "question.ml",
    sig    = ":Ocamldebug.Question_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Debugger_lexer",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Primitives",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.String",
    ],
)

ns_signature(
    name = "Ocamldebug.Question_cmi",
    ns     = ":Ocamldebug",
    src  = "question.mli",
    opts = SIG_OPTS + ["-nopervasives"]
)

ns_module(
    name   = "Ocamldebug.Show_information",
    ns     = ":Ocamldebug",
    struct = "show_information.ml",
    sig    = ":Ocamldebug.Show_information_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//utils:Misc",
        ":Ocamldebug.Breakpoints",
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Events",
        ":Ocamldebug.Frames",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Printval",
        ":Ocamldebug.Show_source",
        ":Ocamldebug.Source",
        ":Ocamldebug.Symbols",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
    ],
)

ns_signature(
    name = "Ocamldebug.Show_information_cmi",
    ns     = ":Ocamldebug",
    src  = "show_information.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Events_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Format_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Show_source",
    ns     = ":Ocamldebug",
    struct = "show_source.ml",
    sig    = ":Ocamldebug.Show_source_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//parsing:Location",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Events",
        ":Ocamldebug.Parameters",
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Source",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
    ],
)

ns_signature(
    name = "Ocamldebug.Show_source_cmi",
    ns     = ":Ocamldebug",
    src  = "show_source.mli",
    deps   = [
        "//bytecomp:Instruct_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Lexing_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Source",
    ns     = ":Ocamldebug",
    struct = "source.ml",
    sig    = ":Ocamldebug.Source_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//utils:Load_path",
        "//utils:Misc",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Primitives",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_signature(
    name = "Ocamldebug.Source_cmi",
    ns     = ":Ocamldebug",
    src  = "source.mli",
    # stdlib_primitives = True,
    stdlib_deps   = [
        "//stdlib:Stdlib.Lexing_cmi",
    ]
)

ns_module(
    name   = "Ocamldebug.Symbols",
    ns     = ":Ocamldebug",
    struct = "symbols.ml",
    sig    = ":Ocamldebug.Symbols_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Bytesections",
        "//bytecomp:Instruct",
        "//bytecomp:Symtable",
        "//utils:Misc",
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Events",
        ":Ocamldebug.Program_loading",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
    ],
)

ns_signature(
    name = "Ocamldebug.Symbols_cmi",
    ns     = ":Ocamldebug",
    src  = "symbols.mli",
    opts = SIG_OPTS,
    deps   = [
        "//bytecomp:Instruct_cmi",
        ":Ocamldebug.Debugcom_cmi",
        ":Ocamldebug.Events_cmi",
    ],
    stdlib_deps = [
        "//stdlib:Primitives_cmi",
    ],
)

ns_module(
    name   = "Ocamldebug.Time_travel",
    ns     = ":Ocamldebug",
    struct = "time_travel.ml",
    sig    = ":Ocamldebug.Time_travel_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Instruct",
        "//utils:Misc",
        ":Ocamldebug.Breakpoints",
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Debugger_config",
        ":Ocamldebug.Events",
        ":Ocamldebug.Exec",
        ":Ocamldebug.Input_handling",
        ":Ocamldebug.Int64ops",
        ":Ocamldebug.Primitives",
        ":Ocamldebug.Program_loading",
        ":Ocamldebug.Question",
        ":Ocamldebug.Symbols",
        ":Ocamldebug.Trap_barrier",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Int",
        "//stdlib:Stdlib.Int64",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_signature(
    name = "Ocamldebug.Time_travel_cmi",
    ns     = ":Ocamldebug",
    src  = "time_travel.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Ocamldebug.Primitives_cmi",
    ]
)

ns_module(
    name   = "Ocamldebug.Trap_barrier",
    ns     = ":Ocamldebug",
    struct = "trap_barrier.ml",
    sig    = ":Ocamldebug.Trap_barrier_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Ocamldebug.Checkpoints",
        ":Ocamldebug.Debugcom",
        ":Ocamldebug.Exec",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Fun",
    ],
)

ns_signature(
    name = "Ocamldebug.Trap_barrier_cmi",
    ns     = ":Ocamldebug",
    src  = "trap_barrier.mli",
    opts = ["-nopervasives"],
    deps = [":Ocamldebug.Debugcom_cmi"]
)

ns_module(
    name   = "Ocamldebug.Unix_tools",
    ns     = ":Ocamldebug",
    struct = "unix_tools.ml",
    sig    = ":Ocamldebug.Unix_tools_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//otherlibs/unix:Unix",
        "//utils:Misc",
    ],
    stdlib_deps = [
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
)

ns_signature(
    name = "Ocamldebug.Unix_tools_cmi",
    ns     = ":Ocamldebug",
    src  = "unix_tools.mli",
    opts = SIG_OPTS + ["-nopervasives"],
    deps   = [
        "//otherlibs/unix:Unix_cmi"
    ]
)

