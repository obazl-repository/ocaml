load("//bzl:rules.bzl",
     # "boot_archive",
     # "boot_library",
     "compiler_library")

## NB: there is no compelling reason that we should put these targets
## here in this empty directory. Better to build locally; for example,
## instead of //compilerlibs:ocamltoplevel, why not
## //toplevel:ocamltoplevel? More felicitous.

## The exception is ocamlcommon, which depends on multiple packages,
## and maybe ocamloptcomp.

## libraries in this pkg defined in compilerlibs/Makefile.compilerlibs
## ocamlcommon.[cma,cmxa]
## ocamlbytecomp.[cma,cmxa]
## ocamlmiddleend.[cma,cmxa]
## ocamloptcomp.[cma,cmxa]
## ocamltoplevel.[cma,cmxa]

# COMMON_CMI = $(UTILS_CMI) $(PARSING_CMI) $(TYPING_CMI) $(LAMBDA_CMI) $(COMP_CMI)

# COMMON = $(UTILS) $(PARSING) $(TYPING) $(LAMBDA) $(COMP)

## no //middle_end stuff:
# boot_library(
# boot_archive(
compiler_library(
    name = "ocamlcommon",
    cmxa_eligible = True,
    opts = ["-linkall"],
    manifest  = [
        ## WARNING: rules_ocamlcc can put the members of unarchived
        ## libs in order, but it cannot do the same for archived libs.
        ## so this order must be retained if compiling with
        ## archived libraries (--//config/ocaml/compiler/libs:archived)
        "//config:Config",
        "//utils:ocamlcommon",
        "//parsing:ocamlcommon",
        "//typing:ocamlcommon",
        "//bytecomp:ocamlcommon",
        "//lambda:ocamlcommon",
        "//driver:ocamlcommon",
    ],
    visibility = [
        "@dev//:__subpackages__",
        "//bin:__subpackages__",
        "//boot:__subpackages__",
        "//debugger:__pkg__",
        "//dev:__subpackages__",
        "//fixpoint:__pkg__",
        "//ocamltest:__pkg__",
        "//test:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
        "//utils:__pkg__",
        "//testsuite:__subpackages__",
    ]
)

################
# compilerlibs/ocamlbytecomp.cma: $(BYTECOMP_CMI) $(BYTECOMP)
# 	$(CAMLC) -a -o $@ $(BYTECOMP)
################
# compilerlibs/ocamlbytecomp.cmxa: $(BYTECOMP_CMI) $(BYTECOMP:.cmo=.cmx)
# 	$(CAMLOPT) -a $(OCAML_NATDYNLINKOPTS) -o $@ $(BYTECOMP:.cmo=.cmx)

# boot_archive(
#     ## FIXME: move to //bytecomp:ocamlbytecomp (or :bytecomp.archive?)
#     name = "ocamlbytecomp",
#     opts = select({
#         "//bzl/toolchain:boot": [],
#         "//bzl/toolchain:bc_bc": [],
#         "//bzl/toolchain:n_bc": [],
#         "//bzl/toolchain:bc_n": [],
#         "//bzl/toolchain:n_n": []
#     }),
#     manifest = [
#         "//bytecomp:ocamlbytecomp",
#     ],
#     visibility = [
#         "//boot:__pkg__",
#         "//compilers:__pkg__",
#         "//fixpoint:__pkg__",
#         "//tools:__pkg__",
#         "//utils:__pkg__",
#     ]
# )

##################
## ocamlmiddlend.[cma,cmxa]
# MIDDLE_END = \
#   middle_end/internal_variable_names.cmo \
#   ... etc...
# compilerlibs/ocamlmiddleend.cma: $(MIDDLE_END_CMI) $(MIDDLE_END)
# 	$(CAMLC) -a -o $@ $(MIDDLE_END)
# compilerlibs/ocamlmiddleend.cmxa: $(MIDDLE_END_CMI) $(MIDDLE_END:%.cmo=%.cmx)
# 	$(CAMLOPT) -a -o $@ $(MIDDLE_END:%.cmo=%.cmx)

## NOTE: moved to //middle_end:ocamlmiddleend

# boot_archive(
#     name    = "ocamlmiddlend",
#     visibility = ["//visibility:public"],
#     opts = ["-linkall"],
#     manifest = [
#         "//middle_end:ocamlmiddleend",
#     ],
# )

################
## compilerlibs/ocamltoplevel.[cma,cmxa]: see //toplevel:ocamltoplevel
