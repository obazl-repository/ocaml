package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_setting")

load("//bzl:rules.bzl",
     "ocaml_compiler_r",
     "compiler_module",
     "std_compilers", # macro
     "profiling_compilers", # macro
     "flambda_compilers", # macro
     ## for profiling compilers:
     "std_ocamlc_byte",
     "std_ocamlopt_byte",
     "std_ocamlopt_opt",
     "std_ocamlc_opt"
     )

load("//tools:TOOL_RULES.bzl",
     "ocaml_tools",  ## macro
     "tool_module",
     "tool_signature"
     )

load("//config:WARNINGS.bzl", "w")

exports_files(["ocamlcc.sh"])

bool_flag(name = "verbose", build_setting_default = False,
          visibility = ["//visibility:public"])
config_setting(name = "verbose?", flag_values = {":verbose": "True"})

################################################################
std_compilers(                  # macro
    name = "std_ocamlcc",
    visibility = ["//visibility:public"]
)

profiling_compilers(              # macro
    name = "profiling_ocamlcc",
    visibility = ["//visibility:public"]
)

flambda_compilers(              # macro
    name = "flambda_ocamlcc",
    visibility = ["//visibility:public"]
)

################################################################
## runners, for vm executables
################################################################
sh_binary(
    name = "ocamlc.byte.sh",
    srcs = ["ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "false"}
    }),
    args = ["$(rootpath //runtime:ocamlrun)",
            "$(rootpath :ocamlc.byte)",
            "$(rlocationpath //stdlib:stdlib)"],
    data = [
        "//runtime:ocamlrun",
        ":ocamlc.byte",
        "//stdlib",
        "//stdlib:Std_exit",
        "//config/camlheaders",
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

sh_binary(
    name = "ocamlopt.byte.sh",
    srcs = ["ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "false"}
    }),
    args = ["$(rootpath //runtime:ocamlrun)",
            "$(rootpath :ocamlopt.byte)",
            "$(rlocationpath //stdlib:stdlib.cmxa)",],
    data = [
        "//runtime:ocamlrun",
        ":ocamlopt.byte",
        "//runtime:asmrun",
        "//stdlib:stdlib.cmxa",
        "//stdlib:Std_exit.cmx",
        "@bazel_tools//tools/cpp:current_cc_toolchain"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ],
    toolchains = ["@bazel_tools//tools/cpp:current_cc_toolchain"]
)

## why do we need opt.sh?
sh_binary(
    name = "ocamlopt.opt.sh",
    srcs = ["ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "false"}
    }),
    args = ["ocamlopt.opt"],
    data = [
        ":ocamlopt.opt",
        "//runtime:asmrun",
        # "//config/camlheaders",
        "@bazel_tools//tools/cpp:current_cc_toolchain"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ],
    toolchains = ["@bazel_tools//tools/cpp:current_cc_toolchain"]
)

sh_binary(
    name = "ocamlc.opt.sh",
    srcs = ["ocamlcc.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "false"}
    }),
    args = ["ocamlc.opt"],
    data = [
        ":ocamlc.opt",
        "//runtime:camlrun",
        "//config/camlheaders",
        "//stdlib",
        "//stdlib:Std_exit",
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

################################################################
################################################################
## recursive builds. abandoned. they work, but at the cost of
## duplicated builds of some of the code.
ocaml_compiler_r(
    name = "ocamlcc_r",
    # stdlib   = "//stdlib",
    prologue = ["//compilerlibs:ocamlcommon",
                ] + select({
        # "//config/target:baseline_vm?": ["//bytecomp:ocamlbytecomp"],
        # "//config/target:baseline_sys?": ["//asmcomp:ocamloptcomp"],
        # "//config/target:ult_sys?": ["//asmcomp:ocamloptcomp"],

        "//config/target/emitter:sys_emitter?": ["//asmcomp:ocamloptcomp"],

        "//conditions:default": ["//bytecomp:ocamlbytecomp"]
    }),
    main = select({
        # "//config/target:baseline_vm?": "//driver:Main",
        # "//config/target:baseline_sys?": "//driver:Optmain",
        # "//config/target:ult_sys?": "//driver:Optmain",

        "//config/target/emitter:sys_emitter?": "//driver:Optmain",

        "//conditions:default": "//driver:Main"
    }),
    opts = [ ] + select({
        # ocamlc.byte: ["-compat-32"]
        "//conditions:default": []
    }) + [
        ## use --//config/ocaml/link:verbose instead
        # "-verbose",

        ## for testing (linux):
        # "-cc", "gcc",  ## cancels mkexe
        # "-ccopt", "-B/usr/bin",
        # "-ccopt", "-B/usr/lib",
        # "-ccopt", "-B/usr/lib/gcc/x86_64-linux-gnu/9",
        ## bazel-generated args:
        # "-ccopt", "-fuse-ld=gold",
        # "-ccopt", "-fno-use-linker-plugin",
        # "-ccopt", "-Wl,-no-as-needed",
        # "-ccopt", "-Wl,-z,relro,-z,now",
        # "-ccopt", "-pass-exit-codes",
        # "-ccopt", "-lstdc++",

        # "-ccopt", "-Wl,-export_dynamic",
        # "-ccopt", "-Wl,-all_load"
    ] + select({
        "//platform/target/os:linux?": [
            "-cclib", "-lm",
            "-cclib", "-ldl",
            "-cclib", "-lpthread",
        ],
        "//conditions:default": []
    }),
    cc_linkopts = select({
        "@platforms//os:macos": [ ## FIXME: default tc, not zig
            # "-Wl,-v", # prints config, search paths
            # "-Wl,-print_statistics", # -Wl,-v plus timings, mem, etc.
            # "-t", # -Wl-v plus logs each file the linker loads.
            # "-why_load" # Log why each object file in a static library
            #             # is loaded. That is, what symbol was needed.
            ## zig linker opts
            # "-v",
            ],
        "@platforms//os:linux": [
            # "-Wl,--verbose"
            ##FIXME: depends on linker used (bfd, gold, etc.)
        ]
    }),
    # cc_deps = ["//runtime:asmrun"],
    visibility             = ["//visibility:public"]
)

