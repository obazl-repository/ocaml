let ccomp_type = {|{{ccomptype}}|}
let c_compiler = {|{{compiler}}|}
(* let c_has_debug_prefix_map = @cc_has_debug_prefix_map@ *)
(* let as_has_debug_prefix_map = @as_has_debug_prefix_map@ *)
let c_output_obj = {|{{outputobj}} |}
let ocamlc_cflags = {|{{#c_compile_cmd_line}} {{{.}}}{{/c_compile_cmd_line}}|}
let ocamlc_cppflags = {|{{#preprocess_assemble_cmd_line}}{{{.}}}{{/preprocess_assemble_cmd_line}}|}
let ocamlopt_cflags = {|{{#c_compile_cmd_line}} {{{.}}}{{/c_compile_cmd_line}}|}
let ocamlopt_cppflags = {|{{#preprocess_assemble_cmd_line}}{{{.}}}{{/preprocess_assemble_cmd_line}}|}

(* whether the C compiler supports -fdebug-prefix-map (feature test) *)
let c_has_debug_prefix_map = @cc_has_debug_prefix_map@
let as_has_debug_prefix_map = @as_has_debug_prefix_map@

let asm = {|{{compiler}} {{#assemble_cmd_line}} {{{.}}}{{/assemble_cmd_line}}|}
(*
  upcase: used as #define
  dncase: Config fld
  let asm_cfi_supported = @asm_cfi_supported@
 *)

let bytecomp_c_compiler =
  c_compiler ^ " " ^ ocamlc_cflags ^ " " ^ ocamlc_cppflags
let native_c_compiler =
  c_compiler ^ " " ^ ocamlopt_cflags ^ " " ^ ocamlopt_cppflags

let ar = {|{{ar_executable}}|}

## treat required libs as toolchain rather than sys config data

BYTECCLIBS = "@bytecclibs@".split(" ")
VM_LIBDEPS = "@bytecclibs@".split(" ")
# fld in utils:Config - bytecomp_c_libraries = "@bytecclibs@"
NATIVECCLIBS = "@nativecclibs@".split(" ")
SYS_LIBDEPS = "@nativecclibs@".split(" ")
# fld in utils:Config - native_c_libraries = "@nativecclibs@"

LIBUNWIND_AVAILABLE = "@libunwind_available@"
LIBUNWIND_INCLUDE_FLAGS = "@libunwind_include_flags@"
LIBUNWIND_LINK_FLAGS = "@libunwind_link_flags@"

(* toolchain or sys config? *)
# supports_shared_libraries true if has dlopen
# i.e. HAS_DLOPEN etc.
# upcase: used by makefiles
# dncase: fld in Config module
SUPPORTS_SHARED_LIBRARIES = "@supports_shared_libraries@" == "true"
supports_shared_libraries = "@supports_shared_libraries@" == "true"
Makefile:
ifeq "$(SUPPORTS_SHARED_LIBRARIES)" "true"
runtime_BYTECODE_STATIC_LIBRARIES += runtime/libcamlrun_pic.$(A)
runtime_BYTECODE_SHARED_LIBRARIES += runtime/libcamlrun_shared.$(SO)
runtime_NATIVE_STATIC_LIBRARIES += runtime/libasmrun_pic.$(A)
runtime_NATIVE_SHARED_LIBRARIES += runtime/libasmrun_shared.$(SO)
endif

