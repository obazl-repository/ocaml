OCAML_DEVELOPMENT_VERSION = "@OCAML_DEVELOPMENT_VERSION@" == "true"
OCAML_VERSION_MAJOR = "@OCAML_VERSION_MAJOR@"
OCAML_VERSION_MINOR = "@OCAML_VERSION_MINOR@"
OCAML_VERSION_PATCHLEVEL = "@OCAML_VERSION_PATCHLEVEL@"
OCAML_VERSION_EXTRA = "@OCAML_VERSION_EXTRA@"

# Flags to use when compiling and linking OCaml programs

# The names of the variables below take the form XXX_YYY_ZZZ where
#
# XXX is one of OC, OCAML or the name of a module. The OC prefix
# is for private variables (i.e. reserved by the compiler's build system),
# the OCAML prefix is used for variables the user can define to add their
# own flags and the module-name prefix is for flags that apply only
# to one module.
#
# YYY refers to the backend. At the moment, it can take the values
# COMMON for the flags shared by all the backends, BYTECODE or NATIVE
# (other backends may be added in the future).
#
# ZZZ is either CFLAGS (compile-time flags) or LDFLAGS (link-time flags).
# However, contrary to what is done for C compilers, the flags in the
# CFLAGS category are not passed at link time, so if a flag is needed
# at both stages, like e.g. -g, it should be added to both XXX_YYY_CFLAGS and
# XXX_YYY_LDFLAGS.

# Bzl: the above is buried in Makefile.build_config.in. It's seems a
# little out if sync, not accounting for CFLAGS, CPPFLAGS, and
# *_CPPFLAGS, or the OCAMLOPT prefix, etc. Or is the OCAMLOPT prefix a
# "module" prefix?
# Note there are no OCAML_* flag vars.

# "Backend" evidently means target platform. The "common" flags - used
# in _every_ C compilation, whether debug or opt, etc.?

# bzl: WARNING - the makefiles may update these vars. For example, in
# otherlibs/Makefile.otherlibs.common we have "OC_CFLAGS += -g".
# Furthermore they include additional vars like COMPFLAGS with
# hardcoded values but do not use OC_COMMON_FLAGS.

## COMPFLAGS, OPTCOMPFLAGS: for compiling OCaml sources.
## COMPFLAGS is for targeting both the vm and sys;
## OPTCOMPFLAGS is for targeting sys.
# Hardcoded in Makefile.common

# The notes below ignore uses of flags etc. to compute dependencies,
# since they're not need under Bazel.

############# Configuration for the native-code compiler

### Whether the native compiler has been enabled or not
NATIVE_COMPILER = "@native_compiler@" == "true"

### Name of architecture for the native-code compiler
### Currently supported:
###
### i386        Intel Pentium PCs under Linux, *BSD*, NextStep
### power       Macintosh under Mac OS X and Linux
### arm         ARM under Linux
###
### Set ARCH=none if your machine is not supported
ARCH = "@arch@"

# Whether the architecture has 64 bits
ARCH64 = "@arch64@" == "true"

# Endianness for this architecture
ENDIANNESS = "@endianness@"

### Name of architecture model for the native-code compiler.
### Some architectures come in several slightly different flavors
### that share a common code generator. This variable tailors the
### behavior of the code generator to the particular flavor used.
### Currently needed only if ARCH=power; leave MODEL=default for
### other architectures.
### If ARCH=power: set MODEL=ppc
### For other architectures: leave MODEL=default
###
MODEL = "@model@"

### Name of operating system family for the native-code compiler.
SYSTEM = "@system@"

TARGET = "@target@"
HOST = "@host@"

### Set to "true" to install ".byte" executables (ocamlc.byte, etc.)
INSTALL_BYTECODE_PROGRAMS = "@install_bytecode_programs@" == "true"

################################################################
#### Commands
## C builds cmds:

## OCaml build cmds:

## An unholy mess. The legacy makefiles use no fewer than nine cmd
## variables just for compiling: BOOT_OCAMLC, COMPILER, OPTCOMPILER,
## CAMLC, OCAMLC, CAMLOPT, OCAMLOPT, BEST_OCAMLC, and BEST_OCAMLOPT.
## Not to mention COMPILE_NATIVE_MODULE and vars for the runtime -
## OCAMLRUN, NEW_OCAMLRUN.

## Hopefully OBazl can clean this up. Bazel does not need such
## variables, since the build tools are encoded in the toolchains, and
## build commands are encoded in the rules. So the main issue is a
## matter of passing the right arguments via rule attributes.

# OCAMLRUN: set to boot/ocamlrun, which is the initial version
# compiled with the boot compiler boot/ocamlc.
# May be overridden on cmd line, as in target 'library-cross' in
# Makefile:
#	$(MAKE) -C stdlib OCAMLRUN=../runtime/ocamlrun$(EXE) all
#
# NEW_OCAMLRUN: constant runtime/ocamlrun
#
## OBazl: one build target (//boot/bin:ocamlrun) for the initial
## (bootstrap) runtime (boot/ocamlrun, copied from runtime/ocamlrun),
## another (//bin:ocamlrun) for any updated runtime (i.e. if runtime
## sources change). This a bootstrap toolchain using //boot/bin:ocamlrun
## (the inital runtime), and a separate tool chain using the new
## runtime in //bin:ocamlrun.

# COMPILER: ./ocamlc (i.e. newly built vm>vm compiler)
# OPTCOMPILER: ./ocamlopt (i.e.  newly built compiler vm>sys compiler)
#
## OBazl: targets for building new compilers are //bin:ocamlc,
## //bin:ocamlopt

# BOOT_OCAMLC: this is a compile cmd
# Makefile:
# boot/ocamlc.opt (sys>vm) if available (and newer than
#   boot/ocamlc), otherwise boot/ocamlc (vm>vm)
# Makefile.common, for default OCaml build rules:
## runs boot/ocamlc.opt (sys>vm compiler) if available
## otherwise runs boot/ocamlc under OCAMLRUN (boot/ocamlrun)
#
## OBazl: no need. Target //boot/bin:ocamlc delivers the vm>vm boot
## compiler. Build target //boot/bin:ocamlc, with
## --host_platform=//platforms/build:sys and
## --platforms=//platforms/target:vm delivers the initial sys>vm
## compiler.

# CAMLC: a mess. the idea seems to be: use a *>vm compiler. Could be
# the boot vm>vm compiler, the initial sys>vm compiler, or a local >vm
# compiler.  Compile actions use CAMLC, which may be set in various ways.

## Bzl: choice of compiler to use for a build action is controlled by
## target host setting (which can be set by passing a platform arg).
## So for example the stdlib target defaults to the vm>vm bootstrap
## toolchain. If you want to build stdlib with the sys>vm compiler,
## pass --//platforms/target:sys and --//platforms/xtarget:vm.

# Makefile:
## CAMLC = $(BOOT_OCAMLC) $(BOOT_STDLIBFLAGS) -use-prims runtime/primitives
## Overridden for some targets, e.g. coldstart:
##   CAMLC='$$(BOOT_OCAMLC) $(USE_RUNTIME_PRIMS)'
##    NB: USE_RUNTIME_PRIMS == -use-prims ../runtime/primitives
# stdlib: CAMLC=$(OCAMLRUN) $(COMPILER)
# tools:  CAMLC = $(BOOT_OCAMLC) $(BOOT_STDLIBFLAGS) -g \
#           -use-prims $(ROOTDIR)/runtime/primitives -I $(ROOTDIR)
##  Makefile.common: BOOT_STDLIBFLAGS ?= -nostdlib -I $(ROOTDIR)/boot
## NB: for the last to work, BOOT_OCAMLC must be sys>vm (ocamlc.opt)
BOOT_STDLIBFLAGS = ["-nostdlib"]

# CAMLOPT: runs vm>sys compiler
# Defined in:
# Makefile:
## CAMLOPT=$(OCAMLRUN) ./ocamlopt$(EXE) $(STDLIBFLAGS) -I otherlibs/dynlink
# tools/Makefile:
## CAMLOPT = $(OCAMLRUN) $(ROOTDIR)/ocamlopt$(EXE) $(STDLIBFLAGS) -g
# stdlib/Makefile:
##  CAMLOPT=$(OCAMLRUN) $(OPTCOMPILER)
# otherlibs/Makefile.otherlibs.common
## CAMLOPT := $(BEST_OCAMLOPT) $(STDLIBFLAGS)
# otherlibs/systhread/Makefile
## CAMLOPT=$(BEST_OCAMLOPT) $(LIBS)

# CAMLOPT_CMD: for sys>* builds
# Defined in Makefile.common: CAMLOPT_CMD = $(CAMLOPT)

# deciphered: uses the baseline (initial) boot/ocamlrun to run
# ocamlopt (vm>sys compiler).

# OCAMLOPT:
## Makefile: windows only, for flexlink stuff
## otherlibs/dynlink/Makefile: OCAMLOPT=$(BEST_OCAMLOPT) $(STDLIBFLAGS) -g
## set and used in testsuite subdirs:
##   OCAMLOPT ?= $(BEST_OCAMLOPT) $(STDLIBFLAGS)

# COMPILE_NATIVE_MODULE: defined in Makefile
#   $(CAMLOPT_CMD) $(OC_COMMON_CFLAGS) -I $(@D) $(INCLUDES) $(OC_NATIVE_CFLAGS)
# used only in the generic rule for .cmx:
# %.cmx: %.ml
# 	$(COMPILE_NATIVE_MODULE) -c $<

# BEST_OCAMLC: Makefile.best_binaries
#   BEST_OCAMLC := $(call choose_best,ocamlc)
## Seems odd. if you want a sys.* compiler, just build it (depend on it).
## choose_best: returns sys>* if available else vm>*
##   if USE_BEST_BINARIES (default: true) and $(ROOTDIR)/$1.opt not stale
##   then $(ROOTDIR)/$1.opt
##   else $(OCAMLRUN) $(ROOTDIR)/$1

## Why do we need this choose_best function? Maybe because in the
## legacy system we can build the various compilers separately. So it
## is possible to have built both a sys>vm and a vm>vm, but the latter
## more recently, in which case it will be selected by choose_best.

## Under Bazel this would not make sense. You can build the different
## compiler flavors (vm>sys, sys>vm, etc.) separately, but whatever
## you depend on will be compiled and delivered. And the toolchains
## depend on the compilers. So if you use the sys>vm toolchain, that
## compiler will be built automatically. IOW you select the compiler
## to use by setting the target platform, which causes Bazel to select
## the matching toolchain.

# opts attrib:
# boot_module: OC_COMMON_CFLAGS, add OC_NATIVE_CFLAGS if target == sys
# boot_signature: OC_COMMON_CFLAGS for both vm and sys targets
# BOOT_OCAMLRUN = "//boot/bin:ocamlrun"
# RUNTIME_OCAMLRUN = "//bin:ocamlrun"

################################################################
## Default Build Rules
#
## OCaml: defined in Makefile

## compiling to VM uses bootstrap *>vm ocamlc. CAMLC is new
## boot/ocamlc.opt if available, otherwise boot/ocamlc (bootstrap
## compiler).

# %.cmo: %.ml
# 	$(CAMLC) $(OC_COMMON_CFLAGS) -I $(@D) $(INCLUDES) -c $<
# %.cmi: %.mli
# 	$(CAMLC) $(OC_COMMON_CFLAGS) -I $(@D) $(INCLUDES) -c $<
#
## compiling to sys (native) uses bootstrap vm>sys ocamlc
# %.cmx: %.ml
# 	$(COMPILE_NATIVE_MODULE) -c $<
#
# COMPILE_NATIVE_MODULE:
# $(CAMLOPT_CMD) $(OC_COMMON_CFLAGS) -I $(@D) $(INCLUDES) $(OC_NATIVE_CFLAGS)
# CAMLOPT_CMD expands to "boot/ocamlrun ./ocamlopt"

## OBazl uses toolchains and platforms. The bootstrap toolchain uses
## boot/ocamlrun and boot/ocamlc. The stage1 toolchain uses outputs of
## the bootstrap tc: //bin:ocamlrun and //bin:ocamlc.

################################
## C: defined in Makefile.common
## NOTE: the build files compute deps; Bazel does not. Deps must be
## determined ahead of time.
# RUNTIME_HEADERS := $(wildcard $(ROOTDIR)/runtime/caml/*.tbl) \
#                    $(wildcard $(ROOTDIR)/runtime/caml/*.h)
# REQUIRED_HEADERS := $(RUNTIME_HEADERS) $(wildcard *.h)
# %.$(O): %.c $(REQUIRED_HEADERS)
# 	$(CC) -c $(OC_CFLAGS) $(CFLAGS) $(OC_CPPFLAGS) $(CPPFLAGS) \
# 	  $(OUTPUTOBJ)$@ $<
#
## OBazl defines build targets for headers in
## runtime/caml/BUILD.bazel.


################################################################
####  C Builds
TOOLPREF = "@ac_tool_prefix@"
CCOMPTYPE = "@ccomptype@"
ccomp_type = "@ccomptype@"
CC = "@CC@"
c_compiler = "@CC@"
   # bytecomp_c_compiler and native_c_compiler have been supported for a
   # long time and are retained for backwards compatibility.
   # For programs that don't need compatibility with older OCaml releases
   # the recommended approach is to use the constituent variables
   # c_compiler, ocamlc_cflags, ocamlc_cppflags etc., directly.
## OBazl does not need to support such backward compatibility?
# bytecomp_c_compiler = c_compiler + " " + ocamlc_cflags + " " + ocamlc_cppflags
# native_c_compiler = c_compiler + " " + ocamlopt_cflags + " " + ocamlopt_cppflags
TOOLCHAIN = "@toolchain@"

CC_HAS_DEBUG_PREFIX_MAP = "@cc_has_debug_prefix_map@" == "true"
AS_HAS_DEBUG_PREFIX_MAP = "@as_has_debug_prefix_map@" == "true"
c_has_debug_prefix_map = "@cc_has_debug_prefix_map@" == "true"
as_has_debug_prefix_map = "@as_has_debug_prefix_map@" == "true"

#################################
## OC_CFLAGS in Makefile, for both vm and sys targets %.[b|n]pic.o
## also used to compile runtime/sak.exe
## Also used in Makefile.common for generic C compile rule:
# %.$(O): %.c $(REQUIRED_HEADERS)
# 	$(CC) -c $(OC_CFLAGS) $(CFLAGS) $(OC_CPPFLAGS) $(CPPFLAGS) \
# 	  $(OUTPUTOBJ)$@ $<
# mac: "-O2 -fno-strict-aliasing -fwrapv -pthread -g -Wall -Werror -fno-common"
# linux: "-O2 -fno-strict-aliasing -fwrapv -pthread -g -Wall -Werror -fno-common -fexcess-precision=standard -fno-tree-vrp -ffunction-sections"

# def fix_oc_cflags(x):
#     if "-O2" in x:
#         x.remove("-O2")
#     if "-g" in x:
#         x.remove("-g")

#     return x

# OC_CFLAGS = fix_oc_cflags("@oc_cflags@".split(" "))
#### IMPORTANT: OC_CFLAGS is emitted by ./configure to
####     //toolchain/profile/cc/local/BUILD.bazel

# CFLAGS not used in Makefile. Used in Makefile.common, in the
# generic rule for compiling C sources. Also used in:
# - stdlib/Makefile to compile "HEADERPROGRAM" (header.c), which is
#     "The launcher for bytecode executables (if #! is not working)"
# - otherlibs/systhreads/Makefile, to compile st_stubs.[b|n].o
# mac, linux: empty
CFLAGS = "@CFLAGS@".split(" ")

# for compiling runtime files to sys target
# mac: empty; linux: "-function-sections"
# something is off; -function-sections is a C option?
# well, it's also listed by ocamlopt --help (v. 4.14.0) as
#  -function-sections  (option not available)
OC_NATIVE_CFLAGS = "@oc_native_cflags@".split(" ")

#FIXME: -function-sections only for >sys (cmx output)
# OCNCF = "@oc_native_cflags@"
OCNCF = "" # until we get this fixed
# ?? PLATFORM_NATIVE_CFLAGS = select({
PLATFORM_CFLAGS = select({
    "//platforms/target:vm?": [],
    "//conditions:default": [] if OCNCF == "" else OCNCF.split(" ")
})

## not used in any Makefiles. stored in fld in Config module:
## val ocamlc_cflags : string
## (** The flags ocamlc should pass to the C compiler *)
## IOW, these are not flags for building the compiler, they're flags
## the compiler uses to compile (e.g. when passed c source?)
# ocamlc_cflags: unused

## Set in Makefile.config, but not used:
# OCAMLC_CFLAGS = "@ocamlc_cflags@"

# OC_CPPFLAGS used wherever OC_CFLAGS and CFLAGS used, in
# particular in the generic C compile rule in Makefile.common.
# Also use for all runtimes, summed w/others as noted above
# Also used in various otherlibs/[systhreads|unix]
# In otherlibs/unix: OC_CPPFLAGS += -DCAML_BUILDING_UNIX
# mac: oc_ccpflags == -D_FILE_OFFSET_BITS=64
## OC_CPPFLAGS = ["-I$(ROOTDIR)/runtime", "@oc_cppflags@"]
OC_CPPFLAGS = "@oc_cppflags@".split(" ")

# configure:
# oc_cppflags="$common_cppflags $internal_cppflags"
# common_cppflags:
#   all: -D_FILE_OFFSET_BITS=64 hardcoded, maybe some extras
# internal_cppflags:
#    all: ??

# Used in generic C compile rule in Makefile.common,
# also in Makefile for runtime/sak.exe
# ocamltest/Makefile, summed with OC_CPPFLAGS
# Also used in otherlibs/systhreads, for st_stubs.[b|n].o
# mac, linux: empty
CPPFLAGS = "@CPPFLAGS@".split(" ")

# Makefile, for preprocessing %.S sources. Undefined
# OC_DEBUG_CPPFLAGS

# Makefile, for preprocessing %.S sources. Undefined
# OC_INSTR_CPPFLAGS

# OC_NATIVE_CPPFLAGS defined in Makefile.common (not by ./configure):
# OC_NATIVE_CPPFLAGS=\
#   -DNATIVE_CODE -DTARGET_$(ARCH) -DMODEL_$(MODEL) -DSYS_$(SYSTEM)
# We rename it since it only contains defines, for which Bazel
# has a dedicated attribute:
OC_NATIVE_DEFINES = [
    "NATIVE_CODE",
    "TARGET_" + ARCH,
    "MODEL_" + MODEL,
    "SYS_" + SYSTEM
]

# a field in the Config module in utils
# ocamlc_cppflags = "@ocamlc_cppflags@"

# Unused:
# OCAMLC_CPPFLAGS = "@ocamlc_cppflags@"

## OBazl: CAMLDLLIMPORT, IN_CAML_RUNTIME, CAML_INSTR These are only
## used in //runtime targets, so we do not need to store them in
## global vars.

# CAMLDLLIMPORT, IN_CAML_RUNTIME - single-use hardcoded defines.
# Only used for std runtime source code (runtime/caml/domain_state.h)
# for both vm and sys runtimes.
# defined in Makefile, not by ./configure.
# summed with OC_CPPFLAGS for the runtime .o files
# for native (%.n.o, OC_CPPFLAGS summed with OC_NATIVE_CPPFLAGS
# runtime_CPPFLAGS = -DCAMLDLLIMPORT= -DIN_CAML_RUNTIME

# CAML_INSTR - single-used, hardcoded in Makefile.
## Summed with OC_CPPFLAGS for .bi.o files
## for .ni.o files: sum w/OC_NATIVE_CPPFLAGS, OC_CPPFLAGS
## also used for windows amd64.nt.i.obj, i386.nt.i.obj
#ocamlruni_CPPFLAGS = -DCAML_INSTR
# ocamlruni_DEFINES = ["CAML_INSTR"]
# Bazel uses build setting --//config/mode:instrumented

## ocamlrund_CPPFLAGS:
## in Makefile, summed with OC_CPPFLAGS for .bd.o files
## for .nd.o files: sum w/OC_NATIVE_CPPFLAGS, OC_CPPFLAGS
## also used for windows amd64.nt.d.obj, i386.nt.d.obj
## Bazel does not use this; it uses CLI build settings to
## control compilation mode.
# ocamlrund_CPPFLAGS = -DDEBUG
# ocamlrund_DEFINES = ["DEBUG"]
#
## OBazl: selected in where needed. Global var not needed.

## fld in utils:Config module; not used in makefile
# ocamlopt_cflags = "@ocamlc_cflags@"

## Set in Makefile.config, but not used:
# OCAMLOPT_CFLAGS = "@ocamlc_cflags@"

# #7678: ocamlopt uses these only to compile .c files, and the
# #behaviour for the two drivers should be identical.
# set in Makefile.config, but not used
# OCAMLOPT_CPPFLAGS = "@ocamlc_cppflags@"

# fld in utils:Config
# ocamlopt_cppflags = "@ocamlc_cppflags@"


## Used to compile *.bpic.$(O) files
# Set by configure, depending on sys
# linux: -fPIC, mac: null
SHAREDLIB_CFLAGS = "@sharedlib_cflags@"

### Additional link-time options
# To support dynamic loading of shared libraries (they need to look at
# our own symbols):

# Set in Makefile.config, used in MKEXE, MKDLL, MKEXE_VIA_CC
# mac: -Wl,-no_compact_unwind
# linux: -Wl,-E
OC_LDFLAGS = "@oc_ldflags@".split(" ")


# used in Makefile.config
LDFLAGS = "@LDFLAGS@".split(" ")

################################################################
# Platform-dependent assembler files to use to build the runtime
runtime_ASM_OBJECTS = "@runtime_asm_objects@"

# Platform-dependent module for ocamlyacc
ocamlyacc_WSTR_MODULE = "@ocamlyacc_wstr_module@"

################ ocaml compilers ################
## OPTCOMPILER=$(ROOTDIR)/ocamlopt
## CAMLOPT=$(OCAMLRUN) $(OPTCOMPILER)

## So OPTCOMPILER is ocamlopt.byte, of type (vm>sys)
## i.e. VMSYS_COMPILER.
## Instead of CAMLOPT, VMSYS_COMPILE_CMD or similar.

################################################################
## OC_COMMON_[C|LD]FLAGS: for OCaml sources.
## Hardcoded in makefiles, not derived from ./configure.
# OC_COMMON_CFLAGS used in Makefile, Makefile.menhir
# for default rules for .cmo, .cmi
# for .cmx, COMPILE_NATIVE_MODULE uses OC_COMMON_CFLAGS and
# OC_NATIVE_CFLAGS (which is empty)
OC_COMMON_CFLAGS = [  ## OCaml compile flags
    ## "-g", ## controlled by --//config/ocaml:dbg (?)
    "-strict-sequence", "-principal", "-absname",
    "-w", "+a-4-9-40-41-42-44-45-48-70",
    "-warn-error", "+a", "-bin-annot",
    "-strict-formats"
]
## OC_COMMON_LDFLAGS used in Makefile to build ocamlc
OC_COMMON_LDFLAGS = [] # ["-g"] Bazel controls this by a CLI flag

### Command and flags to use for assembling ocamlopt-generated code
ASM = "@AS@"
asm = "@AS@"
### Extension of assembler files
S = "@S@"
EXT_ASM= ".@S@"
ext_asm = "." + "@S@"
ASM_CFI_SUPPORTED = "@asm_cfi_supported@" == "true"
asm_cfi_supported = "@asm_cfi_supported@" == "true"

AFL_INSTRUMENT = "@afl@" == "true"
afl_instrument = "@afl@" == "true"
FLAT_FLOAT_ARRAY = "@flat_float_array@" == "true"
FUNCTION_SECTIONS = "@function_sections@" == "true"

## FIXME: not for .mli files?
# Makefile.common:
OPTCOMPFLAGS = ["-function-sections"] if FUNCTION_SECTIONS else []

SUPPORTS_SHARED_LIBRARIES = "@supports_shared_libraries@" == "true"
supports_shared_libraries = "@supports_shared_libraries@" == "true"

### Extension for shared libraries
SO = "@SO@"
EXT_DLL = ".@SO@"

# Compile-time option to $(CC) to add a directory to be searched
# at run-time for shared libraries
RPATH = "@rpath@"

MKSHAREDLIBRPATH = "@mksharedlibrpath@"
DYNLINKOPTS = "@DLLIBS@"
NATDYNLINK = "@natdynlink@" == "true"
NATDYNLINKOPTS = "@natdynlinkopts@"


### Command and flags to use for assembling .S files (often with preprocessing)
ASPP = "@ASPP@"


### Path to the libtool script
LIBTOOL = "@top_builddir@/libtool"

### How to invoke the C preprocessor through the C compiler
CPP = "@CPP@".split(" ")

### How to invoke ar
ARCMD = "@AR@"
ar = "@AR@"

AWK = "@AWK@"

## native pack linker
PACKLD = "@PACKLD@$(EMPTY)"
native_pack_linker = "@PACKLD@"

################################################################

## bzl: not needed?
EMPTY = ""

## Arguments passed to the configure script
CONFIGURE_ARGS = "@CONFIGURE_ARGS@"
TOP_BUILDDIR = "@top_builddir@"

################################
## Bazel: building code, and packaging it for distribution, even
## locally, are completely separate concerns. The build need not know
## anything about where things are going to end up, so we disregard
## the installation stuff.  It can be provided separately.

## Exception: OCaml puts some of these paths into bytecode files.
PREFIX = "/usr/local"
EXEC_PREFIX = PREFIX
LIBDIR = EXEC_PREFIX + "/lib/ocaml"

ROOTDIR = "." ##FIXME


## Installation directories
# prefix = "@prefix@"
# exec_prefix = "@exec_prefix@"
# BINDIR = "@bindir@"
# datarootdir = "@datarootdir@"
# ### Where to install the standard library
# LIBDIR = "@libdir@"
### Where to install the stub code for the standard library
# STUBLIBDIR = "@libdir@/stublibs"
### Where to install the man pages
# Man pages for commands go in $(MANDIR)/man1
# Man pages for the library go in $(MANDIR)/man3
# MANDIR = "@mandir@"
# PROGRAMS_MAN_DIR="@mandir@/man1"
# LIBRARIES_MAN_DIR="@mandir@/man3"

### Do #! scripts work on your system?
### Beware: on some systems (e.g. SunOS 4), this will work only if
### the string "#!$(BINDIR)/ocamlrun" is less than 32 characters long.
### In doubt, set HASHBANGSCRIPTS to false.
SHEBANGSCRIPTS = "@shebangscripts@" == "true"
LONG_SHEBANG = "@long_shebang@" == "true"
# For compatibility
HASHBANGSCRIPTS = SHEBANGSCRIPTS

### Extension of object files
O = "@OBJEXT@"
EXT_OBJ = ".@OBJEXT@"
ext_obj = "." + "@OBJEXT@"

### How to tell the C compiler to output an object file
OUTPUTOBJ = "@outputobj@ " + EMPTY
c_output_obj = "@outputobj@"

### Extension of static libraries
A = "@libext@"
EXT_LIB= ".@libext@"
ext_lib = "." + "@libext@"

############# Configuration for the contributed libraries

### Which libraries to compile and install
# Currently available:
#       dynlink           Dynamic linking (bytecode and native)
#       (win32)unix       Unix system calls
#       str               Regular expressions and high-level string processing
#       systhreads        Same as threads, requires POSIX threads
OTHERLIBRARIES = "@otherlibraries@"

UNIX_OR_WIN32 = "@unix_or_win32@"
INSTALL_SOURCE_ARTIFACTS = "@install_source_artifacts@" == "true"

BYTECCLIBS = "@bytecclibs@".split(" ")
VM_LIBDEPS = "@bytecclibs@".split(" ")
# fld in utils:Config - bytecomp_c_libraries = "@bytecclibs@"
NATIVECCLIBS = "@nativecclibs@".split(" ")
SYS_LIBDEPS = "@nativecclibs@".split(" ")
# fld in utils:Config - native_c_libraries = "@nativecclibs@"

EXE = "@exeext@"
ext_exe = "@exeext@"

OUTPUTEXE = "@outputexe@ " + EMPTY

SYSLIB = "@syslib@"
MKLIB = "@mklib@"
SYSTHREAD_SUPPORT = "@systhread_support@" == "true"
CMXS = "@cmxs@"

################################################################
# Hardcoded in Makefile, used to construct build cmds:
## NB: rules must add attr: data = ["//runtime:primitives"],
PRIMITIVES = "//runtime:primitives"
DATA_PRIMS = [PRIMITIVES]
USE_RUNTIME_PRIMS = ["-use-prims", PRIMITIVES]

USE_STDLIB = ["-nostdlib", "-I", "../stdlib"]

################################################################
##  Flexlink stuff
# On Windows, MKDLL, MKEXE and MKMAINDLL must ultimately be equivalent to
#   flexlink $(FLEXLINK_FLAGS) [-exe|-maindll]
# or OCAML_FLEXLINK overriding will not work (see utils/config.mlp)

# OC_DLL_LDFLAGS only in testsuite/Makefile, for flexlink
OC_DLL_LDFLAGS = "@oc_dll_ldflags@"
# OC_EXE_LDFLAGS only in testsuite/Makefile, for flexlink
OC_EXE_LDFLAGS = "@oc_exe_ldflags@"

FLEXDLL_CHAIN = "@flexdll_chain@"
FLEXLINK_FLAGS = "@flexlink_flags@"

## from the configure script:
# Command to build executables
# Ultimately, MKEXE may build an executable using the C compiler or it may use
# a wrapper for a linker (i.e. flexlink). The build system must therefore not
# rely on $CFLAGS because these cannot be processed by flexlink (and are not
# passed)

## Bazel: we don't use these mk* vars since we use cc_binary rules to
## build executables.
mkdll, mkexe, mkmaindll = (
    "@mkdll_exp@",
    "@mkexe_exp@",
    "@mkmaindll_exp@"
)
MKEXE = "@mkexe@"
MKDLL = "@mkdll@"
MKMAINDLL = "@mkmaindll@"
MKEXEDEBUGFLAG = "@mkexedebugflag@"
# MKEXE_VIA_CC= [CC, OC_EXE_LDFLAGS, OC_CFLAGS, CFLAGS]
# MKEXE_VIA_CC_LDFLAGS = "@mkexe_via_cc_ldflags@"

RUNTIMED = "@debug_runtime@" == "true"
INSTRUMENTED_RUNTIME = "@instrumented_runtime@" == "true"
INSTRUMENTED_RUNTIME_LIBS = "@instrumented_runtime_libs@"
WITH_DEBUGGER = "@with_debugger@"
WITH_OCAMLDOC = "@ocamldoc@"
WITH_OCAMLTEST = "@ocamltest@"
WITH_FRAME_POINTERS = "@frame_pointers@" == "true"
WITH_PROFINFO = "@profinfo@" == "true"
PROFINFO_WIDTH = "@profinfo_width@"

LIBUNWIND_AVAILABLE = "@libunwind_available@"
LIBUNWIND_INCLUDE_FLAGS = "@libunwind_include_flags@"
LIBUNWIND_LINK_FLAGS = "@libunwind_link_flags@"

WITH_FPIC = "@fpic@" == "true"

FLAMBDA = "@flambda@" == "true"
WITH_FLAMBDA_INVARIANTS = "@flambda_invariants@" == "true"
flambda = "@flambda@" == "true"
with_flambda_invariants = "@flambda_invariants@" == "true"

WITH_CMM_INVARIANTS = "@cmm_invariants@" == "true"
with_cmm_invariants = "@cmm_invariants@" == "true"

FORCE_INSTRUMENTED_RUNTIME = "@force_instrumented_runtime@" == "true"
FORCE_SAFE_STRING = True
DEFAULT_SAFE_STRING = True

STDLIB_MANPAGES = "@stdlib_manpages@" == "true"
NAKED_POINTERS = False

# Deprecated variables

## Variables deprecated since OCaml 5.0

UNIXLIB = "unix"

## Variables renamed in OCaml 4.13

RUNTIMEI = "@instrumented_runtime@" == "true"

################################################################

## from utils/config.generated.ml.in
OCAML_BINDIR = "@ocaml_bindir@"
standard_library_default = "@ocaml_libdir@"

default_rpath = "@rpath@"
mksharedlibrpath = "@mksharedlibrpath@"

force_instrumented_runtime = "@force_instrumented_runtime@" == "true"

flat_float_array = "@flat_float_array@" == "true"

function_sections = "@function_sections@" == "true"

architecture = "@arch@"
model = "@model@"
system = "@system@"

with_frame_pointers = "@frame_pointers@" == "true"
profinfo = "@profinfo@" == "true"
profinfo_width = "@profinfo_width@"

ext_dll = "." + "@SO@"

host = "@host@"
target = "@target@"

systhread_supported = "@systhread_support@" == "true"

flexdll_dirs = [@flexdll_dir@]

WINDOWS_UNICODE = "@windows_unicode@" == "1"
windows_unicode = @windows_unicode@ != 0

IGNORE_MISSING_MLI = ["-w", "-70"]
