load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "bool_setting",
     "string_flag",
     "string_list_flag")

# load(":config_cc_toolchain.bzl", "config_cc_toolchain")

load("//bzl/rules:config_sys.bzl", "config_sys")

load("//bzl:rules.bzl",
     "compiler_module",
     "compiler_signature",
)

load("//vendor/mustach:BUILD_RULES.bzl", "mustache")

load(":BUILD_RULES.bzl",
     "ocaml_cc_config",
     "config_mkexe", "OCamlCcToolchainInfo", "config_cc_toolchain")

load("@ocaml_config//:BUILD.bzl", "OS", "OSREV", "HWARCH")
# print("OS: %s" % OS)
# print("OSREV: %s" % OSREV)
# print("ARCH: %s" % HWARCH)

package(default_visibility = ["//visibility:public"])

compiler_signature(
    name = "Config_cmi",
    src  = "config.mli",
    stdlib_deps   = ["//stdlib:Stdlib_cmi"],
    visibility = [
        "//ocamltest:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//utils:__pkg__",
    ]
)

compiler_module(
    name   = "Config",
    struct = "config.ml",
    sig    = "Config_cmi",
    warnings = {"disable": ["unused-value-declaration"]},
    # open   = ["//stdlib:Stdlib"],
    stdlib_deps   = [
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Option", # if not bootstrapping?
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
        # "//config:Config_cc",
    ],
    visibility = [
        "//asmcomp:__subpackages__",
        "//bin:__pkg__",
        "//bytecomp:__pkg__",
        "//debugger:__pkg__",
        "//driver:__pkg__",
        "//file_formats:__pkg__",
        "//lambda:__pkg__",
        "//middle_end:__subpackages__",
        "//ocamltest:__pkg__",
        "//otherlibs/dynlink:__pkg__",
        "//parsing:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
        "//typing:__pkg__",
        "//utils:__pkg__",
        "//compilerlibs:__pkg__"
    ]
)

## TODO: custom rule, to extract stdlib dir w/workdir and insert into
## Config. a mustache rule won't do since the stdlib dir changes with
## each stage of the bootstrap? Or figure out how to make the mustache
## rule depend on //stdlib. More generally the Config should reflect
## the configuration of the current build stage, since additional
## config settings may depend on boot stage. With the makefiles we get
## one Config, derived from ./configure.
#
## One option would be to convert config.ml.json itself to a template
## with "standard_library_default": "{{stdlib_dir}}". Then we would
## need to run mustache twice, once to generate config.ml.json, then
## to generate config.ml. Or for the first step we could use
## ctx.actions.expand_template.
mustache(
    name = "config_ml",
    out      = "config.ml",
    template = "config.mustache.ml",
    json     = "config.json", # "config.ml.json",
    # stdlib = "//stdlib"
)

## runs merge_json to merge data from selected cc tc with initial json
## file:
ocaml_cc_config(
    name = "config_json",
    json = "config.initial.json",
    out  = "config.json",
    # asmopts = [
    #     "-arch", "x86_64",
    #     "-g", "-static",
    #     "-flto",
    #     "-ffunction-sections"
    # ],
    # linkopts = [
    #     "-v"
    # ],
    copts    = []
)

# this is a singleton rule whose only job is to inject the link
# command derived from the selected cc toolchain (in variable
# BAZEL_LINK_CMD) into config.ml.json.tplt, yielding config.ml.json,
# which is used above to generate config.ml.
config_mkexe(
    name     = "__config_ml_json__",
    out      = "config.ml.json",
    template = "config.ml.json.tplt",
    tc       = ":config.cc",
    linkopts = select({
        "//platform/target/os:linux?": [
            ## .configure emits these, we ignore since they are compile opts
            # "-O2",
            # "-fno-strict-aliasing",
            # "-fwrapv"
            # "-pthread"
            "-Wl,-E"
        ],
        "//platform/target/os:macos?": [
            # "-O2", "-fno-strict-aliasing",
            # "-fwrapv",
            # "-Wl,-no_compact_unwind" ##FIXME: not for zig tc
        ],

        ## zig link options
        # --emit-static-lib Enable linker job to emit a static library.
        # -fapple-link-rtlib Force linking the clang builtins runtime library
        # -shared-libsan Dynamically link the sanitizer runtime
        # -static-libsan Statically link the sanitizer runtime
        # -Wl,<arg> Pass the comma separated arguments in <arg> to the linke
        # -Xlinker <arg> Pass <arg> to the linker
        "//conditions:default": []
    })
)

config_cc_toolchain(
    name = "config.cc",
    out  = "config_cc.json",
    # env  = select({
    #     # mac...
    #     "//conditions:default": {
    #         "DEVELOPER_DIR": `xcode-select -p`
    #         "SDKROOT": `xcsrun --show-sdk-path`
    #     }
    # })
)

compiler_module(
    name   = "Config_cc_toolchain",
    struct = "config_cc_toolchain.ml",
    stdlib_deps   = ["//stdlib:Stdlib"]
)

mustache(
    name = "__config_cc_ml__",
    out  = "config_cc_toolchain.ml",
    json = "config_cc_toolchain.json",
    template = "config_cc_toolchain.ml.mustache"
)

## config_cc_toolchain inspects the toolchain selected by bazel,
# and writes its description out to a json file, so that
# it can be transferred to OCaml's Config module fields.
config_cc_toolchain(
    name = "config.cc_toolchain",
    out  = "config_cc_toolchain.json",
    copts = ["-foo"],
    defines = ["BAR"],
    linkopts = ["-Wfoobar"]
)

config_sys(
    name = "config.sys",
    out  = "config_sys.json",
)

        ## GLOBAL CONFIGURABLE DEFAULTS
        # _debug           = attr.label(default = "@ocaml//debug"),
        # _cmt             = attr.label(default = "@ocaml//cmt"),
        # _keep_locs       = attr.label(default = "@ocaml//keep-locs"),
        # _noassert        = attr.label(default = "@ocaml//noassert"),
        # _opaque          = attr.label(default = "@ocaml//opaque"),
        # _short_paths     = attr.label(default = "@ocaml//short-paths"),
        # _strict_formats  = attr.label(default = "@ocaml//strict-formats"),
        # _strict_sequence = attr.label(default = "@ocaml//strict-sequence"),
        # _verbose         = attr.label(default = "@ocaml//verbose"),


string_flag(name = "target_host",
            values = ["vm", "sys", "amd64", "arm64"],
            build_setting_default = "vm")

string_list_flag(name = "manifest", build_setting_default = [])

################################################################
bool_flag( name = "debug", build_setting_default = False)
config_setting(name = "debug?", flag_values = {":debug": "True"})

bool_flag( name = "instrumented", build_setting_default = False)
config_setting(name = "instrumented?", flag_values = {":instrumented": "True"})

####
bool_flag( name = "sig_src", build_setting_default = False)
config_setting(name = "sig_src?", flag_values = {":sig_src": "True"})

# label_flag( name = "camlheaders", build_setting_default = "//stdlib:camlheaders")

# label_flag( name = "primitives",
#             build_setting_default = "//runtime:primitives")

config_setting(
    name = "macos_fastbuild?",
    values = {"compilation_mode": "fastbuild"},
    constraint_values = [
        "@platforms//os:macos",
    ]
)

## FIXME: rename //config/ocaml:verbose
bool_flag( name = "verbose",
           tags = ["diagnostics", "verbosity"],
           build_setting_default = False)

################################################################
##FIXME: what is the optimal way to select for flambda?
# bool_flag(
#     name = "flambda",
#     build_setting_default = False,
#     visibility = ["//visibility:public"]
# )
# config_setting(
#     name = "flambda?",
#     flag_values = {":flambda": "True"},
# )

################################################################
config_setting(
    name = "pic",
    constraint_values = [
        # "//config/pic" blah blah
        "@platforms//os:linux",
    ]
)
