load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "bool_setting",
     "string_flag",
     "string_list_flag")

load("//bzl/rules:config_cc_toolchain.bzl", "config_cc_toolchain")
load("//bzl/rules:config_sys.bzl", "config_sys")

load("//bzl:rules.bzl",
     "compiler_module",
     "compiler_signature",
)
package(default_visibility = ["//visibility:public"])

compiler_module(
    name   = "Config_cc",
    struct = "config_cc.ml",
)

genrule(
    name = "__config_cc_ml__",
    outs = ["config_cc.ml"],
    srcs = [
        "config_cc.json",
        "config_cc.ml.mustache"
    ],
    tools = ["//vendor/mustach"],
    cmd = " ".join([
        "$(execpath //vendor/mustach)",
        "$(location config_cc.json)",
        "$(location config_cc.ml.mustache)",
        ">",
        "$@"
    ]),
    toolchains = ["//profile/system/local"],
    visibility = ["//boot:__pkg__"]
)

config_cc_toolchain(
    name = "config.cc",
    out  = "config_cc.json"
)

config_sys(
    name = "config.sys",
    out  = "config_sys.json",
)

genrule(
    name = "__config_ml__",
    outs = ["config.ml"],
    srcs = [
        "config.ml.json",
        "config.ml.mustache"
    ],
    tools = ["//vendor/mustach"],
    cmd = " ".join([
        "$(execpath //vendor/mustach)",
        "$(location config.ml.json)",
        "$(location config.ml.mustache)",
        ">",
        "$@"
    ]),
    toolchains = ["//profile/system/local"],
    visibility = ["//boot:__pkg__"]
)


        ## GLOBAL CONFIGURABLE DEFAULTS
        # _debug           = attr.label(default = "@ocaml//debug"),
        # _cmt             = attr.label(default = "@ocaml//cmt"),
        # _keep_locs       = attr.label(default = "@ocaml//keep-locs"),
        # _noassert        = attr.label(default = "@ocaml//noassert"),
        # _opaque          = attr.label(default = "@ocaml//opaque"),
        # _short_paths     = attr.label(default = "@ocaml//short-paths"),
        # _strict_formats  = attr.label(default = "@ocaml//strict-formats"),
        # _strict_sequence = attr.label(default = "@ocaml//strict-sequence"),
        # _verbose         = attr.label(default = "@ocaml//verbose"),


string_flag(name = "target_host",
            values = ["vm", "sys", "amd64", "arm64"],
            build_setting_default = "vm")

string_list_flag(name = "manifest", build_setting_default = [])

bool_flag( name = "debug", build_setting_default = False)
config_setting(name = "debug?", flag_values = {":debug": "True"})

bool_flag( name = "instrumented", build_setting_default = False)
config_setting(name = "instrumented?", flag_values = {":instrumented": "True"})

bool_flag( name = "bin-annot", build_setting_default = True)
config_setting(name = "bin-annot?", flag_values = {":bin-annot": "True"})

bool_flag( name = "principal", build_setting_default = True)
config_setting(name = "principal?", flag_values = {":principal": "True"})

bool_flag( name = "sig_src", build_setting_default = False)
config_setting(name = "sig_src?", flag_values = {":sig_src": "True"})

bool_flag( name = "absname", build_setting_default = True)
config_setting(name = "absname?", flag_values = {":absname": "True"})


label_flag( name = "primitives",
            build_setting_default = "//runtime:primitives")

string_list_flag(name = "warnings",
                 build_setting_default = [
                     # "-w", "+a-4-9-41-42-44-45-48",
                     "-warn-error", "+A"])

config_setting(
    name = "macos_fastbuild?",
    values = {"compilation_mode": "fastbuild"},
    constraint_values = [
        "@platforms//os:macos",
    ]
)

bool_flag( name = "verbose", build_setting_default = False)

################################################################
##FIXME: what is the optimal way to select for flambda?
bool_flag(
    name = "flambda",
    build_setting_default = False,
    visibility = ["//visibility:public"]
)
config_setting(
    name = "flambda?",
    flag_values = {":flambda": "True"},
)

################################################################
config_setting(
    name = "pic",
    constraint_values = [
        # "//config/pic" blah blah
        "@platforms//os:linux",
    ]
)
