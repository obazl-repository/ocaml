load("//bzl:rules.bzl",
     "boot_archive",
     "boot_library",
     "compiler_module",
     "compiler_signature",
)

load("//config:CONFIG.bzl",
     # "RUNTIME_OCAMLRUN",
     "OC_COMMON_CFLAGS",
     "IGNORE_MISSING_MLI",
     "PLATFORM_CFLAGS"
     # "OC_COMMON_CFLAGS",
     # "OC_NATIVE_CFLAGS",
     # "ROOT_MODULE_OPTS",
     # "ROOT_SIG_OPTS"
     )

MODULE_OPTS = ["-w", "-40"] #OC_COMMON_CFLAGS + PLATFORM_CFLAGS
SIG_OPTS    = [] # OC_COMMON_CFLAGS + PLATFORM_CFLAGS
# MODULE_OPTS = OC_COMMON_CFLAGS
# SIG_OPTS    = OC_COMMON_CFLAGS

# MODULE_OPTS = ROOT_MODULE_OPTS
# SIG_OPTS    = ROOT_MODULE_OPTS

STDLIB = []

# boot_archive(
boot_library(
    name = "driver",
    manifest  = [
        ":Compenv",
        ":Compile",
        ":Compmisc",
        ":Errors",
        ":Main",
        ":Main_args",
        ":Maindriver",
        ":Makedepend",
        ":Optcompile",
        ":Opterrors",
        ":Optmain",
        ":Optmaindriver",
        ":Pparse",
        ":Compile_common",
    ],
    visibility = [
        "//boot:__subpackages__",
        "//testsuite:__pkg__"
    ]
)

# boot_library(
#     name = "ocamlcommon",
#     manifest  = [
#         ":Compenv",
#         ":Compile_common",
#         ":Compmisc",
#         ":Main_args",
#         ":Makedepend",
#         ":Pparse",
#     ],
#     visibility = ["//compilerlibs:__pkg__"]
# )

## compilerlibs/Makefile.compilerlibs
# boot_library(
#     name = "ocamlbytecomp",
#     manifest  = [
#         ":Compile",
#         ":Errors",
#         ":Maindriver",
#     ],
#     visibility = ["//compilerlibs:__pkg__"]
# )

################################################################
compiler_module(
    name   = "Compenv",
    struct = "compenv.ml",
    sig    = "Compenv_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Location",
        # "//stdlib:Stdlib.Arg",
        # "//stdlib:Stdlib.Filename",
        # "//stdlib:Stdlib.Lexing",
        # "//stdlib:Stdlib.List",
        # "//stdlib:Stdlib.Option",
        # "//stdlib:Stdlib.Printexc",
        # "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Scanf",
        # "//stdlib:Stdlib.String",
        # "//stdlib:Stdlib.Sys",
        "//utils:Ccomp",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Misc",
        "//utils:Profile",
        "//utils:Warnings",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Compenv_cmi",
    src  = "compenv.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
        "//utils:Clflags_cmi",
        "//stdlib:Stdlib.Arg",
    ]
)

compiler_module(
    name   = "Compile",
    struct = "compile.ml",
    sig    = "Compile_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Compile_common", ## (Driver Compile_common)
        "//typing:Typedtree",
        "//lambda:Translmod",
        "//lambda:Simplif",
        "//utils:Profile",
        "//lambda:Printlambda",
        "//bytecomp:Printinstr",
        "//utils:Misc",
        "//bytecomp:Emitcode",
        "//utils:Clflags",
        "//bytecomp:Bytegen"
    ],
    visibility = ["//bytecomp:__pkg__"]
)

compiler_signature(
    name = "Compile_cmi",
    src  = "compile.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Compile_common", ## (Driver Compile_common)
        "//typing:Typedtree",
        "//bytecomp:Instruct_cmi",
        "//typing:Ident",
        "//utils:Clflags",
    ]
)

compiler_module(
    name   = "Compile_common",
    struct = "compile_common.ml",
    sig    = "Compile_common_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Pparse", ## (Driver Pparse)
        ":Compmisc", ## (Driver Compmisc)
        ":Compenv", ## (Driver Compenv)
        "//utils:Warnings",
        "//typing:Typemod",
        "//typing:Typedtree",
        "//typing:Typecore",
        "//stdlib:Stdlib.String",
        "//utils:Profile",
        "//typing:Printtyped",
        "//typing:Printtyp",
        "//parsing:Printast",
        "//parsing:Pprintast",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//typing:Includemod",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//utils:Config",
        ## (Compiler_pass)
        "//utils:Clflags",
        "//parsing:Builtin_attributes",
    ],
    visibility = ["//bytecomp:__pkg__"]
)

compiler_signature(
    name = "Compile_common_cmi",
    src  = "compile_common.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//typing:Typedtree_cmi",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Format",
        "//typing:Env_cmi"
    ]
)

compiler_module(
    name   = "Compmisc",
    struct = "compmisc.ml",
    sig    = "Compmisc_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Compenv", ## (Driver Compenv)
        "//utils:Warnings",
        "//typing:Types",
        "//typing:Typemod",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Option",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//utils:Config",
        "//utils:Clflags",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__subpackages__",
    ]
)

compiler_signature(
    name = "Compmisc_cmi",
    src  = "compmisc.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
        "//typing:Env_cmi",
        "//utils:Clflags",
    ]
)

compiler_module(
    name   = "Errors",
    struct = "errors.ml",
    sig    = "Errors_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Location"
    ],
    visibility = ["//bytecomp:__pkg__"]
)

compiler_signature(
    name = "Errors_cmi",
    src  = "errors.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
    ]
)

compiler_module(
    name   = "Main",
    struct = "main.ml",
    opts = MODULE_OPTS + IGNORE_MISSING_MLI,
    deps   = STDLIB + [
        ":Maindriver", ## (Driver Maindriver)
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Format",
    ],
    visibility = [
        "//bin:__pkg__",
        "//boot:__subpackages__",
        "//dev:__subpackages__"
    ]
)

compiler_module(
    name   = "Main_args",
    struct = "main_args.ml",
    sig    = "Main_args_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Compenv", ## (Driver Compenv)
        "//utils:Warnings",
        "//stdlib:Stdlib.Sys",
        "//utils:Profile",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Option",
        "//utils:Misc",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        ## (Int_arg_helper)
        "//stdlib:Stdlib.Format",
        ## (Float_arg_helper)
        "//stdlib:Stdlib.Filename",
        "//utils:Config",
        ## (Compiler_pass)
        "//utils:Clflags",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
    ]
)

compiler_signature(
    name = "Main_args_cmi",
    src  = "main_args.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Arg",
    ]
)

compiler_module(
    name   = "Maindriver",
    struct = "maindriver.ml",
    sig    = "Maindriver_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Makedepend", ## (Driver Makedepend)
        ":Main_args", ## (Driver Main_args)
        ":Compmisc", ## (Driver Compmisc)
        ":Compile", ## (Driver Compile)
        ":Compenv", ## (Driver Compenv)
        "//utils:Warnings",
        "//stdlib:Stdlib.String",
        "//utils:Profile",
        "//stdlib:Stdlib.Printf",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//utils:Config",
        "//utils:Clflags",
        "//bytecomp:Bytepackager",
        ## (Bytelink)
        "//bytecomp:Bytelibrarian",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = [
        "//bytecomp:__pkg__"
    ]
)

compiler_signature(
    name = "Maindriver_cmi",
    src  = "maindriver.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
    ]
)

compiler_module(
    name   = "Makedepend",
    struct = "makedepend.ml",
    sig    = "Makedepend_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Depend",
        "//parsing:Lexer",
        "//parsing:Location",
        "//parsing:Parse",
        "//parsing:Parser",
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Misc",
        ":Compenv",
        ":Pparse",
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//tools:__pkg__",
    ]
)

compiler_signature(
    name = "Makedepend_cmi",
    src  = "makedepend.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib_cmi",
    ]
)

compiler_module(
    name   = "Optcompile",
    struct = "optcompile.ml",
    sig    = "Optcompile_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Compile_common", ## (Driver Compile_common)
        "//typing:Typedtree",
        "//lambda:Translmod",
        "//lambda:Simplif",
        "//utils:Profile",
        "//lambda:Printlambda",
        "//utils:Misc",
        "//middle_end/flambda:Flambda_middle_end",
        "//utils:Config",
        "//middle_end:Compilenv",
        "//middle_end/closure:Closure_middle_end",
        "//utils:Clflags",
        "//asmcomp:Asmgen"
    ],
    visibility = ["//asmcomp:__pkg__"]
)

compiler_signature(
    name = "Optcompile_cmi",
    src  = "optcompile.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        ":Compile_common", ## (Driver Compile_common)
        "//typing:Typedtree",
        "//utils:Clflags",
        "//middle_end:Backend_intf_cmi"
    ]
)

compiler_module(
    name   = "Opterrors",
    struct = "opterrors.ml",
    sig    = "Opterrors_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//parsing:Location"
    ],
    visibility = ["//asmcomp:__pkg__"]
)

compiler_signature(
    name = "Opterrors_cmi",
    src  = "opterrors.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//stdlib:Stdlib.Format",
    ]
)

compiler_module(
    name   = "Optmain",
    struct = "optmain.ml",
    opts = MODULE_OPTS + IGNORE_MISSING_MLI,
    deps   = STDLIB + [
        ":Optmaindriver",
    ],
    visibility = [
        "//boot:__subpackages__",
        "//bin:__pkg__",
        "//dev:__subpackages__",
        "//:__pkg__"
    ]
)

compiler_module(
    name   = "Optmaindriver",
    struct = "optmaindriver.ml",
    sig    = "Optmaindriver_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        ":Optcompile", ## (Driver Optcompile)
        ":Makedepend", ## (Driver Makedepend)
        ":Main_args", ## (Driver Main_args)
        ":Compmisc", ## (Driver Compmisc)
        ":Compenv", ## (Driver Compenv)
        "//utils:Warnings",
        "//stdlib:Stdlib.String",
        "//utils:Profile",
        "//asmcomp:Proc",
        "//stdlib:Stdlib.Printf",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//middle_end/flambda:Import_approx",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//utils:Config",
        "//middle_end:Compilenv",
        "//utils:Clflags",
        "//asmcomp:Asmpackager",
        ## (Asmlink)
        "//asmcomp:Asmlibrarian",
        "//stdlib:Stdlib.Arg",
        ## (Arch)
    ],
    visibility = [
        "//asmcomp:__pkg__"
    ]
)

compiler_signature(
    name = "Optmaindriver_cmi",
    src  = "optmaindriver.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//middle_end:Backend_intf_cmi",
        "//stdlib:Stdlib.Format",
    ]
)

compiler_module(
    name   = "Pparse",
    struct = "pparse.ml",
    sig    = "Pparse_cmi",
    opts = MODULE_OPTS,
    deps   = STDLIB + [
        "//utils:Warnings",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//utils:Profile",
        "//stdlib:Stdlib.Printf",
        "//parsing:Parse",
        "//utils:Misc",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//utils:Config",
        "//utils:Clflags",
        "//utils:Ccomp",
        "//parsing:Ast_mapper",
        "//parsing:Ast_invariants"
    ],
    visibility = [
        "//bytecomp:__pkg__",
        "//tools:__pkg__",
        "//toplevel:__pkg__",
    ]
)

compiler_signature(
    name = "Pparse_cmi",
    src  = "pparse.mli",
    opts = SIG_OPTS,
    deps   = STDLIB + [
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Format",
    ]
)

