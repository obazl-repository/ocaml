load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_executable",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_repl",
     "bootstrap_signature",
     "bootstrap_test",
)

load("//config:BUILD.bzl",
     "ROOT_MODULE_OPTS",
     "ROOT_SIG_OPTS"
     )

load("//stdlib:BUILD.bzl", "STDLIB_MODULE_NAMES")

MODULE_OPTS = ROOT_MODULE_OPTS
SIG_OPTS    = ROOT_MODULE_OPTS # + ["-nopervasives"]

################################################################
## the repl command is 'ocaml', which is a target in the root
## Makefile. OBazl puts it here in //toplevel
# TOPLEVELSTART=toplevel/topstart.cmo
# ocaml_dependencies := \
#   compilerlibs/ocamlcommon.cma \
#   compilerlibs/ocamlbytecomp.cma \
#   compilerlibs/ocamltoplevel.cma $(TOPLEVELSTART)

# PERVASIVES=$(STDLIB_MODULES) outcometree topdirs toploop

# to run the repl:
# ifeq "$(UNIX_OR_WIN32)" "unix"
# EXTRAPATH=
# RLWRAP detected by ./configure
# OC_TOPFLAGS = -nostdlib -I stdlib -I toplevel -noinit $(TOPINCLUDES) $(TOPFLAGS)

# runtop:
# 	$(MAKE) coldstart
# 	$(MAKE) ocamlc
# 	$(MAKE) otherlibraries
# 	$(MAKE) ocaml
# 	@$(EXTRAPATH) $(RLWRAP) $(OCAMLRUN) ./ocaml$(EXE) $(OC_TOPFLAGS)

# bootstrap_executable(
#     name = "ocaml.tmp",
#     main = ":Topstart",
#     opts = ["-linkall"],
#     args = ["-nostdlib",
#             "-I", "/Users/gar/ocaml/ocaml/bazel-bin/stdlib/__boot",
#             "-noinit"],
#     deps = [
#         "//compilerlibs:ocamlcommon",
#         "//bytecomp:ocamlbytecomp",
#         ":ocamltoplevel",
#     ]
# )
bootstrap_repl(
    name = "ocaml",
    main = ":Topstart",
    opts = ["-linkall"],
    ## args to be passed if the exe is run using `bazel run`:
    args = ["-nostdlib",
            "-I",
            ## (I find no better way to put stdlib in srch path):
            "../../../stdlib/__boot",
            "-noinit"],
    deps = [
        "//compilerlibs:ocamlcommon",
        "//bytecomp:ocamlbytecomp",
        ":ocamltoplevel",
    ],
    expunge = STDLIB_MODULE_NAMES + ["outcometree", "topdirs", "toploop"]
)

# genrule(
#     name = "gen_ocaml",
#     outs = ["ocaml"],
#     executable = True,
#     srcs = [":ocaml.tmp", "//utils:expunge"],
#     tools = ["//boot:ocamlrun"],
#     cmd  = " ".join([
#         "$(execpath //boot:ocamlrun)",
#         "$(location //utils:expunge)",
#         "$(location :ocaml.tmp)",
#         "$(location ocaml)",
#     ] + STDLIB_MODULE_NAMES + ["outcometree", "topdirs", "toploop"]
#     )
# )

# bootstrap_test(
#     name = "ocaml.test",
#     main = ":ocaml",
# )


################################################################
## dev/test, build all
bootstrap_library(
    name = "toplevel",
    manifest  = [
        ":Expunge",
        ":Genprintval",
        ":Topcommon",
        ":Topdirs",
        ":Toploop",
        ":Topstart",
    ],
    # deps  = [
    #     ":Topeval_cmi",
    #     ":Topmain_cmi",
    #     ":Trace_cmi",
    # ],
)

################################################################
# # root Makefile:
# ocamlnat_dependencies := \
#   compilerlibs/ocamlcommon.cmxa \
#   compilerlibs/ocamloptcomp.cmxa \
#   compilerlibs/ocamlbytecomp.cmxa \
#   otherlibs/dynlink/dynlink.cmxa \
#   compilerlibs/ocamltoplevel.cmxa \
#   $(TOPLEVELSTART:.cmo=.cmx)

# # compilerlibs/Makefile.compilerlibs:
# compilerlibs/ocamltoplevel.cmxa: $(OPTTOPLEVEL_CMI) $(OPTTOPLEVEL:.cmo=.cmx)
# 	$(CAMLOPT) -a -o $@ -I toplevel/native $(OPTTOPLEVEL:.cmo=.cmx)

# ocamlnat$(EXE): $(ocamlnat_dependencies)
# 	$(CAMLOPT_CMD) $(LINKFLAGS) -linkall -I toplevel/native -o $@ $^

## defined in compilerlibs/Makefile.compilerlibs:
TOPLEVEL = [
    ":Topeval",
    ":Topmain",
    ":Trace",
    ":Genprintval",
    ":Topcommon",
    ":Topdirs",
    ":Toploop",
]

TOPLEVEL_CMI = [
    ":Topeval_cmi",
    ":Topmain_cmi",
    ":Trace_cmi",
    ":Topcommon_cmi",
    ":Topdirs_cmi",
    ":Toploop_cmi",
]

bootstrap_archive(
    name = "ocamltoplevel", # //toplevel:archive instead of ocamltoplevel?
    manifest  = TOPLEVEL,
    # deps      = TOPLEVEL_CMI
)

################################################################
bootstrap_module(
    name   = "Expunge",
    struct = "expunge.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//stdlib:Stdlib.Sys",
        "//bytecomp:Symtable",
        "//lambda:Runtimedef",
        "//stdlib:Stdlib.Printexc",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Digest",
        "//bytecomp:Bytesections",
        "//stdlib:Stdlib.Array",
    ],
    visibility = ["//utils:__pkg__"]
)

bootstrap_module(
    name   = "Genprintval",
    struct = "genprintval.ml",
    sig    = "Genprintval_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Types",
        "//parsing:Syntaxerr",
        "//typing:Printtyp",
        "//stdlib:Stdlib.Printexc",
        "//typing:Predef",
        "//typing:Path",
        "//parsing:Parse",
        "//typing:Outcometree_cmi",
        "//typing:Oprint",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//parsing:Lexer",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//typing:Datarepr",
        "//typing:Ctype",
        "//stdlib:Stdlib.Bytes",
        "//typing:Btype",
    ]
)

bootstrap_signature(
    name = "Genprintval_cmi",
    src  = "genprintval.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        "//typing:Path",
        "//typing:Outcometree_cmi",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
    ]
)

bootstrap_module(
    name   = "Topcommon",
    struct = "topcommon.ml",
    sig    = "Topcommon_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Dll",
        "//driver:Compenv",
        "//driver:Compmisc",
        "//parsing:Lexer",
        "//parsing:Ast_helper",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parse",
        "//parsing:Parsetree_cmi",
        "//parsing:Pprintast",
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.String",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Oprint",
        "//typing:Outcometree_cmi",
        "//typing:Path",
        "//typing:Predef",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Load_path",
        "//utils:Misc",
        ":Genprintval",
        "//driver:Pparse",
        "//parsing:Printast",
        ##"//otherlibs/str:Str",
        #### (Mb)
        #### (Mod)
    ],
    visibility = ["//toplevel/byte:__pkg__"]
)

bootstrap_signature(
    name = "Topcommon_cmi",
    src  = "topcommon.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Genprintval",
        "//utils:Warnings",
        "//typing:Types",
        "//typing:Path",
        "//parsing:Parsetree_cmi",
        "//typing:Outcometree_cmi",
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Lexing",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//stdlib:Stdlib.Buffer",
    ]
)

bootstrap_module(
    name   = "Topdirs",
    struct = "topdirs.ml",
    sig    = "Topdirs_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Toploop",
        ":Topeval",
        "//utils:Warnings",
        "//typing:Types",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//typing:Printtyp",
        "//typing:Predef",
        "//typing:Path",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//typing:Env",
        "//bytecomp:Dll",
        "//typing:Ctype",
        "//utils:Config",
        "//driver:Compenv",
        "//utils:Clflags",
        "//typing:Btype",
        "//parsing:Asttypes_cmi",
        "//parsing:Ast_helper",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = ["//toplevel/byte:__pkg__"]
)

bootstrap_signature(
    name = "Topdirs_cmi",
    src  = "topdirs.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_module(
    name   = "Topeval",
    struct = select({
        # "//toplevel:bytecode": "//toplevel/byte:topeval.ml",
        # "//toplevel:native"  : "//toplevel/native:topeval.ml",
        "//conditions:default":  "//toplevel/byte:topeval.ml",
    }),
    sig    = ":Topeval_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Bytegen",
        "//bytecomp:Dll",
        "//bytecomp:Emitcode",
        "//bytecomp:Meta",
        "//bytecomp:Opcodes",
        "//bytecomp:Printinstr",
        "//bytecomp:Symtable",
        "//driver:Compmisc",
        "//file_formats:Cmo_format_cmi",
        "//lambda:Printlambda",
        "//lambda:Simplif",
        "//lambda:Translmod",
        "//parsing:Asttypes_cmi",
        "//parsing:Location",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Sys",
        "//toplevel:Topcommon",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Includemod",
        "//typing:Outcometree_cmi",
        "//typing:Persistent_env",
        "//typing:Predef",
        "//typing:Printtyp",
        "//typing:Printtyped",
        "//typing:Typecore",
        "//typing:Typedtree",
        "//typing:Typemod",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
        #### (LongString)
    ],
    visibility = ["//toplevel:__pkg__"]
)

bootstrap_signature(
    name = "Topeval_cmi",
    src  = "topeval.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Topcommon",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

bootstrap_module(
    name   = "Toploop",
    struct = "toploop.ml",
    sig    = "Toploop_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Topeval_cmi",
        ":Topcommon",
        "//utils:Warnings",
        "//typing:Typetexp",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//parsing:Lexer",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//typing:Env",
        "//utils:Config",
        "//driver:Compmisc",
        "//driver:Compenv",
        "//utils:Clflags",
        "//stdlib:Stdlib.Buffer",
        "//typing:Btype",
    ],
    visibility = [
        "//tools:__pkg__",
        "//toplevel/byte:__pkg__"
    ]
)

bootstrap_signature(
    name = "Toploop_cmi",
    src  = "toploop.mli",
    opts = SIG_OPTS,
    deps   = [
        "//utils:Warnings",
        "//typing:Types",
        "//typing:Path",
        "//parsing:Parsetree_cmi",
        "//typing:Outcometree_cmi",
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
    ]
)

bootstrap_module(
    name   = "Topmain",
    struct = select({
        # "//toplevel:bytecode": "//toplevel/byte:topmain.ml",
        # "//toplevel:native"  : "//toplevel/native:topmain.ml",
        "//conditions:default":  "//toplevel/byte:topmain.ml",
    }),
    sig    = ":Topmain_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Trace",
        ":Topeval",
        "//toplevel:Toploop",
        "//toplevel:Topdirs",
        "//toplevel:Topcommon",
        "//typing:Types",
        "//stdlib:Stdlib.Sys",
        "//typing:Printtyp",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Printexc",
        "//typing:Path",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//driver:Main_args",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//typing:Env",
        "//typing:Ctype",
        "//driver:Compmisc",
        "//driver:Compenv",
        "//utils:Clflags",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = ["//toplevel:__pkg__"]
)

bootstrap_signature(
    name = "Topmain_cmi",
    src  = "topmain.mli",
    opts = SIG_OPTS + ["-nopervasives"],
    deps   = [
    ],
    visibility = ["//toplevel:__subpackages__"]
)

bootstrap_module(
    name   = "Topstart",
    struct = "topstart.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":Topmain",
    ]
)

bootstrap_module(
    name   = "Trace",
    struct = select({
        # "//toplevel:bytecode": "//toplevel/byte:trace.ml",
        # "//toplevel:native"  : "//toplevel/native:trace.ml",
        "//conditions:default":  "//toplevel/byte:trace.ml",
    }),
    sig    = ":Trace_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Topeval",
        "//toplevel:Topcommon", ## (Toplevel Topcommon)
        "//typing:Types",
        "//typing:Printtyp",
        "//typing:Predef",
        "//typing:Path",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//bytecomp:Meta",
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
        "//typing:Ctype",
        "//parsing:Asttypes_cmi",
    ],
    visibility = ["//toplevel:__pkg__"]
)

bootstrap_signature(
    name = "Trace_cmi",
    src  = "trace.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        "//typing:Path",
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

