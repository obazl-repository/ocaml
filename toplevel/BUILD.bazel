load("//bzl:rules.bzl",
     "bootstrap_repl",
     "build_tool_vm",
     "compiler_library",
     "compiler_module",
     "compiler_signature",
)
load("//bzl/rules:COMPILER.bzl",
     "OCAMLC_PROLOGUE",
     "OCAML_COMPILER_OPTS")

load("//tools:TOOL_RULES.bzl", "ocaml_tool_vm")

load("//tools:TOOL_RUNNERS.bzl", "run_repl")

load("//stdlib:BUILD_STDLIB.bzl", "STDLIB_MODULE_NAMES")

load(":BUILD_RULES.bzl", "run_expunger")


exports_files(["repl_runner.sh"])

MODULE_OPTS = []
SIG_OPTS    = []

################################################################
## the repl command is 'ocaml', which is a target in the root
## Makefile. OBazl puts it here in //toplevel
# TOPLEVELSTART=toplevel/topstart.cmo
# ocaml_dependencies := \
#   compilerlibs/ocamlcommon.cma \
#   compilerlibs/ocamlbytecomp.cma \
#   compilerlibs/ocamltoplevel.cma $(TOPLEVELSTART)

# PERVASIVES=$(STDLIB_MODULES) outcometree topdirs toploop

# to run the repl:
# ifeq "$(UNIX_OR_WIN32)" "unix"
# EXTRAPATH=
# RLWRAP detected by ./configure
# OC_TOPFLAGS = -nostdlib -I stdlib -I toplevel -noinit $(TOPINCLUDES) $(TOPFLAGS)

# runtop:
# 	$(MAKE) coldstart
# 	$(MAKE) ocamlc
# 	$(MAKE) otherlibraries
# 	$(MAKE) ocaml
# 	@$(EXTRAPATH) $(RLWRAP) $(OCAMLRUN) ./ocaml$(EXE) $(OC_TOPFLAGS)

# ./boot/ocamlrun ./boot/ocamlc -nostdlib -I ./boot -use-prims runtime/primitives -g -I toplevel/byte -linkall -o ocaml.tmp compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma compilerlibs/ocamltoplevel.cma toplevel/topstart.cmo

# ./boot/ocamlrun expunge ocaml.tmp ocaml  camlinternalFormatBasics stdlib stdlib__Either stdlib__Sys stdlib__Obj stdlib__Atomic camlinternalLazy stdlib__Lazy stdlib__Seq stdlib__Option stdlib__Result stdlib__Bool stdlib__Char stdlib__Uchar stdlib__List stdlib__Int stdlib__Bytes stdlib__String stdlib__Unit stdlib__Marshal stdlib__Array stdlib__Float stdlib__Int32 stdlib__Int64 stdlib__Nativeint stdlib__Lexing stdlib__Parsing stdlib__Set stdlib__Map stdlib__Stack stdlib__Queue stdlib__Buffer stdlib__Mutex stdlib__Condition stdlib__Semaphore stdlib__Domain camlinternalFormat stdlib__Printf stdlib__Arg stdlib__Printexc stdlib__Fun stdlib__Gc stdlib__Digest stdlib__Bigarray stdlib__Random stdlib__Hashtbl stdlib__Weak stdlib__Format stdlib__Scanf stdlib__Callback camlinternalOO stdlib__Oo camlinternalMod stdlib__Ephemeron stdlib__Filename stdlib__Complex stdlib__ArrayLabels stdlib__ListLabels stdlib__BytesLabels stdlib__StringLabels stdlib__MoreLabels stdlib__StdLabels stdlib__In_channel stdlib__Out_channel stdlib__Effect outcometree topdirs toploop


# bootstrap_repl(
#     name = "ocaml",
#     main = ":Topstart",
#     opts = ["-linkall"],
#     ## args to be passed if the exe is run using `bazel run`:
#     args = ["-nostdlib",
#             "-I",
#             ## (I find no better way to put stdlib in srch path):
#             "../../../stdlib/__boot",
#             "-noinit"],
#     deps = [
#         "//compilerlibs:ocamlcommon",
#         "//bytecomp:ocamlbytecomp",
#         ":ocamltoplevel",
#     ],
#     expunge = STDLIB_MODULE_NAMES + ["outcometree", "topprinters" "topdirs", "toploop"]
# )

# genrule(
#     name = "gen_ocaml",
#     outs = ["ocaml"],
#     executable = True,
#     srcs = [":ocaml.tmp", ":expunge.byte"],
#     tools = ["//runtime:ocamlrun"],
#     cmd  = " ".join([
#         "$(execpath //runtime:ocamlrun)",
#         "$(location :expunge.byte)",
#         "$(location :ocaml.tmp)",
#         "$(location ocaml)",
#     ] + STDLIB_MODULE_NAMES + ["outcometree", "topprinters", "topdirs", "toploop"]
#     ),
#     visibility = [
#         "//:__pkg__",
#         "@dev//bin:__pkg__"
#     ]
# )

run_repl(
    name = "repl",
    repl = ":ocaml.byte",
    data = [
        "//runtime:ocamlrun",
        ":ocaml.byte"],
    args = ["$(rlocationpath //runtime:ocamlrun)",
            "$(rlocationpath :ocaml.byte)"]
)

alias(name = "ocaml", actual = ":ocaml.byte")
run_expunger(
    name = "ocaml.byte",
    ocamlrun = "//runtime:ocamlrun",
    expunger = ":expunger.byte",
    toplevel = ":pre-repl.byte",
    retain = [
        "outcometree", "topprinters", "topdirs", "toploop"
    ] + STDLIB_MODULE_NAMES,
    visibility = [
        "//:__pkg__",
        "//boot:__pkg__",
        "@dev//bin:__pkg__"
    ]
)

ocaml_tool_vm(
    name = "pre-repl.byte",
    prologue = OCAMLC_PROLOGUE + [
        ":ocamltoplevel",
    ],
    main = ":Topstart",
    opts = ["-linkall"] + OCAML_COMPILER_OPTS,
    args = [ # passed on 'bazel run', NOT on 'bazel build'
        # "-nostdlib",
        # "-noinit"
    ],
    tags     = ["tool"],
    visibility = [
        "//:__pkg__",
        "//testsuite/tests:__subpackages__",
        "@dev//bin:__pkg__",
    ]
)

################################################################
## dev/test, build all
# compiler_library(
#     name = "toplevel",
#     manifest  = [
#         # ":Expunge",
#         ":Genprintval",
#         ":Topcommon",
#         ":Topprinters",
#         ":Topdirs",
#         ":Toploop",
#         ":Topstart",
#     ],
#     # deps  = [
#     #     ":Topeval_cmi",
#     #     ":Topmain_cmi",
#     #     ":Trace_cmi",
#     # ],
# )

################################################################
# # root Makefile:
# ocamlnat_dependencies := \
#   compilerlibs/ocamlcommon.cmxa \
#   compilerlibs/ocamloptcomp.cmxa \
#   compilerlibs/ocamlbytecomp.cmxa \
#   otherlibs/dynlink/dynlink.cmxa \
#   compilerlibs/ocamltoplevel.cmxa \
#   $(TOPLEVELSTART:.cmo=.cmx)

# # compilerlibs/Makefile.compilerlibs:
# compilerlibs/ocamltoplevel.cmxa: $(OPTTOPLEVEL_CMI) $(OPTTOPLEVEL:.cmo=.cmx)
# 	$(CAMLOPT) -a -o $@ -I toplevel/native $(OPTTOPLEVEL:.cmo=.cmx)

# ocamlnat$(EXE): $(ocamlnat_dependencies)
# 	$(CAMLOPT_CMD) $(LINKFLAGS) -linkall -I toplevel/native -o $@ $^

## defined in compilerlibs/Makefile.compilerlibs:
TOPLEVEL = [
    ":Topeval",
    ":Topmain",
    ":Trace",
    ":Genprintval",
    ":Topcommon",
    ":Topprinters",
    ":Topdirs",
    ":Toploop",
]

TOPLEVEL_CMI = [
    ":Topeval_cmi",
    ":Topmain_cmi",
    ":Trace_cmi",
    ":Topcommon_cmi",
    ":Topdirs_cmi",
    ":Toploop_cmi",
]

compiler_library(
    name = "ocamltoplevel", # //toplevel:archive instead of ocamltoplevel?
    manifest  = TOPLEVEL,
    # deps      = TOPLEVEL_CMI
    visibility = [
        "//testsuite:__subpackages__"
    ]
)

################################################################
build_tool_vm(  ## moveto //utils:expunge?
    name     = "expunger.byte",
    prologue = OCAMLC_PROLOGUE,
    main     = ":Expunge",
    opts     = OCAML_COMPILER_OPTS,
    # opts = [
    #     "-nostdlib",
    #     # "-verbose"
    # ],
    visibility = [
        "//boot:__pkg__",
        "//asmcomp:__subpackages__"
    ]
)

compiler_module(
    name   = "Expunge",
    struct = "expunge.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Bytesections",
        "//bytecomp:Symtable",
        "//lambda:Runtimedef",
        "//typing:Ident",
        "//utils:Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Digest",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = ["//utils:__pkg__"]
)

compiler_module(
    name   = "Genprintval",
    struct = "genprintval.ml",
    sig    = "Genprintval_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        "fragile-match",
        "missing-record-field-pattern",
    ]},
    deps   = [
        "//parsing:Lexer",
        "//parsing:Longident",
        "//parsing:Parse",
        "//parsing:Syntaxerr",
        "//typing:Btype",
        "//typing:Ctype",
        "//typing:Datarepr",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Oprint",
        # "//typing:Outcometree_cmi",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Printtyp",
        "//typing:Types",
        "//utils:Misc",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
    ],
    visibility = ["//debugger:__pkg__"]
)

compiler_signature(
    name = "Genprintval_cmi",
    src  = "genprintval.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Env_cmi",
        "//typing:Outcometree_cmi",
        "//typing:Path_cmi",
        "//typing:Types_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

compiler_module(
    name   = "Topcommon",
    struct = "topcommon.ml",
    sig    = "Topcommon_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        "eliminated-optional-arguments",
        "fragile-match",
        "missing-record-field-pattern",
        "open-shadow-identifier",
    ]},
    deps   = [
        "//bytecomp:Dll",
        "//config:Config",
        "//driver:Compenv",
        "//driver:Compmisc",
        "//driver:Pparse",
        "//parsing:Ast_helper",
        "//parsing:Lexer",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parse",
        "//parsing:Pprintast",
        "//parsing:Printast",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Oprint",
        "//typing:Path",
        "//typing:Predef",
        "//utils:Clflags",
        "//utils:Load_path",
        "//utils:Misc",
        ":Genprintval",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.String",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

compiler_signature(
    name = "Topcommon_cmi",
    src  = "topcommon.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        "//typing:Env_cmi",
        "//typing:Ident_cmi",
        "//typing:Outcometree_cmi",
        "//typing:Path_cmi",
        "//typing:Typedtree_cmi",
        "//typing:Types_cmi",
        "//utils:Warnings_cmi",
        ":Genprintval_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Buffer_cmi",
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Lexing_cmi",
        "//stdlib:Stdlib.Obj_cmi",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

compiler_module(
    name   = "Topdirs",
    struct = "topdirs.ml",
    sig    = "Topdirs_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        "disambiguated-name",
        "fragile-match",
        "name-out-of-scope",
    ]},
    deps   = [
        "//bytecomp:Dll",
        "//config:Config",
        "//driver:Compenv",
        "//parsing:Ast_helper",
        "//parsing:Location",
        "//parsing:Longident",
        "//typing:Btype",
        "//typing:Ctype",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Printtyp",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
        ":Topeval",
        ":Toploop",
        ":Topprinters",

        # "//parsing:Asttypes_cmi",
        # "//parsing:Parsetree_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = ["//toplevel/byte:__pkg__"]
)

compiler_signature(
    name = "Topdirs_cmi",
    src  = "topdirs.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
    ]
)

compiler_module(
    name   = "Topeval",
    struct = select({
        # "//toplevel:bytecode": "//toplevel/byte:topeval.ml",
        # "//toplevel:native"  : "//toplevel/native:topeval.ml",
        "//conditions:default":  "//toplevel/byte:topeval.ml",
    }),
    sig    = ":Topeval_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        # "ambiguous-name",
        "disambiguated-name",
        "fragile-match",
        "name-out-of-scope",
        "missing-record-field-pattern",
        # "open-shadow-identifier",
        # "open-shadow-label-constructor",
    ]},
    deps   = [
        "//bytecomp:Bytegen",
        "//bytecomp:Dll",
        "//bytecomp:Emitcode",
        "//bytecomp:Meta",
        "//bytecomp:Opcodes",
        "//bytecomp:Printinstr",
        "//bytecomp:Symtable",
        "//config:Config",
        "//driver:Compmisc",
        "//lambda:Printlambda",
        "//lambda:Simplif",
        "//lambda:Translmod",
        "//parsing:Location",
        "//toplevel:Topcommon",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Includemod",
        "//typing:Persistent_env",
        "//typing:Predef",
        "//typing:Printtyp",
        "//typing:Printtyped",
        "//typing:Typecore",
        "//typing:Typedtree",
        "//typing:Typemod",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Fun",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = ["//toplevel:__pkg__"]
)

compiler_signature(
    name = "Topeval_cmi",
    src  = "topeval.mli",
    opts = SIG_OPTS,
    deps   = [
        # "//file_formats:Cmo_format_cmi",
        # "//parsing:Asttypes_cmi",
        # "//parsing:Parsetree_cmi",
        # "//typing:Outcometree_cmi",

        "//parsing:Parsetree_cmi",
        ":Topcommon_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Obj_cmi",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

compiler_module(
    name   = "Toploop",
    struct = "toploop.ml",
    sig    = "Toploop_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        "disambiguated-name",
        "name-out-of-scope",
    ]},
    deps   = [
        "//config:Config",
        "//driver:Compenv",
        "//driver:Compmisc",
        "//parsing:Lexer",
        "//parsing:Location",
        "//typing:Btype",
        "//typing:Env",
        "//typing:Typetexp",
        "//utils:Clflags",
        "//utils:Load_path",
        "//utils:Misc",
        "//utils:Warnings",
        ":Topcommon",
        ":Topeval",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = [
        "//tools:__pkg__",
        "//toplevel/byte:__pkg__",
        "//testsuite:__subpackages__",
        "//toplevel:__subpackages__"
    ]
)

compiler_signature(
    name = "Toploop_cmi",
    src  = "toploop.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Location_cmi",
        "//parsing:Longident_cmi",
        "//parsing:Parsetree_cmi",
        "//typing:Env_cmi",
        "//typing:Outcometree_cmi",
        "//typing:Path_cmi",
        "//typing:Types_cmi",
        "//utils:Warnings_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Hashtbl_cmi",
        "//stdlib:Stdlib.Lexing_cmi",
        "//stdlib:Stdlib.Obj_cmi",
    ]
)

compiler_module(
    name   = "Topmain",
    struct = select({
        # "//toplevel:bytecode": "//toplevel/byte:topmain.ml",
        # "//toplevel:native"  : "//toplevel/native:topmain.ml",
        "//conditions:default":  "//toplevel/byte:topmain.ml",
    }),
    sig    = ":Topmain_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        "disambiguated-name",
        "fragile-match",
        "name-out-of-scope",
    ]},
    deps   = [
        "//driver:Compenv",
        "//driver:Compmisc",
        "//driver:Main_args",
        "//parsing:Location",
        "//toplevel:Topcommon",
        "//toplevel:Topdirs",
        "//toplevel:Toploop",
        "//typing:Ctype",
        "//typing:Env",
        "//typing:Path",
        "//typing:Printtyp",
        "//typing:Types",
        "//utils:Clflags",
        "//utils:Misc",
        ":Topeval",
        ":Trace",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Array",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Sys",
    ],
    visibility = ["//toplevel:__pkg__"]
)

compiler_signature(
    name = "Topmain_cmi",
    src  = "topmain.mli",
    opts = SIG_OPTS, # + ["-nopervasives"],
    stdlib_deps   = ["//stdlib:Stdlib_cmi"],
)

compiler_module(
    name   = "Topprinters",
    struct = "topprinters.ml",
    sig    = ":Topprinters_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        "disambiguated-name",
        "name-out-of-scope",
    ]},
    deps   = ["//typing:Ctype"],
    visibility = ["//debugger:__pkg__"]
)

compiler_signature(
    name = "Topprinters_cmi",
    src  = "topprinters.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types_cmi"
    ],
    stdlib_deps =[
        "//stdlib:Stdlib_cmi",
    ]
)

compiler_module(
    name   = "Topstart",
    struct = "topstart.ml",
    opts = MODULE_OPTS,
    deps   = [":Topmain"],
    stdlib_deps = ["//stdlib:Primitives"]
)

compiler_module(
    name   = "Trace",
    struct = select({
        # "//toplevel:bytecode": "//toplevel/byte:trace.ml",
        # "//toplevel:native"  : "//toplevel/native:trace.ml",
        "//conditions:default":  "//toplevel/byte:trace.ml",
    }),
    sig    = ":Trace_cmi",
    opts = MODULE_OPTS,
    warnings = {"disable": [
        "fragile-match",
    ]},
    deps   = [
        "//bytecomp:Meta",
        "//parsing:Longident",
        "//toplevel:Topcommon",
        "//typing:Ctype",
        "//typing:Path",
        "//typing:Predef",
        "//typing:Printtyp",
        "//typing:Types",
        "//utils:Misc",
        ":Topeval",
        # "//parsing:Asttypes_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Obj",
    ],
    visibility = ["//toplevel:__pkg__"]
)

compiler_signature(
    name = "Trace_cmi",
    src  = "trace.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident_cmi",
        "//typing:Env_cmi",
        "//typing:Path_cmi",
        "//typing:Types_cmi",
    ],
    stdlib_deps =[
        "//stdlib:Stdlib.Format_cmi",
        "//stdlib:Stdlib.Obj_cmi",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

