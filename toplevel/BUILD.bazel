## GENERATED FILE ##

load("//bzl:rules.bzl",
     "ocaml_library",
     "ocaml_module",
     "ocaml_signature",
)

MODULE_OPTS = ["-nostdlib"]
SIG_OPTS = ["-nostdlib"]

ocaml_library(
    name = "toplevel_lib",
    modules  = [
        ":Expunge",
        ":Genprintval",
        ":Topcommon",
        ":Topdirs",
        ":Toploop",
        ":Topstart",
    ],
    signatures  = [
        ":Topeval_cmi",
        ":Topmain_cmi",
        ":Trace_cmi",
    ],
)

ocaml_module(
    name   = "Expunge",
    struct = "expunge.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//stdlib:Stdlib.Sys",
        ## (Symtable)
        ## (Runtimedef)
        "//stdlib:Stdlib.Printexc",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Digest",
        ## (Bytesections)
        "//stdlib:Stdlib.Array",
    ]
)

ocaml_module(
    name   = "Genprintval",
    struct = "genprintval.ml",
    sig    = "Genprintval_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Types",
        ## (Syntaxerr)
        ## (Printtyp)
        "//stdlib:Stdlib.Printexc",
        "//typing:Predef",
        ## (Path)
        ## (Parse)
        ## (Outcometree)
        ## (Oprint)
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        ## (Lexer)
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        ## (Env)
        ## (Datarepr)
        ## (Ctype)
        "//stdlib:Stdlib.Bytes",
        ## (Btype)
    ]
)

ocaml_signature(
    name = "Genprintval_cmi",
    src  = "genprintval.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        ## (Path)
        ## (Outcometree)
        "//stdlib:Stdlib.Format",
        ## (Env)
    ]
)

ocaml_module(
    name   = "Topcommon",
    struct = "topcommon.ml",
    sig    = "Topcommon_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Genprintval", ## (Toplevel Genprintval)
        "//stdlib:Stdlib.String",
        ## (Str)
        "//stdlib:Stdlib.Printexc",
        ## (Printast)
        "//typing:Predef",
        "//parsing:Pprintast",
        ## (Pparse)
        ## (Path)
        "//parsing:Parsetree_cmi",
        ## (Parse)
        ## (Outcometree)
        ## (Oprint)
        "//stdlib:Stdlib.Obj",
        ## (Mod)
        "//utils:Misc",
        ## (Mb)
        "//parsing:Longident",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        ## (Lexer)
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        ## (Env)
        ## (Dll)
        "//utils:Config",
        ## (Compmisc)
        ## (Compenv)
        "//utils:Clflags",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Buffer",
        "//parsing:Ast_helper",
        "//stdlib:Stdlib.Arg",
    ]
)

ocaml_signature(
    name = "Topcommon_cmi",
    src  = "topcommon.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Genprintval", ## (Toplevel Genprintval)
        "//utils:Warnings",
        "//typing:Types",
        ## (Path)
        "//parsing:Parsetree_cmi",
        ## (Outcometree)
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Lexing",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        ## (Env)
        "//stdlib:Stdlib.Buffer",
    ]
)

ocaml_module(
    name   = "Topdirs",
    struct = "topdirs.ml",
    sig    = "Topdirs_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Toploop", ## (Toplevel Toploop)
        ":Topeval", ## (Toplevel Topeval)
        ":String", ## (Stdlib String)
        "//utils:Warnings",
        "//typing:Types",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        ## (Printtyp)
        "//typing:Predef",
        ## (Path)
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        ## (Env)
        ## (Dll)
        ## (Ctype)
        "//utils:Config",
        ## (Compenv)
        "//utils:Clflags",
        ## (Btype)
        "//parsing:Asttypes_cmi",
        "//parsing:Ast_helper",
        "//stdlib:Stdlib.Arg",
    ]
)

ocaml_signature(
    name = "Topdirs_cmi",
    src  = "topdirs.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
    ]
)

ocaml_signature(
    name = "Topeval_cmi",
    src  = "topeval.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Topcommon", ## (Toplevel Topcommon)
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Format",
    ]
)

ocaml_module(
    name   = "Toploop",
    struct = "toploop.ml",
    sig    = "Toploop_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Topeval", ## (Toplevel Topeval)
        ":Topcommon", ## (Toplevel Topcommon)
        "//utils:Warnings",
        ## (Typetexp)
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        ## (Lexer)
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        ## (Env)
        "//utils:Config",
        ## (Compmisc)
        ## (Compenv)
        "//utils:Clflags",
        "//stdlib:Stdlib.Buffer",
        ## (Btype)
    ]
)

ocaml_signature(
    name = "Toploop_cmi",
    src  = "toploop.mli",
    opts = SIG_OPTS,
    deps   = [
        "//utils:Warnings",
        "//typing:Types",
        ## (Path)
        "//parsing:Parsetree_cmi",
        ## (Outcometree)
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        ## (Env)
    ]
)

ocaml_signature(
    name = "Topmain_cmi",
    src  = "topmain.mli",
    opts = SIG_OPTS,
    deps   = [
    ]
)

ocaml_module(
    name   = "Topstart",
    struct = "topstart.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":Topmain", ## (Toplevel Topmain)
    ]
)

ocaml_signature(
    name = "Trace_cmi",
    src  = "trace.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        ## (Path)
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
        ## (Env)
    ]
)

