load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_library",
     "bootstrap_module",
     "bootstrap_signature",
)

MODULE_OPTS = ["-nostdlib"]
SIG_OPTS = ["-nostdlib"]

################################################################
# # root Makefile:
# ocamlnat_dependencies := \
#   compilerlibs/ocamlcommon.cmxa \
#   compilerlibs/ocamloptcomp.cmxa \
#   compilerlibs/ocamlbytecomp.cmxa \
#   otherlibs/dynlink/dynlink.cmxa \
#   compilerlibs/ocamltoplevel.cmxa \
#   $(TOPLEVELSTART:.cmo=.cmx)

# # compilerlibs/Makefile.compilerlibs:
# compilerlibs/ocamltoplevel.cmxa: $(OPTTOPLEVEL_CMI) $(OPTTOPLEVEL:.cmo=.cmx)
# 	$(CAMLOPT) -a -o $@ -I toplevel/native $(OPTTOPLEVEL:.cmo=.cmx)

# ocamlnat$(EXE): $(ocamlnat_dependencies)
# 	$(CAMLOPT_CMD) $(LINKFLAGS) -linkall -I toplevel/native -o $@ $^


################################################################
## dev/test, build all
bootstrap_library(
    name = "toplevel",
    manifest  = [
        ":Expunge",
        ":Genprintval",
        ":Topcommon",
        ":Topdirs",
        ":Toploop",
        ":Topstart",
    ],
    # deps  = [
    #     ":Topeval_cmi",
    #     ":Topmain_cmi",
    #     ":Trace_cmi",
    # ],
)

## defined in compilerlibs/Makefile.compilerlibs:
TOPLEVEL = [
    "//toplevel/byte:Topeval",
    "//toplevel/byte:Topmain",
    "//toplevel/byte:Trace",
    ":Genprintval",
    ":Topcommon",
    ":Topdirs",
    ":Toploop",
]

TOPLEVEL_CMI = [
    "//toplevel/byte:Topeval",
    "//toplevel/byte:Topmain",
    "//toplevel/byte:Trace",
    ":Topcommon",
    ":Topdirs",
    ":Toploop",
]

bootstrap_archive(
    name = "archive", # //toplevel:archive instead of ocamltoplevel
    manifest  = TOPLEVEL,
    # deps      = TOPLEVEL_CMI
)

################################################################
bootstrap_module(
    name   = "Expunge",
    struct = "expunge.ml",
    opts = MODULE_OPTS,
    deps   = [
        "//stdlib:Stdlib.Sys",
        "//bytecomp:Symtable",
        "//lambda:Runtimedef",
        "//stdlib:Stdlib.Printexc",
        "//utils:Misc",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Digest",
        "//bytecomp:Bytesections",
        "//stdlib:Stdlib.Array",
    ]
)

bootstrap_module(
    name   = "Genprintval",
    struct = "genprintval.ml",
    sig    = "Genprintval_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//typing:Types",
        "//parsing:Syntaxerr",
        "//typing:Printtyp",
        "//stdlib:Stdlib.Printexc",
        "//typing:Predef",
        "//typing:Path",
        "//parsing:Parse",
        "//typing:Outcometree_cmi",
        "//typing:Oprint",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//parsing:Lexer",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//typing:Datarepr",
        "//typing:Ctype",
        "//stdlib:Stdlib.Bytes",
        "//typing:Btype",
    ]
)

bootstrap_signature(
    name = "Genprintval_cmi",
    src  = "genprintval.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        "//typing:Path",
        "//typing:Outcometree_cmi",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
    ]
)

bootstrap_module(
    name   = "Topcommon",
    struct = "topcommon.ml",
    sig    = "Topcommon_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//bytecomp:Dll",
        "//driver:Compenv",
        "//driver:Compmisc",
        "//parsing:Lexer",
        "//parsing:Ast_helper",
        "//parsing:Location",
        "//parsing:Longident",
        "//parsing:Parse",
        "//parsing:Parsetree_cmi",
        "//parsing:Pprintast",
        "//stdlib:Stdlib.Arg",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Filename",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Gc",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Printexc",
        "//stdlib:Stdlib.String",
        "//typing:Env",
        "//typing:Ident",
        "//typing:Oprint",
        "//typing:Outcometree_cmi",
        "//typing:Path",
        "//typing:Predef",
        "//utils:Clflags",
        "//utils:Config",
        "//utils:Load_path",
        "//utils:Misc",
        ":Genprintval",
        "//driver:Pparse",
        "//parsing:Printast",
        #### (Str)
        #### (Mb)
        #### (Mod)
    ],
    visibility = ["//toplevel/byte:__pkg__"]
)

bootstrap_signature(
    name = "Topcommon_cmi",
    src  = "topcommon.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Genprintval",
        "//utils:Warnings",
        "//typing:Types",
        "//typing:Path",
        "//parsing:Parsetree_cmi",
        "//typing:Outcometree_cmi",
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Lexing",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
        "//stdlib:Stdlib.Buffer",
    ]
)

bootstrap_module(
    name   = "Topdirs",
    struct = "topdirs.ml",
    sig    = "Topdirs_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Toploop",
        "//toplevel/byte:Topeval",
        "//utils:Warnings",
        "//typing:Types",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//typing:Printtyp",
        "//typing:Predef",
        "//typing:Path",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Option",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Longident",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//typing:Ident",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//typing:Env",
        "//bytecomp:Dll",
        "//typing:Ctype",
        "//utils:Config",
        "//driver:Compenv",
        "//utils:Clflags",
        "//typing:Btype",
        "//parsing:Asttypes_cmi",
        "//parsing:Ast_helper",
        "//stdlib:Stdlib.Arg",
    ],
    visibility = ["//toplevel/byte:__pkg__"]
)

bootstrap_signature(
    name = "Topdirs_cmi",
    src  = "topdirs.mli",
    opts = SIG_OPTS,
    deps   = [
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
    ]
)

bootstrap_signature(
    name = "Topeval_cmi",
    src  = "topeval.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Topcommon",
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Format",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

bootstrap_module(
    name   = "Toploop",
    struct = "toploop.ml",
    sig    = "Toploop_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Topeval_cmi",
        ":Topcommon",
        "//utils:Warnings",
        "//typing:Typetexp",
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Obj",
        "//utils:Misc",
        "//parsing:Location",
        "//utils:Load_path",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//parsing:Lexer",
        "//stdlib:Stdlib.Format",
        "//stdlib:Stdlib.Filename",
        "//typing:Env",
        "//utils:Config",
        "//driver:Compmisc",
        "//driver:Compenv",
        "//utils:Clflags",
        "//stdlib:Stdlib.Buffer",
        "//typing:Btype",
    ],
    visibility = ["//toplevel/byte:__pkg__"]
)

bootstrap_signature(
    name = "Toploop_cmi",
    src  = "toploop.mli",
    opts = SIG_OPTS,
    deps   = [
        "//utils:Warnings",
        "//typing:Types",
        "//typing:Path",
        "//parsing:Parsetree_cmi",
        "//typing:Outcometree_cmi",
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Hashtbl",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
    ]
)

bootstrap_signature(
    name = "Topmain_cmi",
    src  = "topmain.mli",
    opts = SIG_OPTS + ["-nopervasives"],
    deps   = [
    ],
    visibility = ["//toplevel:__subpackages__"]
)

bootstrap_module(
    name   = "Topstart",
    struct = "topstart.ml",
    opts = MODULE_OPTS,
    deps   = [
        ":Topmain",
    ]
)

bootstrap_signature(
    name = "Trace_cmi",
    src  = "trace.mli",
    opts = SIG_OPTS,
    deps   = [
        "//typing:Types",
        "//typing:Path",
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//stdlib:Stdlib.Format",
        "//typing:Env",
    ],
    visibility = ["//toplevel:__subpackages__"]
)

