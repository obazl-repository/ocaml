workspace(name = "ocamlcc")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

load("//:WORKSPACE.bzl", "obazl_deps", "ocaml_xcode")
obazl_deps()

## coldstart snapshot for development:
local_repository(
    name = "dev",
    path = ".baseline",
    # repo_mapping = {
    #     "@dev": "@ocamlcc"
    # }
)

ocaml_xcode()

# load("//bzl:rules.bzl",
#      "new_local_pkg_repository")

#################################################
# load("@opam//:WORKSPACE.bzl", "opam_fetch_repos")
# opam_fetch_repos()

# for re2c in tools_opam update tool:
# load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")
# rules_foreign_cc_dependencies()

# load("@obazl_rules_ocaml//ocaml:bootstrap.bzl", "ocaml_configure")
# ocaml_configure(switch = "4.10", bootstrap = True)

# load("//bzl/toolchain:BUILD.bzl", "bootstrap_register_toolchains")
# bootstrap_register_toolchains(installation="host")

# Tell Bazel about our toolchains so it can resolve them based on values passed
# in --platform, --host_platform, and --execution_platforms options.

register_execution_platforms(
    # IMPORTANT: ordered by constraint "strength" - more constraints
    # before fewer.

    # "//platform/ocaml/local:sys_sys",
    # "//platform/ocaml/local:sys_vm",

    # cross
    # "//platform/ocaml/amd64/linux:sys_vm_vm",
    # "//platform/ocaml/amd64/linux:sys_vm",
)

register_toolchains(

    "//toolchain/selector/local:dev",

    "//toolchain/selector/local:mustache",

    # "//toolchain/selector/local:preproc",

    "//toolchain/selector/local:boot",
    "//toolchain/selector/local:baseline",
    "//toolchain/selector/local:ocamlc.byte",
    # "//toolchain/selector/local:boot.ocamlopt.byte",
    "//toolchain/selector/local:ocamlopt.byte",
    "//toolchain/selector/local:ocamlc.opt",
    "//toolchain/selector/local:ocamlopt.opt",

    ## cross-platform toolchains
    # "//toolchain/selector/local/vm/target/amd64/linux:vv_vv",
    # "//toolchain/selector/local/vm/target/amd64/linux:vv_vs",
    # "//toolchain/selector/local/vm/target/amd64/linux:vs_ss",
    # "//toolchain/selector/local/vm/target/amd64/linux:vs_sv",

    # "//toolchain/selector/local/vm/target/amd64/linux:ss_ss",
    # "//toolchain/selector/local/vm/target/amd64/linux:ss_sv",
    # "//toolchain/selector/local/vm/target/amd64/linux:sv_vv",
    # "//toolchain/selector/local/vm/target/amd64/linux:sv_vs",

    ## endo-toolchains
    # "//toolchain/selector/local/vm/target/local:vv_vv",
    # "//toolchain/selector/local/vm/target/local:vv_vs",

    # "//toolchain/selector/local/vm/target/local:ss_ss",
    # "//toolchain/selector/local/vm/target/local:ss_sv",

    # "//toolchain/selector/local:vs_ss",
    # "//toolchain/selector/local:vs_sv",

    # "//toolchain/selector/local:vv_vv",

    # "//toolchain/selector/local:vm_executor",
    # "//toolchain/selector/local:*_executor",


    # "//toolchain/selector:vmvm",
    # "//toolchain/selector:vmsys",

    # "//toolchain/selector:boot",

    # "//toolchain/selector:baseline",
    # "//toolchain/selector:baseline_involute",

    # "//toolchain/selector:vmvm",
    # "//toolchain/selector:vmsys",

    # "//toolchain/selector:xvmsys",

    # "//toolchain/selector:baseline",

    # "//toolchain/selector:stdlib",

    # "//toolchain/selectors/boot:vmsys",
    # "//toolchain/selectors/boot:default",

    # "//toolchain/selectors/boot",


    # "//toolchain/selectors/baseline:sys_vm_vm",
    # "//toolchain/selectors/baseline:vm",


    # "//toolchain/selector:dev",
    # "//toolchain/selector:vmsys",

    # "//toolchain/selector:default",

    # "//toolchain/selector:dbg",
    # "//toolchain/selector:instrumented",

    ## toolchain profiles - locals must come first
    "//toolchain/profile/selector/cc/local:linux",
    "//toolchain/profile/selector/cc/local:macos",
    "//toolchain/profile/selector/cc/macos",
    "//toolchain/profile/selector/cc/linux"
)

# register_execution_platforms(
#     "//bzl/platforms:mac_bytecode",
#     "//bzl/platforms:mac_native"
# )
