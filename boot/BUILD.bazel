package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_setting")

# load("//bzl:rules.bzl",
#      "boot_import_vm_executable",
#      "boot_ocamlc_byte",
#      "boot_ocamlopt_byte",
#      "boot_ocamlopt_opt",
#      "boot_ocamlc_opt",
#      "boot_ocaml_compilers",
#      "ocaml_compilers")

load("//bzl/rules:COMPILER.bzl",
     "OCAMLC_PROLOGUE",
     "OCAMLC_MAIN",
     "OCAMLOPT_PROLOGUE",
     "OCAMLOPT_MAIN",
     "OCAML_COMPILER_OPTS")

load(":BOOT_RULES.bzl",
     "boot_import_vm_executable", ## for boot/ocamllex
     "boot_ocamlc_byte",
     "boot_ocamlopt_byte",
     "boot_ocamlopt_opt",
     "boot_ocamlc_opt")

load(":BUILD_RULES.bzl",
     "boot_ocamlc_import",
     "boot_coldstart",
     "boot_setup")

# load("//bzl/rules/macros:stdlib.bzl", "stdlib")

exports_files(["ocamlc", "ocamllex"])

bool_flag(name = "verbose", build_setting_default = False,
          visibility = ["//visibility:public"])
config_setting(name = "verbose?", flag_values = {":verbose": "True"})

## Package //boot contains pre-compiled OCaml executables (ocamlc,
## ocamllex) and aliases to native C executables (ocamlrun, ocamlyacc).

alias(name = "bootstrap", actual = ":checkpoint")
alias(name = "coldstart", actual = ":checkpoint")

COLDSTART_DEPS = [
    "//config/camlheaders",
    "//runtime:asmrun",
    "//runtime:camlrun",
    "//runtime:ocamlrun",

    "//boot:ocamlc.opt",  #5
    "//boot:ocamlopt.opt",
    "//boot:ocamlopt.byte",
    "//boot:ocamlc.byte",

    "//bin:ocamlcp.byte",
    "//bin:ocamlcp.opt",  # 10
    "//bin:ocamloptp.opt",
    "//bin:ocamloptp.byte",

    "//vendor/mustach",
    "//vendor/merge_json",

    "//tools:ocamldep.byte",  #15
    "//tools:ocamldep.opt",
    "//tools:ocamlprof.byte",
    "//tools:ocamlprof.opt",
    "//tools:ocamlobjinfo.byte",
    "//tools:ocamlobjinfo.opt",   # 20

    "//tools:primreq.byte",
    "//tools:primreq.opt",

    "//debugger:ocamldebug.byte",
    "//debugger:ocamldebug.opt",

    ## obsolete:
    # "//bin:ocamlc.optx",
    # "//bin:ocamlopt.optx",
    # "//bin:ocamloptx.optx",
    # "//bin:ocamloptx.byte",

    # "//tools:dumpobj.opt",

    # "@baseline//:ocamlc.byte",
    # "//bin/baseline:ocamlc.byte",
    # "//bin/baseline:ocamlopt.byte",
    # "//bin/baseline:ocamlc.opt",
    # "//bin/baseline:ocamlopt.opt",

    # "//lex:ocamllex.byte",
    # "//lex:ocamllex.opt",
    # "//yacc:ocamlyacc",

    ## the shell script could obtain the following from the preceding:
    # "//stdlib",
    # "//stdlib:Std_exit",

    # "//asmcomp:cvt_emit.byte",

    # "//asmcomp:cvt_emit.byte",

    "@bazel_tools//tools/bash/runfiles",
]

boot_coldstart(
    name = "checkpoint",
    runner = "coldstart_runner.sh",
    runtimes = [
        # "//runtime:asmrun",
        # "//runtime:camlrun",
    ],
    data = COLDSTART_DEPS,
    args = ["$(rlocationpaths {})".format(dep) for dep in COLDSTART_DEPS]
)

boot_setup(
    name = "preproc",
    runner = "preproc_runner.sh",
    data = [
        "@bazel_tools//tools/bash/runfiles",
        # generated code - cache it so it only gets generated once
        "//runtime:ints.c",
        "//runtime:primitives.dat",
        "//runtime:primitives.h",
        "//runtime:prims.c",
        "//runtime/caml:domain_state.h",
        "//runtime/caml:instruct.h",
        "//runtime/caml:fail.h",
        "//runtime/caml:jumptbl.h",
        "//runtime/caml:opnames.h",
        "//runtime/caml:s.h",
        "//stdlib:stdlib.mli",
        "//stdlib:stdlib.ml",
        "//vendor/mustach",
    ],
)


sh_binary(
    name = "clean",
    srcs = ["clean.sh"]
)

################################################################
boot_ocamlc_import(
    name = "ocamlc.boot",
    # tool = ":ocamlc",
    # runtime = "//runtime:ocamlrun"
)

sh_binary(
    name = "ocamlc.boot.sh",
    srcs = ["ocamlc.boot.runner.sh"],
    env  = {"VERBOSE": "true"},
    args = [
        # "$(rlocationpath //runtime:ocamlrun)",
        "$(rlocationpath :ocamlc.boot)",
    ],
    data = [
        ":ocamlc.boot",
        # "//runtime:ocamlrun",
        # "//stdlib",
        # "//config/camlheaders",

        # We cannot depend on Std_exit on pain of circularity.
        # It depends on Stdlib, which is compiled by this tool.
        # "//stdlib:Std_exit"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

################################################################
# boot_ocaml_compilers(
#     name = "ocamlcc",
#     visibility = ["//visibility:public"]
# )

boot_ocamlc_byte(
    name       = "ocamlc.byte",
    prologue   = OCAMLC_PROLOGUE,
    main       = OCAMLC_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

boot_ocamlopt_byte(
    name       = "ocamlopt.byte",
    prologue   = OCAMLOPT_PROLOGUE,
    main       = OCAMLOPT_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

boot_ocamlopt_opt(
    name       = "ocamlopt.opt",
    prologue   = OCAMLOPT_PROLOGUE,
    main       = OCAMLOPT_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

boot_ocamlc_opt(
    name       = "ocamlc.opt",
    prologue   = OCAMLC_PROLOGUE,
    main       = OCAMLC_MAIN,
    opts       = OCAML_COMPILER_OPTS,
    visibility = ["//visibility:public"]
)

sh_binary(
    name = "ocamlc.byte.sh",
    srcs = ["ocamlc.byte.runner.sh"],
    env  = {"VERBOSE": "false"},
    data = [
        ":ocamlc.byte",
        "//runtime:ocamlrun",
        "//stdlib",
        "//config/camlheaders",

        # We cannot depend on Std_exit on pain of circularity.
        # It depends on Stdlib, which is compiled by this tool.
        # "//stdlib:Std_exit"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

sh_binary(
    name = "ocamlopt.byte.sh",
    srcs = ["ocamlcc.boot.runner.sh"],
    env  = select({
        ":verbose?": {"VERBOSE": "true"},
        "//conditions:default": {"VERBOSE": "false"}
    }),
            # "DEVELOPER_DIR": "/Applications/Xcode.app/Contents/Developer",
            # "SDKROOT": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"},
    args = [
        # "$(rlocationpath //runtime:ocamlrun)",
        "$(rlocationpath :ocamlopt.byte)",
        "$(rlocationpath //stdlib:stdlib.cmxa)",
    ],
    data = [
        ":ocamlopt.byte",
        # "//runtime:ocamlrun",
        "//stdlib:stdlib.cmxa",
        "//config/camlheaders",
        "@bazel_tools//tools/cpp:current_cc_toolchain"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ],
    toolchains = ["@bazel_tools//tools/cpp:current_cc_toolchain"]
)


# boot_ocamlc_byte(
#     name = "ocamlc.byte",
#     stdlib   = "//stdlib",
#     prologue = [
#         "//compilerlibs:ocamlcommon",
#         "//bytecomp:ocamlbytecomp"
#     ],
#     main = "//driver:Main",
#     opts = [ ] + select({
#         # ocamlc.byte: ["-compat-32"]
#         "//conditions:default": []
#     }) + [
#     ] + select({
#         "//platform/target/os:linux?": [
#             "-cclib", "-lm",
#             "-cclib", "-ldl",
#             "-cclib", "-lpthread",
#         ],
#         "//conditions:default": []
#     }),
#     visibility             = ["//visibility:public"]
# )

# boot_ocamlopt_byte(
#     name = "ocamlopt.byte",
#     # stdlib   = "//stdlib",
#     prologue = [
#         "//compilerlibs:ocamlcommon",
#         "//asmcomp:ocamloptcomp"
#     ],
#     main = "//driver:Optmain",
#     opts = [ ] + select({
#         # ocamlc.byte: ["-compat-32"]
#         "//conditions:default": []
#     }) + [
#     ] + select({
#         "//platform/target/os:linux?": [
#             "-cclib", "-lm",
#             "-cclib", "-ldl",
#             "-cclib", "-lpthread",
#         ],
#         "//conditions:default": []
#     }),
#     visibility             = ["//visibility:public"]
# )

# boot_ocamlopt_opt(
#     name = "ocamlopt.opt",
#     stdlib   = "//stdlib",
#     prologue = [
#         "//compilerlibs:ocamlcommon",
#         "//asmcomp:ocamloptcomp"
#     ],
#     main = "//driver:Optmain",
#     opts = [ ] + select({
#         "//platform/target/os:linux?": [
#             "-cclib", "-lm",
#             "-cclib", "-ldl",
#             "-cclib", "-lpthread",
#         ],
#         "//conditions:default": []
#     }),
#     visibility             = ["//visibility:public"]
# )

# boot_ocamlc_opt(
#     name = "ocamlc.opt",
#     stdlib   = "//stdlib",
#     prologue = [
#         "//compilerlibs:ocamlcommon",
#         "//asmcomp:ocamloptcomp"
#     ],
#     main = "//driver:Optmain",
#     opts = [ ] + select({
#         "//platform/target/os:linux?": [
#             "-cclib", "-lm",
#             "-cclib", "-ldl",
#             "-cclib", "-lpthread",
#         ],
#         "//conditions:default": []
#     }),
#     visibility             = ["//visibility:public"]
# )

sh_binary(
    name = "ocamlc.sh",
    srcs = ["ocamlc.byte.runner.sh"],
    data = [
        ":ocamlc",
        "//runtime:ocamlrun",
        "//config/camlheaders",

        # We cannot depend on Std_exit on pain of circularity.
        # It depends on Stdlib, which is compiled by this tool.
        # "//stdlib:Std_exit"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

################################################################
boot_import_vm_executable(
    name = "ocamllex.boot",
    tool = "ocamllex",
    # runtime = "//runtime:ocamlrun"
)

sh_binary(
    name = "ocamllex.sh",
    srcs = ["ocamllex.byte.sh"],
    data = [
        ":ocamllex.byte",
        "//runtime:ocamlrun"
    ],
    deps = ["@bazel_tools//tools/bash/runfiles"]
)
