package(default_visibility = ["//visibility:public"])

load("//bzl:rules.bzl", "boot_coldstart")
# load("//bzl/rules/macros:compiler.bzl", "compiler")
# load("//bzl/rules/macros:lexer.bzl", "lexer")
load("//bzl/rules/macros:stdlib.bzl", "stdlib")

exports_files(["ocamlc", "ocamlc.sh", "ocamllex"])

## Package //boot contains pre-compiled OCaml executables (ocamlc,
## ocamllex) and aliases to native C executables (ocamlrun, ocamlyacc).

boot_coldstart(
    name = "coldstart",
    runner = "coldstart_runner.sh",
    data = [
        "//runtime:ocamlrun",
        ":ocamlc",
        ":ocamllex",
        "//yacc:ocamlyacc",
        "@bazel_tools//tools/bash/runfiles",
        "//stdlib:stdlib",
        "//stdlib:Std_exit",
        "//stdlib:Std_exit_cmi",
        "//stdlib:Stdlib_cmi",
        "//stdlib:camlheaders",
    ],
    # deps = [
    # ],
)

sh_binary(
    name = "clean",
    srcs = ["clean.sh"]
)

################################################################
sh_binary(
    name = "ocamlc.boot",
    srcs = ["ocamlc.sh"],
    data = [
        ":ocamlc",
        "//runtime:ocamlrun",
        "//stdlib:camlheaders",

        # We cannot depend on Std_exit on pain of circularity.
        # It depends on Stdlib, which is compiled by this tool.
        # "//stdlib:Std_exit"
    ],
    deps = [
         # for the runfiles lib used in ocamlc.sh:
        "@bazel_tools//tools/bash/runfiles"
    ]
)

sh_binary(
    name = "ocamllex.boot",
    srcs = ["ocamllex.sh"],
    data = [
        ":ocamllex",
        "//runtime:ocamlrun"
    ],
    deps = ["@bazel_tools//tools/bash/runfiles"]
)

stdlib(stage  = "boot")
# alias(
#     name   = "stdlib",
#     actual = "//stdlib"
# )
