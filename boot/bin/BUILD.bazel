package(default_visibility = ["//visibility:public"])

load("//bzl:rules.bzl",
     "bootstrap_archive",
     "bootstrap_executable",
     "bootstrap_module",
     "ocamlc_boot"
)

#FIXME: clean these up!
load("//config:CONFIG.bzl",
     "ARCH", "MODEL", "SYSTEM",
     "HOST", "ROOTDIR", "LIBDIR",
     # flags
     # "OC_CFLAGS",
     "CFLAGS",
     "OC_CPPFLAGS", "CPPFLAGS",
     "OC_LDFLAGS", "LDFLAGS",
     # defines - replace by CC_DEFINES with selects
     # "OC_DEBUG_CPPDEFINES", "OC_INSTR_CPPDEFINES",
     # "OC_CPPDEFINES", "OC_NATIVE_CPPDEFINES",
     # other

     "OC_COMMON_LDFLAGS",
     "BOOT_STDLIBFLAGS"
     )

alias(
    name   = "ocamlrun",
    actual = "//runtime:ocamlrun"
)

ocamlc_boot( ##FIXME: do we really need a separate rule?
# compiler(
    name = "ocamlc",
    # compile_target = "//platform/cpu:arm",  ## ??
    exec_compatible_with = [
        ## *>vm ???
    ],
    opts = [
        "-nostdlib", "-compat-32",
    ],
    # primitives = PRIMITIVES,
    main = "//driver:Main",
    deps = [
        "//compilerlibs:ocamlcommon",
        "//bytecomp:ocamlbytecomp",
        # "//boot/lib:stdlib"
    ],
    visibility = [
        "//compilers/stage2:__pkg__",
        "//testsuite:__pkg__"
    ]
)

# tool type sys>vm?
# The bytecode compiler compiled with the native-code compiler
# ocamlc.opt$(EXE): compilerlibs/ocamlcommon.cmxa \
#                   compilerlibs/ocamlbytecomp.cmxa $(BYTESTART:.cmo=.cmx)
# 	$(CAMLOPT_CMD) $(OC_COMMON_LDFLAGS) -o $@ $^ -cclib "$(BYTECCLIBS)"
#
# BYTESTART=driver/main.cmo
# OPTSTART=driver/optmain.cmo

## FIXME: need a transition to *>sys toolchain to produce sys>vm
bootstrap_executable(
    name = "ocamlc.opt",
    opts = [],
    deps = [
        "//compilerlibs:ocamlcommon",
        "//compilerlibs:ocamloptcomp",
        "//driver",
        "//driver:Main",
    ],
    visibility = [
        "//testsuite:__pkg__"
    ]
)

# The native-code compiler (vm>sys)
# ocamlopt$(EXE): compilerlibs/ocamlcommon.cma compilerlibs/ocamloptcomp.cma $(OPTSTART)
# 	$(CAMLC) $(OC_COMMON_LDFLAGS) -o $@ $^
## OPTSTART=driver/optmain.cmo
## CAMLC = $(BOOT_OCAMLC) $(BOOT_STDLIBFLAGS) -use-prims runtime/primitives
## BOOT_STDLIBFLAGS ?= -nostdlib -I $(ROOTDIR)/boot
## BOOT_OCAMLC boot/ocamlc.opt (sys>vm) if available (and newer than
#   boot/ocamlc), otherwise boot/ocamlc (vm>vm)

bootstrap_executable(
    name = "ocamlopt",
    opts = OC_COMMON_LDFLAGS,
    deps = [
        "//compilerlibs:ocamlcommon",
        "//compilerlibs:ocamloptcomp",
        "//driver:Optmain"
    ],
    visibility = [
        "//testsuite:__pkg__"
    ]
)

# The native-code compiler compiled with itself
# ocamlopt.opt$(EXE): \
#                     compilerlibs/ocamlcommon.cmxa \
#                     compilerlibs/ocamloptcomp.cmxa \
#                     $(OPTSTART:.cmo=.cmx)
# 	$(CAMLOPT_CMD) $(OC_COMMON_LDFLAGS) -o $@ $^

## switch to cmx handled by toolchain?
bootstrap_executable(
    name = "ocamlopt.opt",
    opts = OC_COMMON_LDFLAGS,
    deps = [
        "//compilerlibs:ocamlcommon",
        "//compilerlibs:ocamloptcomp",
        "//driver:Optmain"
    ],
    visibility = [
        "//testsuite:__pkg__"
    ]
)

alias(
    name = "ocamlyacc",
    actual = "//yacc:ocamlyacc"
)
