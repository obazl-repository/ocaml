## Package //boot/baseline contains targets bootstrapped from the tools in
## package //boot.

package(default_visibility = ["//visibility:public"])

load("//bzl:rules.bzl",
     "boot_archive",
     "boot_compiler",
     "compiler_module")

load("//bzl/rules/macros:compiler.bzl", "compiler")
load("//bzl/rules/macros:lexer.bzl", "lexer")
load("//bzl/rules/macros:stdlib.bzl", "stdlib")

compiler(
    name  = "compiler",
    stage = "baseline",  ## depends on boot toolchain
    build_host_constraints = [
        # "//platform/constraints/ocaml/executor:vm",
        # "//platform/constraints/ocaml/emitter:vm"
        "//platform/constraints/stage:boot"
    ],
    # target_host_constraints = [
    #     "//platform/constraints/ocaml/executor:vm",
    #     "//platform/constraints/ocaml/emitter:vm"
    # ],
)

compiler(
    name  = "ocamlc.byte",
    stage = "baseline",  ## depends on boot toolchain
    build_host_constraints = [
        "//platform/constraints/ocaml/executor:vm",
        "//platform/constraints/ocaml/emitter:vm"
    ],
    target_host_constraints = [
        "//platform/constraints/ocaml/executor:vm",
        "//platform/constraints/ocaml/emitter:vm"
    ],
)

compiler(
    name  = "ocamlopt.byte",
    stage = "baseline",
    # build_host = "vm",
    # target_host = "sys",
    build_host_constraints = [
        "//platform/constraints/ocaml/executor:vm",
        "//platform/constraints/ocaml/emitter:vm"
    ],
    target_host_constraints = [
        "//platform/constraints/ocaml/target/executor:vm",
        "//platform/constraints/ocaml/target/emitter:sys"
    ],
)

lexer(
    name  = "ocamllex.byte",
    stage = "baseline",
    build_host_constraints = [
        "//platform/constraints/ocaml/executor:vm",
        "//platform/constraints/ocaml/emitter:vm"
    ],
    target_host_constraints = [
        "//platform/constraints/ocaml/executor:vm",
        "//platform/constraints/ocaml/emitter:vm"
    ],
)

alias( # implemented in C, so no byte/opt versions.
    name   = "ocamlyacc",
    actual = "//yacc:ocamlyacc",
    target_compatible_with = ["//platform/target:boot?"]
)

alias( # implemented in C, so no byte/opt versions.
    name   = "ocamlrun",
    actual = "//runtime:ocamlrun",
)

stdlib(stage  = "baseline")
