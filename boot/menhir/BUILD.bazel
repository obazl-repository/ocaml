load("//bzl:rules.bzl",
     "boot_library",
     "compiler_module",
     "compiler_signature",
)

exports_files([
    "menhirLib.ml", "menhirLib.mli",
    "parser.ml", "parser.mli"
])

MODULE_OPTS = ["-nostdlib"]
SIG_OPTS = ["-nostdlib"]

################
## root Makefile.menhir:
# 'promote-menhir:' target writes to source tree.
# we can do this with `bazel run`
# https://dev.to/bazel/bazel-can-write-to-the-source-folder-b9b

boot_library(
    name = "menhir",
    manifest= [
        ":MenhirLib",
        ":Parser",
    ],
)

## FIXME: convert to namespace Ocaml (or Menhir or something)

compiler_module(
    name   = "MenhirLib",
    struct = "menhirLib.ml",
    sig    = "MenhirLib_cmi",
    opts = MODULE_OPTS,
    deps   = [
        "//stdlib:Stdlib.Sys",
        "//stdlib:Stdlib.String",
        "//stdlib:Stdlib.Printf",
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Lazy",
        "//stdlib:Stdlib.Char",
        "//stdlib:Stdlib.Bytes",
        "//stdlib:Stdlib.Buffer",
        "//stdlib:Stdlib.Array",
    ]
)

compiler_signature(
    name = "MenhirLib_cmi",
    src  = "menhirLib.mli",
    opts = SIG_OPTS,
    deps   = [
        "//stdlib:Stdlib.Obj",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Lazy",
    ]
)

compiler_module(
    name   = "Parser",
    struct = "parser.ml",
    sig    = "Parser_cmi",
    opts = MODULE_OPTS,
    deps   = [
        ":Menhir", ## (Boot Menhir MenhirLib)
        ## (Vb)
        ## (Val)
        ## (Type)
        ## (Typ)
        ## (Te)
        "//parsing:Syntaxerr",
        "//stdlib:Stdlib.String",
        "//otherlibs/str:Str",
        ## (Sig)
        ## (Rf)
        ## (Pat)
        "//parsing:Parsetree_cmi",
        ## (Opn)
        ## (Of)
        "//stdlib:Stdlib.Obj",
        ## (Mty)
        ## (Mtd)
        ## (Ms)
        ## (Mod)
        ## (Md)
        ## (Mb)
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.List",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Lazy",
        ## (Incl)
        ## (Exp)
        ## (Docstrings)
        ## (Cty)
        ## (Ctf)
        ## (Cstr)
        ## (Csig)
        "//utils:Clflags",
        ## (Cl)
        ## (Ci)
        ## (Cf)
        ## (Attr)
        "//parsing:Asttypes_cmi",
        "//parsing:Ast_helper",
    ]
)

compiler_signature(
    name = "Parser_cmi",
    src  = "parser.mli",
    opts = SIG_OPTS,
    deps   = [
        ":Menhir", ## (Boot Menhir MenhirLib)
        "//parsing:Parsetree_cmi",
        "//stdlib:Stdlib.Obj",
        "//parsing:Longident",
        "//parsing:Location",
        "//stdlib:Stdlib.Lexing",
        "//stdlib:Stdlib.Lazy",
        ## (Docstrings)
    ]
)

