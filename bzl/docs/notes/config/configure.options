`configure' configures OCaml 5.1.0+dev1-2022-06-09 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/ocaml]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-debug-runtime do not build runtime with debugging support
  --enable-debugger       build the debugger [default=auto]
  --disable-dependency-generation
                          do not compute dependency information for C sources
  --enable-instrumented-runtime
                          build the instrumented runtime [default=auto]

  --disable-systhreads    disable the Win32/POSIX threads library
  --disable-str-lib       do not build the str library
  --disable-unix-lib      do not build the unix library
  --disable-ocamldoc      do not build the ocamldoc documentation system
  --disable-ocamltest     do not build ocamltest
  --enable-native-toplevel
                          build the native toplevel
  --enable-frame-pointers use frame pointers in runtime and generated code
  --disable-cfi           disable the CFI directives in assembly files
  --enable-imprecise-c99-float-ops
                          enables potentially imprecise replacement
                          implementations of C99 float ops if unavailable on
                          this platform
  --enable-installing-source-artifacts
                          install *.cmt* and *.mli files
  --enable-installing-bytecode-programs
                          also install the bytecode versions of programs
  --disable-native-compiler
                          do not build the native compiler
  --enable-flambda        enable flambda optimizations
  --enable-flambda-invariants
                          enable invariants checks in flambda
  --enable-cmm-invariants enable invariants checks in Cmm
  --enable-reserved-header-bits=BITS
                          reserve BITS (between 0 and 31) bits in block
                          headers for profiling info
  --disable-stdlib-manpages
                          do not build or install the library man pages
  --enable-warn-error     treat C compiler warnings as errors
  --disable-flat-float-array
                          do not use flat float arrays
  --disable-function-sections
                          do not emit each function in a separate section
  --enable-mmap-map-stack use mmap to allocate stacks instead of malloc
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-odoc             build documentation with odoc
  --with-target-bindir    location of binary programs on target system
  --with-afl              use the AFL fuzzer
  --with-flexdll          bootstrap FlexDLL from the given sources
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-aix-soname=aix|svr4|both
                          shared library versioning (aka "SONAME") variant to
                          provide on AIX, [default=aix].
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot[=DIR]    Search for dependent libraries within DIR (or the
                          compiler's sysroot if not specified).
  --with-odoc

Some influential environment variables:
  AS          which assembler to use
  ASPP        which assembler (with preprocessor) to use
  PARTIALLD   how to build partial (relocatable) object files
  DLLIBS      which libraries to use (in addition to -ldl) to load dynamic
              libs
  WINDOWS_UNICODE_MODE
              how to handle Unicode under Windows: ansi, compatible
  DEFAULT_STRING

  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.
  CPP         C preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <caml-list@inria.fr>.
OCaml home page: <http://www.ocaml.org>.
